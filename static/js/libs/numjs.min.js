function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequirefa79"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequirefa79"] = parcelRequire;
}
var $5b80294f529b48c3$exports = {};

$parcel$export($5b80294f529b48c3$exports, "broadcast", () => $5b80294f529b48c3$export$24d33a6f4bffea69);
$parcel$export($5b80294f529b48c3$exports, "add", () => $5b80294f529b48c3$export$e16d8520af44a096);
$parcel$export($5b80294f529b48c3$exports, "multiply", () => $5b80294f529b48c3$export$2060d2db72cce88f);
$parcel$export($5b80294f529b48c3$exports, "divide", () => $5b80294f529b48c3$export$cd007d971a5a2143);
$parcel$export($5b80294f529b48c3$exports, "subtract", () => $5b80294f529b48c3$export$4e2d2ead65e5f7e3);
$parcel$export($5b80294f529b48c3$exports, "equal", () => $5b80294f529b48c3$export$411ce8e5a71e3069);
$parcel$export($5b80294f529b48c3$exports, "flatten", () => $5b80294f529b48c3$export$bffa455ba8c619a6);
$parcel$export($5b80294f529b48c3$exports, "reshape", () => $5b80294f529b48c3$export$9eaad88cf88cee2b);
$parcel$export($5b80294f529b48c3$exports, "exp", () => $5b80294f529b48c3$export$b310ec824aaee37f);
$parcel$export($5b80294f529b48c3$exports, "log", () => $5b80294f529b48c3$export$bef1f36f5486a6a3);
$parcel$export($5b80294f529b48c3$exports, "sqrt", () => $5b80294f529b48c3$export$eba8049fb5020b81);
$parcel$export($5b80294f529b48c3$exports, "power", () => $5b80294f529b48c3$export$836601bcef5ff40);
$parcel$export($5b80294f529b48c3$exports, "sum", () => $5b80294f529b48c3$export$8a63f25cc62965f1);
$parcel$export($5b80294f529b48c3$exports, "mean", () => $5b80294f529b48c3$export$1ce691f85baaa52);
$parcel$export($5b80294f529b48c3$exports, "std", () => $5b80294f529b48c3$export$b14c5e819cb6c927);
$parcel$export($5b80294f529b48c3$exports, "min", () => $5b80294f529b48c3$export$96ec731ed4dcb222);
$parcel$export($5b80294f529b48c3$exports, "max", () => $5b80294f529b48c3$export$8960430cfd85939f);
$parcel$export($5b80294f529b48c3$exports, "mod", () => $5b80294f529b48c3$export$842a2cf37af977e1);
$parcel$export($5b80294f529b48c3$exports, "transpose", () => $5b80294f529b48c3$export$9cb09a71b7d66923);
$parcel$export($5b80294f529b48c3$exports, "negative", () => $5b80294f529b48c3$export$5f47f64d03acd206);
$parcel$export($5b80294f529b48c3$exports, "arange", () => $5b80294f529b48c3$export$4e92d6e2d1690647);
$parcel$export($5b80294f529b48c3$exports, "zeros", () => $5b80294f529b48c3$export$4445a00dafa2633b);
$parcel$export($5b80294f529b48c3$exports, "ones", () => $5b80294f529b48c3$export$21041dee6b8001b0);
$parcel$export($5b80294f529b48c3$exports, "empty", () => $5b80294f529b48c3$export$6e22c362a0406a2c);
$parcel$export($5b80294f529b48c3$exports, "random", () => $5b80294f529b48c3$export$4385e60b38654f68);
$parcel$export($5b80294f529b48c3$exports, "softmax", () => $5b80294f529b48c3$export$e008137e76238601);
$parcel$export($5b80294f529b48c3$exports, "sigmoid", () => $5b80294f529b48c3$export$3b295495ca3cad7c);
$parcel$export($5b80294f529b48c3$exports, "clip", () => $5b80294f529b48c3$export$e0b576e7a74416cd);
$parcel$export($5b80294f529b48c3$exports, "leakyRelu", () => $5b80294f529b48c3$export$23a860e40a2c6b61);
$parcel$export($5b80294f529b48c3$exports, "tanh", () => $5b80294f529b48c3$export$7128670e45beef9a);
$parcel$export($5b80294f529b48c3$exports, "abs", () => $5b80294f529b48c3$export$2335f513bbd82c6d);
$parcel$export($5b80294f529b48c3$exports, "cos", () => $5b80294f529b48c3$export$50d414a77b60d802);
$parcel$export($5b80294f529b48c3$exports, "arccos", () => $5b80294f529b48c3$export$a77ec9dbb835546d);
$parcel$export($5b80294f529b48c3$exports, "sin", () => $5b80294f529b48c3$export$5de3937cb4b592ed);
$parcel$export($5b80294f529b48c3$exports, "arcsin", () => $5b80294f529b48c3$export$5f2270b14fe911ec);
$parcel$export($5b80294f529b48c3$exports, "tan", () => $5b80294f529b48c3$export$fcdd3b0b3246a325);
$parcel$export($5b80294f529b48c3$exports, "arctan", () => $5b80294f529b48c3$export$1dd23712ef22299b);
$parcel$export($5b80294f529b48c3$exports, "dot", () => $5b80294f529b48c3$export$94132a0e348806d4);
$parcel$export($5b80294f529b48c3$exports, "concatenate", () => $5b80294f529b48c3$export$375c71d43969527d);
$parcel$export($5b80294f529b48c3$exports, "round", () => $5b80294f529b48c3$export$2077e0241d6afd3c);
$parcel$export($5b80294f529b48c3$exports, "convolve", () => $5b80294f529b48c3$export$ece4a5f0da45b7c9);
$parcel$export($5b80294f529b48c3$exports, "fftconvolve", () => $5b80294f529b48c3$export$16aabfb23a0a5107);
$parcel$export($5b80294f529b48c3$exports, "fft", () => $5b80294f529b48c3$export$a535ef183b6128fa);
$parcel$export($5b80294f529b48c3$exports, "ifft", () => $5b80294f529b48c3$export$776649b0bf8ce1fd);
$parcel$export($5b80294f529b48c3$exports, "diag", () => $5b80294f529b48c3$export$c042e7c2f59bc046);
$parcel$export($5b80294f529b48c3$exports, "identity", () => $5b80294f529b48c3$export$f0954fd7d5368655);
$parcel$export($5b80294f529b48c3$exports, "stack", () => $5b80294f529b48c3$export$a57ab32f40f83ea9);
$parcel$export($5b80294f529b48c3$exports, "flip", () => $5b80294f529b48c3$export$8a83211c878a3f1f);
$parcel$export($5b80294f529b48c3$exports, "rot90", () => $5b80294f529b48c3$export$e89c04f990ad139d);
$parcel$export($5b80294f529b48c3$exports, "array", () => $5b80294f529b48c3$export$2f23118c22fb2630);
$parcel$export($5b80294f529b48c3$exports, "remainder", () => $5b80294f529b48c3$export$159037f780d3415c);
$parcel$export($5b80294f529b48c3$exports, "int8", () => $5b80294f529b48c3$export$5984f25eab09961f);
$parcel$export($5b80294f529b48c3$exports, "uint8", () => $5b80294f529b48c3$export$52e103c63c4e68cf);
$parcel$export($5b80294f529b48c3$exports, "int16", () => $5b80294f529b48c3$export$c35c15c7caeff2b6);
$parcel$export($5b80294f529b48c3$exports, "uint16", () => $5b80294f529b48c3$export$56bd24b5a3ee8456);
$parcel$export($5b80294f529b48c3$exports, "int32", () => $5b80294f529b48c3$export$1d95835383bb05a);
$parcel$export($5b80294f529b48c3$exports, "uint32", () => $5b80294f529b48c3$export$de9ffb9418dd7d0d);
$parcel$export($5b80294f529b48c3$exports, "float32", () => $5b80294f529b48c3$export$1a4bac2aea11f30e);
$parcel$export($5b80294f529b48c3$exports, "float64", () => $5b80294f529b48c3$export$76f82835c9736f87);
$parcel$export($5b80294f529b48c3$exports, "uint8Clamped", () => $5b80294f529b48c3$export$6f7fad9e75d68564);
$parcel$export($5b80294f529b48c3$exports, "config", () => $3a8c7a0e8ba02f7c$export$2e2bcd8739ae039);
$parcel$export($5b80294f529b48c3$exports, "dtypes", () => $d8385de2fa709eaa$export$2e2bcd8739ae039);
$parcel$export($5b80294f529b48c3$exports, "ndarray", () => (/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports)));
$parcel$export($5b80294f529b48c3$exports, "NdArray", () => $d5dcea7867fbef06$export$bc5d31f6e5be960c);
$parcel$export($5b80294f529b48c3$exports, "errors", () => $e22306885f624a59$exports);
var $a1c71f2c05033a53$exports = {};
"use strict";
var $66348460240f6b71$exports = {};
"use strict";
var $189fa71fecbaf821$exports = {};
(function(root, factory) {
    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.
    /* istanbul ignore next */ if (typeof define === 'function' && define.amd) define([
        'exports'
    ], factory);
    else if (typeof $189fa71fecbaf821$exports !== 'undefined') factory($189fa71fecbaf821$exports);
    else factory(root.esprima = {
    });
})($189fa71fecbaf821$exports, function(exports) {
    'use strict';
    var Token, TokenName, FnExprTokens, Syntax, PropertyKind, Messages, Regex, SyntaxTreeDelegate, source, strict, index1, lineNumber, lineStart, length, delegate, lookahead, state, extra;
    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9
    };
    TokenName = {
    };
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.RegularExpression] = 'RegularExpression';
    // A function following one of those tokens is an expression.
    FnExprTokens = [
        '(',
        '{',
        '[',
        'in',
        'typeof',
        'instanceof',
        'new',
        'return',
        'case',
        'delete',
        'throw',
        'void',
        // assignment operators
        '=',
        '+=',
        '-=',
        '*=',
        '/=',
        '%=',
        '<<=',
        '>>=',
        '>>>=',
        '&=',
        '|=',
        '^=',
        ',',
        // binary/unary operators
        '+',
        '-',
        '*',
        '/',
        '%',
        '++',
        '--',
        '<<',
        '>>',
        '>>>',
        '&',
        '|',
        '^',
        '!',
        '~',
        '&&',
        '||',
        '?',
        ':',
        '===',
        '==',
        '>=',
        '<=',
        '<',
        '>',
        '!=',
        '!=='
    ];
    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement'
    };
    PropertyKind = {
        Data: 1,
        Get: 2,
        Set: 4
    };
    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken: 'Unexpected token %0',
        UnexpectedNumber: 'Unexpected number',
        UnexpectedString: 'Unexpected string',
        UnexpectedIdentifier: 'Unexpected identifier',
        UnexpectedReserved: 'Unexpected reserved word',
        UnexpectedEOS: 'Unexpected end of input',
        NewlineAfterThrow: 'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp: 'Invalid regular expression: missing /',
        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally: 'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith: 'Strict mode code may not include a with statement',
        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
        StrictDuplicateProperty: 'Duplicate data property in object literal not allowed in strict mode',
        AccessorDataProperty: 'Object literal may not have data and accessor property with the same name',
        AccessorGetSet: 'Object literal may not have multiple get/set accessors with the same name',
        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord: 'Use of future reserved word in strict mode'
    };
    // See also tools/generate-unicode-regex.py.
    Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
    };
    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.
    function assert(condition, message) {
        /* istanbul ignore if */ if (!condition) throw new Error('ASSERT: ' + message);
    }
    function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57; // 0..9
    }
    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }
    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }
    // 7.2 White Space
    function isWhiteSpace(ch) {
        return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && [
            5760,
            6158,
            8192,
            8193,
            8194,
            8195,
            8196,
            8197,
            8198,
            8199,
            8200,
            8201,
            8202,
            8239,
            8287,
            12288,
            65279
        ].indexOf(ch) >= 0;
    }
    // 7.3 Line Terminators
    function isLineTerminator(ch) {
        return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
    }
    // 7.6 Identifier Names and Identifiers
    function isIdentifierStart(ch) {
        return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch === 92 || ch >= 128 && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch));
    }
    function isIdentifierPart(ch) {
        return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57 || ch === 92 || ch >= 128 && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch));
    }
    // 7.6.1.2 Future Reserved Words
    function isFutureReservedWord(id) {
        switch(id){
            case 'class':
            case 'enum':
            case 'export':
            case 'extends':
            case 'import':
            case 'super':
                return true;
            default:
                return false;
        }
    }
    function isStrictModeReservedWord(id) {
        switch(id){
            case 'implements':
            case 'interface':
            case 'package':
            case 'private':
            case 'protected':
            case 'public':
            case 'static':
            case 'yield':
            case 'let':
                return true;
            default:
                return false;
        }
    }
    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }
    // 7.6.1.1 Keywords
    function isKeyword(id) {
        if (strict && isStrictModeReservedWord(id)) return true;
        // 'const' is specialized as Keyword in V8.
        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
        // Some others are from future reserved words.
        switch(id.length){
            case 2:
                return id === 'if' || id === 'in' || id === 'do';
            case 3:
                return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';
            case 4:
                return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
            case 5:
                return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
            case 6:
                return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
            case 7:
                return id === 'default' || id === 'finally' || id === 'extends';
            case 8:
                return id === 'function' || id === 'continue' || id === 'debugger';
            case 10:
                return id === 'instanceof';
            default:
                return false;
        }
    }
    // 7.4 Comments
    function addComment(type, value, start, end, loc) {
        var comment, attacher;
        assert(typeof start === 'number', 'Comment must have valid position');
        // Because the way the actual token is scanned, often the comments
        // (if any) are skipped twice during the lexical analysis.
        // Thus, we need to skip adding a comment if the comment array already
        // handled it.
        if (state.lastCommentStart >= start) return;
        state.lastCommentStart = start;
        comment = {
            type: type,
            value: value
        };
        if (extra.range) comment.range = [
            start,
            end
        ];
        if (extra.loc) comment.loc = loc;
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
    }
    function skipSingleLineComment(offset) {
        var start, loc, ch, comment;
        start = index1 - offset;
        loc = {
            start: {
                line: lineNumber,
                column: index1 - lineStart - offset
            }
        };
        while(index1 < length){
            ch = source.charCodeAt(index1);
            ++index1;
            if (isLineTerminator(ch)) {
                if (extra.comments) {
                    comment = source.slice(start + offset, index1 - 1);
                    loc.end = {
                        line: lineNumber,
                        column: index1 - lineStart - 1
                    };
                    addComment('Line', comment, start, index1 - 1, loc);
                }
                if (ch === 13 && source.charCodeAt(index1) === 10) ++index1;
                ++lineNumber;
                lineStart = index1;
                return;
            }
        }
        if (extra.comments) {
            comment = source.slice(start + offset, index1);
            loc.end = {
                line: lineNumber,
                column: index1 - lineStart
            };
            addComment('Line', comment, start, index1, loc);
        }
    }
    function skipMultiLineComment() {
        var start, loc, ch, comment;
        if (extra.comments) {
            start = index1 - 2;
            loc = {
                start: {
                    line: lineNumber,
                    column: index1 - lineStart - 2
                }
            };
        }
        while(index1 < length){
            ch = source.charCodeAt(index1);
            if (isLineTerminator(ch)) {
                if (ch === 13 && source.charCodeAt(index1 + 1) === 10) ++index1;
                ++lineNumber;
                ++index1;
                lineStart = index1;
                if (index1 >= length) throwError({
                }, Messages.UnexpectedToken, 'ILLEGAL');
            } else if (ch === 42) {
                // Block comment ends with '*/'.
                if (source.charCodeAt(index1 + 1) === 47) {
                    ++index1;
                    ++index1;
                    if (extra.comments) {
                        comment = source.slice(start + 2, index1 - 2);
                        loc.end = {
                            line: lineNumber,
                            column: index1 - lineStart
                        };
                        addComment('Block', comment, start, index1, loc);
                    }
                    return;
                }
                ++index1;
            } else ++index1;
        }
        throwError({
        }, Messages.UnexpectedToken, 'ILLEGAL');
    }
    function skipComment() {
        var ch, start;
        start = index1 === 0;
        while(index1 < length){
            ch = source.charCodeAt(index1);
            if (isWhiteSpace(ch)) ++index1;
            else if (isLineTerminator(ch)) {
                ++index1;
                if (ch === 13 && source.charCodeAt(index1) === 10) ++index1;
                ++lineNumber;
                lineStart = index1;
                start = true;
            } else if (ch === 47) {
                ch = source.charCodeAt(index1 + 1);
                if (ch === 47) {
                    ++index1;
                    ++index1;
                    skipSingleLineComment(2);
                    start = true;
                } else if (ch === 42) {
                    ++index1;
                    ++index1;
                    skipMultiLineComment();
                } else break;
            } else if (start && ch === 45) {
                // U+003E is '>'
                if (source.charCodeAt(index1 + 1) === 45 && source.charCodeAt(index1 + 2) === 62) {
                    // '-->' is a single-line comment
                    index1 += 3;
                    skipSingleLineComment(3);
                } else break;
            } else if (ch === 60) {
                if (source.slice(index1 + 1, index1 + 4) === '!--') {
                    ++index1; // `<`
                    ++index1; // `!`
                    ++index1; // `-`
                    ++index1; // `-`
                    skipSingleLineComment(4);
                } else break;
            } else break;
        }
    }
    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;
        len = prefix === 'u' ? 4 : 2;
        for(i = 0; i < len; ++i){
            if (index1 < length && isHexDigit(source[index1])) {
                ch = source[index1++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else return '';
        }
        return String.fromCharCode(code);
    }
    function getEscapedIdentifier() {
        var ch, id;
        ch = source.charCodeAt(index1++);
        id = String.fromCharCode(ch);
        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 92) {
            if (source.charCodeAt(index1) !== 117) throwError({
            }, Messages.UnexpectedToken, 'ILLEGAL');
            ++index1;
            ch = scanHexEscape('u');
            if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) throwError({
            }, Messages.UnexpectedToken, 'ILLEGAL');
            id = ch;
        }
        while(index1 < length){
            ch = source.charCodeAt(index1);
            if (!isIdentifierPart(ch)) break;
            ++index1;
            id += String.fromCharCode(ch);
            // '\u' (U+005C, U+0075) denotes an escaped character.
            if (ch === 92) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index1) !== 117) throwError({
                }, Messages.UnexpectedToken, 'ILLEGAL');
                ++index1;
                ch = scanHexEscape('u');
                if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) throwError({
                }, Messages.UnexpectedToken, 'ILLEGAL');
                id += ch;
            }
        }
        return id;
    }
    function getIdentifier() {
        var start, ch;
        start = index1++;
        while(index1 < length){
            ch = source.charCodeAt(index1);
            if (ch === 92) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                index1 = start;
                return getEscapedIdentifier();
            }
            if (isIdentifierPart(ch)) ++index1;
            else break;
        }
        return source.slice(start, index1);
    }
    function scanIdentifier() {
        var start, id, type;
        start = index1;
        // Backslash (U+005C) starts an escaped character.
        id = source.charCodeAt(index1) === 92 ? getEscapedIdentifier() : getIdentifier();
        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) type = Token.Identifier;
        else if (isKeyword(id)) type = Token.Keyword;
        else if (id === 'null') type = Token.NullLiteral;
        else if (id === 'true' || id === 'false') type = Token.BooleanLiteral;
        else type = Token.Identifier;
        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index1
        };
    }
    // 7.7 Punctuators
    function scanPunctuator() {
        var start = index1, code = source.charCodeAt(index1), code2, ch1 = source[index1], ch2, ch3, ch4;
        switch(code){
            // Check for most common single-character punctuators.
            case 46:
            case 40:
            case 41:
            case 59:
            case 44:
            case 123:
            case 125:
            case 91:
            case 93:
            case 58:
            case 63:
            case 126:
                ++index1;
                if (extra.tokenize) {
                    if (code === 40) extra.openParenToken = extra.tokens.length;
                    else if (code === 123) extra.openCurlyToken = extra.tokens.length;
                }
                return {
                    type: Token.Punctuator,
                    value: String.fromCharCode(code),
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    start: start,
                    end: index1
                };
            default:
                code2 = source.charCodeAt(index1 + 1);
                // '=' (U+003D) marks an assignment or comparison operator.
                if (code2 === 61) switch(code){
                    case 43:
                    case 45:
                    case 47:
                    case 60:
                    case 62:
                    case 94:
                    case 124:
                    case 37:
                    case 38:
                    case 42:
                        index1 += 2;
                        return {
                            type: Token.Punctuator,
                            value: String.fromCharCode(code) + String.fromCharCode(code2),
                            lineNumber: lineNumber,
                            lineStart: lineStart,
                            start: start,
                            end: index1
                        };
                    case 33:
                    case 61:
                        index1 += 2;
                        // !== and ===
                        if (source.charCodeAt(index1) === 61) ++index1;
                        return {
                            type: Token.Punctuator,
                            value: source.slice(start, index1),
                            lineNumber: lineNumber,
                            lineStart: lineStart,
                            start: start,
                            end: index1
                        };
                }
        }
        // 4-character punctuator: >>>=
        ch4 = source.substr(index1, 4);
        if (ch4 === '>>>=') {
            index1 += 4;
            return {
                type: Token.Punctuator,
                value: ch4,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index1
            };
        }
        // 3-character punctuators: === !== >>> <<= >>=
        ch3 = ch4.substr(0, 3);
        if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
            index1 += 3;
            return {
                type: Token.Punctuator,
                value: ch3,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index1
            };
        }
        // Other 2-character punctuators: ++ -- << >> && ||
        ch2 = ch3.substr(0, 2);
        if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {
            index1 += 2;
            return {
                type: Token.Punctuator,
                value: ch2,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index1
            };
        }
        // 1-character punctuators: < > = ! + - * % & | ^ /
        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
            ++index1;
            return {
                type: Token.Punctuator,
                value: ch1,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index1
            };
        }
        throwError({
        }, Messages.UnexpectedToken, 'ILLEGAL');
    }
    // 7.8.3 Numeric Literals
    function scanHexLiteral(start) {
        var number = '';
        while(index1 < length){
            if (!isHexDigit(source[index1])) break;
            number += source[index1++];
        }
        if (number.length === 0) throwError({
        }, Messages.UnexpectedToken, 'ILLEGAL');
        if (isIdentifierStart(source.charCodeAt(index1))) throwError({
        }, Messages.UnexpectedToken, 'ILLEGAL');
        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index1
        };
    }
    function scanOctalLiteral(start) {
        var number = '0' + source[index1++];
        while(index1 < length){
            if (!isOctalDigit(source[index1])) break;
            number += source[index1++];
        }
        if (isIdentifierStart(source.charCodeAt(index1)) || isDecimalDigit(source.charCodeAt(index1))) throwError({
        }, Messages.UnexpectedToken, 'ILLEGAL');
        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: true,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index1
        };
    }
    function isImplicitOctalLiteral() {
        var i, ch;
        // Implicit octal, unless there is a non-octal digit.
        // (Annex B.1.1 on Numeric Literals)
        for(i = index1 + 1; i < length; ++i){
            ch = source[i];
            if (ch === '8' || ch === '9') return false;
            if (!isOctalDigit(ch)) return true;
        }
        return true;
    }
    function scanNumericLiteral() {
        var number, start, ch;
        ch = source[index1];
        assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
        start = index1;
        number = '';
        if (ch !== '.') {
            number = source[index1++];
            ch = source[index1];
            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index1;
                    return scanHexLiteral(start);
                }
                if (isOctalDigit(ch)) {
                    if (isImplicitOctalLiteral()) return scanOctalLiteral(start);
                }
            }
            while(isDecimalDigit(source.charCodeAt(index1)))number += source[index1++];
            ch = source[index1];
        }
        if (ch === '.') {
            number += source[index1++];
            while(isDecimalDigit(source.charCodeAt(index1)))number += source[index1++];
            ch = source[index1];
        }
        if (ch === 'e' || ch === 'E') {
            number += source[index1++];
            ch = source[index1];
            if (ch === '+' || ch === '-') number += source[index1++];
            if (isDecimalDigit(source.charCodeAt(index1))) while(isDecimalDigit(source.charCodeAt(index1)))number += source[index1++];
            else throwError({
            }, Messages.UnexpectedToken, 'ILLEGAL');
        }
        if (isIdentifierStart(source.charCodeAt(index1))) throwError({
        }, Messages.UnexpectedToken, 'ILLEGAL');
        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index1
        };
    }
    // 7.8.4 String Literals
    function scanStringLiteral() {
        var str = '', quote, start, ch, code, unescaped, restore, octal = false, startLineNumber, startLineStart;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        quote = source[index1];
        assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
        start = index1;
        ++index1;
        while(index1 < length){
            ch = source[index1++];
            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index1++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) switch(ch){
                    case 'u':
                    case 'x':
                        restore = index1;
                        unescaped = scanHexEscape(ch);
                        if (unescaped) str += unescaped;
                        else {
                            index1 = restore;
                            str += ch;
                        }
                        break;
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;
                    default:
                        if (isOctalDigit(ch)) {
                            code = '01234567'.indexOf(ch);
                            // \0 is not octal escape sequence
                            if (code !== 0) octal = true;
                            if (index1 < length && isOctalDigit(source[index1])) {
                                octal = true;
                                code = code * 8 + '01234567'.indexOf(source[index1++]);
                                // 3 digits are only allowed when string starts
                                // with 0, 1, 2, 3
                                if ('0123'.indexOf(ch) >= 0 && index1 < length && isOctalDigit(source[index1])) code = code * 8 + '01234567'.indexOf(source[index1++]);
                            }
                            str += String.fromCharCode(code);
                        } else str += ch;
                        break;
                }
                else {
                    ++lineNumber;
                    if (ch === '\r' && source[index1] === '\n') ++index1;
                    lineStart = index1;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) break;
            else str += ch;
        }
        if (quote !== '') throwError({
        }, Messages.UnexpectedToken, 'ILLEGAL');
        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            startLineNumber: startLineNumber,
            startLineStart: startLineStart,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index1
        };
    }
    function testRegExp(pattern, flags) {
        var value;
        try {
            value = new RegExp(pattern, flags);
        } catch (e) {
            throwError({
            }, Messages.InvalidRegExp);
        }
        return value;
    }
    function scanRegExpBody() {
        var ch, str, classMarker, terminated, body;
        ch = source[index1];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index1++];
        classMarker = false;
        terminated = false;
        while(index1 < length){
            ch = source[index1++];
            str += ch;
            if (ch === '\\') {
                ch = source[index1++];
                // ECMA-262 7.8.5
                if (isLineTerminator(ch.charCodeAt(0))) throwError({
                }, Messages.UnterminatedRegExp);
                str += ch;
            } else if (isLineTerminator(ch.charCodeAt(0))) throwError({
            }, Messages.UnterminatedRegExp);
            else if (classMarker) {
                if (ch === ']') classMarker = false;
            } else {
                if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') classMarker = true;
            }
        }
        if (!terminated) throwError({
        }, Messages.UnterminatedRegExp);
        // Exclude leading and trailing slash.
        body = str.substr(1, str.length - 2);
        return {
            value: body,
            literal: str
        };
    }
    function scanRegExpFlags() {
        var ch, str, flags, restore;
        str = '';
        flags = '';
        while(index1 < length){
            ch = source[index1];
            if (!isIdentifierPart(ch.charCodeAt(0))) break;
            ++index1;
            if (ch === '\\' && index1 < length) {
                ch = source[index1];
                if (ch === 'u') {
                    ++index1;
                    restore = index1;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for(str += '\\u'; restore < index1; ++restore)str += source[restore];
                    } else {
                        index1 = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                    throwErrorTolerant({
                    }, Messages.UnexpectedToken, 'ILLEGAL');
                } else {
                    str += '\\';
                    throwErrorTolerant({
                    }, Messages.UnexpectedToken, 'ILLEGAL');
                }
            } else {
                flags += ch;
                str += ch;
            }
        }
        return {
            value: flags,
            literal: str
        };
    }
    function scanRegExp() {
        var start, body, flags, pattern, value;
        lookahead = null;
        skipComment();
        start = index1;
        body = scanRegExpBody();
        flags = scanRegExpFlags();
        value = testRegExp(body.value, flags.value);
        if (extra.tokenize) return {
            type: Token.RegularExpression,
            value: value,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index1
        };
        return {
            literal: body.literal + flags.literal,
            value: value,
            start: start,
            end: index1
        };
    }
    function collectRegex() {
        var pos, loc, regex, token;
        skipComment();
        pos = index1;
        loc = {
            start: {
                line: lineNumber,
                column: index1 - lineStart
            }
        };
        regex = scanRegExp();
        loc.end = {
            line: lineNumber,
            column: index1 - lineStart
        };
        /* istanbul ignore next */ if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') extra.tokens.pop();
                }
            }
            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                range: [
                    pos,
                    index1
                ],
                loc: loc
            });
        }
        return regex;
    }
    function isIdentifierName(token) {
        return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
    }
    function advanceSlash() {
        var prevToken, checkToken;
        // Using the following algorithm:
        // https://github.com/mozilla/sweet.js/wiki/design
        prevToken = extra.tokens[extra.tokens.length - 1];
        if (!prevToken) // Nothing before that: it cannot be a division.
        return collectRegex();
        if (prevToken.type === 'Punctuator') {
            if (prevToken.value === ']') return scanPunctuator();
            if (prevToken.value === ')') {
                checkToken = extra.tokens[extra.openParenToken - 1];
                if (checkToken && checkToken.type === 'Keyword' && (checkToken.value === 'if' || checkToken.value === 'while' || checkToken.value === 'for' || checkToken.value === 'with')) return collectRegex();
                return scanPunctuator();
            }
            if (prevToken.value === '}') {
                // Dividing a function by anything makes little sense,
                // but we have to check for that.
                if (extra.tokens[extra.openCurlyToken - 3] && extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
                    // Anonymous function.
                    checkToken = extra.tokens[extra.openCurlyToken - 4];
                    if (!checkToken) return scanPunctuator();
                } else if (extra.tokens[extra.openCurlyToken - 4] && extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
                    // Named function.
                    checkToken = extra.tokens[extra.openCurlyToken - 5];
                    if (!checkToken) return collectRegex();
                } else return scanPunctuator();
                // checkToken determines whether the function is
                // a declaration or an expression.
                if (FnExprTokens.indexOf(checkToken.value) >= 0) // It is an expression.
                return scanPunctuator();
                // It is a declaration.
                return collectRegex();
            }
            return collectRegex();
        }
        if (prevToken.type === 'Keyword' && prevToken.value !== 'this') return collectRegex();
        return scanPunctuator();
    }
    function advance() {
        var ch;
        skipComment();
        if (index1 >= length) return {
            type: Token.EOF,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: index1,
            end: index1
        };
        ch = source.charCodeAt(index1);
        if (isIdentifierStart(ch)) return scanIdentifier();
        // Very common: ( and ) and ;
        if (ch === 40 || ch === 41 || ch === 59) return scanPunctuator();
        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (ch === 39 || ch === 34) return scanStringLiteral();
        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (ch === 46) {
            if (isDecimalDigit(source.charCodeAt(index1 + 1))) return scanNumericLiteral();
            return scanPunctuator();
        }
        if (isDecimalDigit(ch)) return scanNumericLiteral();
        // Slash (/) U+002F can also start a regex.
        if (extra.tokenize && ch === 47) return advanceSlash();
        return scanPunctuator();
    }
    function collectToken() {
        var loc, token, range, value;
        skipComment();
        loc = {
            start: {
                line: lineNumber,
                column: index1 - lineStart
            }
        };
        token = advance();
        loc.end = {
            line: lineNumber,
            column: index1 - lineStart
        };
        if (token.type !== Token.EOF) {
            value = source.slice(token.start, token.end);
            extra.tokens.push({
                type: TokenName[token.type],
                value: value,
                range: [
                    token.start,
                    token.end
                ],
                loc: loc
            });
        }
        return token;
    }
    function lex() {
        var token;
        token = lookahead;
        index1 = token.end;
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;
        lookahead = typeof extra.tokens !== 'undefined' ? collectToken() : advance();
        index1 = token.end;
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;
        return token;
    }
    function peek() {
        var pos, line, start;
        pos = index1;
        line = lineNumber;
        start = lineStart;
        lookahead = typeof extra.tokens !== 'undefined' ? collectToken() : advance();
        index1 = pos;
        lineNumber = line;
        lineStart = start;
    }
    function Position(line, column) {
        this.line = line;
        this.column = column;
    }
    function SourceLocation(startLine, startColumn, line, column) {
        this.start = new Position(startLine, startColumn);
        this.end = new Position(line, column);
    }
    SyntaxTreeDelegate = {
        name: 'SyntaxTree',
        processComment: function(node) {
            var lastChild, trailingComments;
            if (node.type === Syntax.Program) {
                if (node.body.length > 0) return;
            }
            if (extra.trailingComments.length > 0) {
                if (extra.trailingComments[0].range[0] >= node.range[1]) {
                    trailingComments = extra.trailingComments;
                    extra.trailingComments = [];
                } else extra.trailingComments.length = 0;
            } else if (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments && extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {
                trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
            }
            // Eating the stack.
            while(extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0])lastChild = extra.bottomRightStack.pop();
            if (lastChild) {
                if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {
                    node.leadingComments = lastChild.leadingComments;
                    delete lastChild.leadingComments;
                }
            } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {
                node.leadingComments = extra.leadingComments;
                extra.leadingComments = [];
            }
            if (trailingComments) node.trailingComments = trailingComments;
            extra.bottomRightStack.push(node);
        },
        markEnd: function(node, startToken) {
            if (extra.range) node.range = [
                startToken.start,
                index1
            ];
            if (extra.loc) {
                node.loc = new SourceLocation(startToken.startLineNumber === undefined ? startToken.lineNumber : startToken.startLineNumber, startToken.start - (startToken.startLineStart === undefined ? startToken.lineStart : startToken.startLineStart), lineNumber, index1 - lineStart);
                this.postProcess(node);
            }
            if (extra.attachComment) this.processComment(node);
            return node;
        },
        postProcess: function(node) {
            if (extra.source) node.loc.source = extra.source;
            return node;
        },
        createArrayExpression: function(elements) {
            return {
                type: Syntax.ArrayExpression,
                elements: elements
            };
        },
        createAssignmentExpression: function(operator, left, right) {
            return {
                type: Syntax.AssignmentExpression,
                operator: operator,
                left: left,
                right: right
            };
        },
        createBinaryExpression: function(operator, left, right) {
            var type = operator === '||' || operator === '&&' ? Syntax.LogicalExpression : Syntax.BinaryExpression;
            return {
                type: type,
                operator: operator,
                left: left,
                right: right
            };
        },
        createBlockStatement: function(body) {
            return {
                type: Syntax.BlockStatement,
                body: body
            };
        },
        createBreakStatement: function(label) {
            return {
                type: Syntax.BreakStatement,
                label: label
            };
        },
        createCallExpression: function(callee, args) {
            return {
                type: Syntax.CallExpression,
                callee: callee,
                'arguments': args
            };
        },
        createCatchClause: function(param, body) {
            return {
                type: Syntax.CatchClause,
                param: param,
                body: body
            };
        },
        createConditionalExpression: function(test, consequent, alternate) {
            return {
                type: Syntax.ConditionalExpression,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },
        createContinueStatement: function(label) {
            return {
                type: Syntax.ContinueStatement,
                label: label
            };
        },
        createDebuggerStatement: function() {
            return {
                type: Syntax.DebuggerStatement
            };
        },
        createDoWhileStatement: function(body, test) {
            return {
                type: Syntax.DoWhileStatement,
                body: body,
                test: test
            };
        },
        createEmptyStatement: function() {
            return {
                type: Syntax.EmptyStatement
            };
        },
        createExpressionStatement: function(expression) {
            return {
                type: Syntax.ExpressionStatement,
                expression: expression
            };
        },
        createForStatement: function(init, test, update, body) {
            return {
                type: Syntax.ForStatement,
                init: init,
                test: test,
                update: update,
                body: body
            };
        },
        createForInStatement: function(left, right, body) {
            return {
                type: Syntax.ForInStatement,
                left: left,
                right: right,
                body: body,
                each: false
            };
        },
        createFunctionDeclaration: function(id, params, defaults, body) {
            return {
                type: Syntax.FunctionDeclaration,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },
        createFunctionExpression: function(id, params, defaults, body) {
            return {
                type: Syntax.FunctionExpression,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },
        createIdentifier: function(name) {
            return {
                type: Syntax.Identifier,
                name: name
            };
        },
        createIfStatement: function(test, consequent, alternate) {
            return {
                type: Syntax.IfStatement,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },
        createLabeledStatement: function(label, body) {
            return {
                type: Syntax.LabeledStatement,
                label: label,
                body: body
            };
        },
        createLiteral: function(token) {
            return {
                type: Syntax.Literal,
                value: token.value,
                raw: source.slice(token.start, token.end)
            };
        },
        createMemberExpression: function(accessor, object, property) {
            return {
                type: Syntax.MemberExpression,
                computed: accessor === '[',
                object: object,
                property: property
            };
        },
        createNewExpression: function(callee, args) {
            return {
                type: Syntax.NewExpression,
                callee: callee,
                'arguments': args
            };
        },
        createObjectExpression: function(properties) {
            return {
                type: Syntax.ObjectExpression,
                properties: properties
            };
        },
        createPostfixExpression: function(operator, argument) {
            return {
                type: Syntax.UpdateExpression,
                operator: operator,
                argument: argument,
                prefix: false
            };
        },
        createProgram: function(body) {
            return {
                type: Syntax.Program,
                body: body
            };
        },
        createProperty: function(kind, key, value) {
            return {
                type: Syntax.Property,
                key: key,
                value: value,
                kind: kind
            };
        },
        createReturnStatement: function(argument) {
            return {
                type: Syntax.ReturnStatement,
                argument: argument
            };
        },
        createSequenceExpression: function(expressions) {
            return {
                type: Syntax.SequenceExpression,
                expressions: expressions
            };
        },
        createSwitchCase: function(test, consequent) {
            return {
                type: Syntax.SwitchCase,
                test: test,
                consequent: consequent
            };
        },
        createSwitchStatement: function(discriminant, cases) {
            return {
                type: Syntax.SwitchStatement,
                discriminant: discriminant,
                cases: cases
            };
        },
        createThisExpression: function() {
            return {
                type: Syntax.ThisExpression
            };
        },
        createThrowStatement: function(argument) {
            return {
                type: Syntax.ThrowStatement,
                argument: argument
            };
        },
        createTryStatement: function(block, guardedHandlers, handlers, finalizer) {
            return {
                type: Syntax.TryStatement,
                block: block,
                guardedHandlers: guardedHandlers,
                handlers: handlers,
                finalizer: finalizer
            };
        },
        createUnaryExpression: function(operator, argument) {
            if (operator === '++' || operator === '--') return {
                type: Syntax.UpdateExpression,
                operator: operator,
                argument: argument,
                prefix: true
            };
            return {
                type: Syntax.UnaryExpression,
                operator: operator,
                argument: argument,
                prefix: true
            };
        },
        createVariableDeclaration: function(declarations, kind) {
            return {
                type: Syntax.VariableDeclaration,
                declarations: declarations,
                kind: kind
            };
        },
        createVariableDeclarator: function(id, init) {
            return {
                type: Syntax.VariableDeclarator,
                id: id,
                init: init
            };
        },
        createWhileStatement: function(test, body) {
            return {
                type: Syntax.WhileStatement,
                test: test,
                body: body
            };
        },
        createWithStatement: function(object, body) {
            return {
                type: Syntax.WithStatement,
                object: object,
                body: body
            };
        }
    };
    // Return true if there is a line terminator before the next token.
    function peekLineTerminator() {
        var pos, line, start, found;
        pos = index1;
        line = lineNumber;
        start = lineStart;
        skipComment();
        found = lineNumber !== line;
        index1 = pos;
        lineNumber = line;
        lineStart = start;
        return found;
    }
    // Throw an exception
    function throwError(token, messageFormat) {
        var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
            assert(index < args.length, 'Message reference must be in range');
            return args[index];
        });
        if (typeof token.lineNumber === 'number') {
            error = new Error('Line ' + token.lineNumber + ': ' + msg);
            error.index = token.start;
            error.lineNumber = token.lineNumber;
            error.column = token.start - lineStart + 1;
        } else {
            error = new Error('Line ' + lineNumber + ': ' + msg);
            error.index = index1;
            error.lineNumber = lineNumber;
            error.column = index1 - lineStart + 1;
        }
        error.description = msg;
        throw error;
    }
    function throwErrorTolerant() {
        try {
            throwError.apply(null, arguments);
        } catch (e) {
            if (extra.errors) extra.errors.push(e);
            else throw e;
        }
    }
    // Throw an exception because of the token.
    function throwUnexpected(token) {
        if (token.type === Token.EOF) throwError(token, Messages.UnexpectedEOS);
        if (token.type === Token.NumericLiteral) throwError(token, Messages.UnexpectedNumber);
        if (token.type === Token.StringLiteral) throwError(token, Messages.UnexpectedString);
        if (token.type === Token.Identifier) throwError(token, Messages.UnexpectedIdentifier);
        if (token.type === Token.Keyword) {
            if (isFutureReservedWord(token.value)) throwError(token, Messages.UnexpectedReserved);
            else if (strict && isStrictModeReservedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictReservedWord);
                return;
            }
            throwError(token, Messages.UnexpectedToken, token.value);
        }
        // BooleanLiteral, NullLiteral, or Punctuator.
        throwError(token, Messages.UnexpectedToken, token.value);
    }
    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.
    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) throwUnexpected(token);
    }
    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.
    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) throwUnexpected(token);
    }
    // Return true if the next token matches the specified punctuator.
    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }
    // Return true if the next token matches the specified keyword
    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }
    // Return true if the next token is an assignment operator
    function matchAssign() {
        var op;
        if (lookahead.type !== Token.Punctuator) return false;
        op = lookahead.value;
        return op === '=' || op === '*=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';
    }
    function consumeSemicolon() {
        var line, oldIndex = index1, oldLineNumber = lineNumber, oldLineStart = lineStart, oldLookahead = lookahead;
        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(index1) === 59 || match(';')) {
            lex();
            return;
        }
        line = lineNumber;
        skipComment();
        if (lineNumber !== line) {
            index1 = oldIndex;
            lineNumber = oldLineNumber;
            lineStart = oldLineStart;
            lookahead = oldLookahead;
            return;
        }
        if (lookahead.type !== Token.EOF && !match('}')) throwUnexpected(lookahead);
    }
    // Return true if provided expression is LeftHandSideExpression
    function isLeftHandSide(expr) {
        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
    }
    // 11.1.4 Array Initialiser
    function parseArrayInitialiser() {
        var elements = [], startToken;
        startToken = lookahead;
        expect('[');
        while(!match(']'))if (match(',')) {
            lex();
            elements.push(null);
        } else {
            elements.push(parseAssignmentExpression());
            if (!match(']')) expect(',');
        }
        lex();
        return delegate.markEnd(delegate.createArrayExpression(elements), startToken);
    }
    // 11.1.5 Object Initialiser
    function parsePropertyFunction(param, first) {
        var previousStrict, body, startToken;
        previousStrict = strict;
        startToken = lookahead;
        body = parseFunctionSourceElements();
        if (first && strict && isRestrictedWord(param[0].name)) throwErrorTolerant(first, Messages.StrictParamName);
        strict = previousStrict;
        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body), startToken);
    }
    function parseObjectPropertyKey() {
        var token, startToken;
        startToken = lookahead;
        token = lex();
        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.
        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
            if (strict && token.octal) throwErrorTolerant(token, Messages.StrictOctalLiteral);
            return delegate.markEnd(delegate.createLiteral(token), startToken);
        }
        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }
    function parseObjectProperty() {
        var token, key, id, value, param, startToken;
        token = lookahead;
        startToken = lookahead;
        if (token.type === Token.Identifier) {
            id = parseObjectPropertyKey();
            // Property Assignment: Getter and Setter.
            if (token.value === 'get' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                expect(')');
                value = parsePropertyFunction([]);
                return delegate.markEnd(delegate.createProperty('get', key, value), startToken);
            }
            if (token.value === 'set' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                token = lookahead;
                if (token.type !== Token.Identifier) {
                    expect(')');
                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
                    value = parsePropertyFunction([]);
                } else {
                    param = [
                        parseVariableIdentifier()
                    ];
                    expect(')');
                    value = parsePropertyFunction(param, token);
                }
                return delegate.markEnd(delegate.createProperty('set', key, value), startToken);
            }
            expect(':');
            value = parseAssignmentExpression();
            return delegate.markEnd(delegate.createProperty('init', id, value), startToken);
        }
        if (token.type === Token.EOF || token.type === Token.Punctuator) throwUnexpected(token);
        else {
            key = parseObjectPropertyKey();
            expect(':');
            value = parseAssignmentExpression();
            return delegate.markEnd(delegate.createProperty('init', key, value), startToken);
        }
    }
    function parseObjectInitialiser() {
        var properties = [], property, name, key, kind, map = {
        }, toString = String, startToken;
        startToken = lookahead;
        expect('{');
        while(!match('}')){
            property = parseObjectProperty();
            if (property.key.type === Syntax.Identifier) name = property.key.name;
            else name = toString(property.key.value);
            kind = property.kind === 'init' ? PropertyKind.Data : property.kind === 'get' ? PropertyKind.Get : PropertyKind.Set;
            key = '$' + name;
            if (Object.prototype.hasOwnProperty.call(map, key)) {
                if (map[key] === PropertyKind.Data) {
                    if (strict && kind === PropertyKind.Data) throwErrorTolerant({
                    }, Messages.StrictDuplicateProperty);
                    else if (kind !== PropertyKind.Data) throwErrorTolerant({
                    }, Messages.AccessorDataProperty);
                } else {
                    if (kind === PropertyKind.Data) throwErrorTolerant({
                    }, Messages.AccessorDataProperty);
                    else if (map[key] & kind) throwErrorTolerant({
                    }, Messages.AccessorGetSet);
                }
                map[key] |= kind;
            } else map[key] = kind;
            properties.push(property);
            if (!match('}')) expect(',');
        }
        expect('}');
        return delegate.markEnd(delegate.createObjectExpression(properties), startToken);
    }
    // 11.1.6 The Grouping Operator
    function parseGroupExpression() {
        var expr;
        expect('(');
        expr = parseExpression();
        expect(')');
        return expr;
    }
    // 11.1 Primary Expressions
    function parsePrimaryExpression() {
        var type, token, expr, startToken;
        if (match('(')) return parseGroupExpression();
        if (match('[')) return parseArrayInitialiser();
        if (match('{')) return parseObjectInitialiser();
        type = lookahead.type;
        startToken = lookahead;
        if (type === Token.Identifier) expr = delegate.createIdentifier(lex().value);
        else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            if (strict && lookahead.octal) throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
            expr = delegate.createLiteral(lex());
        } else if (type === Token.Keyword) {
            if (matchKeyword('function')) return parseFunctionExpression();
            if (matchKeyword('this')) {
                lex();
                expr = delegate.createThisExpression();
            } else throwUnexpected(lex());
        } else if (type === Token.BooleanLiteral) {
            token = lex();
            token.value = token.value === 'true';
            expr = delegate.createLiteral(token);
        } else if (type === Token.NullLiteral) {
            token = lex();
            token.value = null;
            expr = delegate.createLiteral(token);
        } else if (match('/') || match('/=')) {
            if (typeof extra.tokens !== 'undefined') expr = delegate.createLiteral(collectRegex());
            else expr = delegate.createLiteral(scanRegExp());
            peek();
        } else throwUnexpected(lex());
        return delegate.markEnd(expr, startToken);
    }
    // 11.2 Left-Hand-Side Expressions
    function parseArguments() {
        var args = [];
        expect('(');
        if (!match(')')) while(index1 < length){
            args.push(parseAssignmentExpression());
            if (match(')')) break;
            expect(',');
        }
        expect(')');
        return args;
    }
    function parseNonComputedProperty() {
        var token, startToken;
        startToken = lookahead;
        token = lex();
        if (!isIdentifierName(token)) throwUnexpected(token);
        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }
    function parseNonComputedMember() {
        expect('.');
        return parseNonComputedProperty();
    }
    function parseComputedMember() {
        var expr;
        expect('[');
        expr = parseExpression();
        expect(']');
        return expr;
    }
    function parseNewExpression() {
        var callee, args, startToken;
        startToken = lookahead;
        expectKeyword('new');
        callee = parseLeftHandSideExpression();
        args = match('(') ? parseArguments() : [];
        return delegate.markEnd(delegate.createNewExpression(callee, args), startToken);
    }
    function parseLeftHandSideExpressionAllowCall() {
        var expr, args, property, startToken, previousAllowIn = state.allowIn;
        startToken = lookahead;
        state.allowIn = true;
        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
        for(;;){
            if (match('.')) {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            } else if (match('(')) {
                args = parseArguments();
                expr = delegate.createCallExpression(expr, args);
            } else if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else break;
            delegate.markEnd(expr, startToken);
        }
        state.allowIn = previousAllowIn;
        return expr;
    }
    function parseLeftHandSideExpression() {
        var expr, property, startToken;
        assert(state.allowIn, 'callee of new expression always allow in keyword.');
        startToken = lookahead;
        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
        while(match('.') || match('[')){
            if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            }
            delegate.markEnd(expr, startToken);
        }
        return expr;
    }
    // 11.3 Postfix Expressions
    function parsePostfixExpression() {
        var expr, token, startToken = lookahead;
        expr = parseLeftHandSideExpressionAllowCall();
        if (lookahead.type === Token.Punctuator) {
            if ((match('++') || match('--')) && !peekLineTerminator()) {
                // 11.3.1, 11.3.2
                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) throwErrorTolerant({
                }, Messages.StrictLHSPostfix);
                if (!isLeftHandSide(expr)) throwErrorTolerant({
                }, Messages.InvalidLHSInAssignment);
                token = lex();
                expr = delegate.markEnd(delegate.createPostfixExpression(token.value, expr), startToken);
            }
        }
        return expr;
    }
    // 11.4 Unary Operators
    function parseUnaryExpression() {
        var token, expr, startToken;
        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) expr = parsePostfixExpression();
        else if (match('++') || match('--')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            // 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) throwErrorTolerant({
            }, Messages.StrictLHSPrefix);
            if (!isLeftHandSide(expr)) throwErrorTolerant({
            }, Messages.InvalidLHSInAssignment);
            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
        } else if (match('+') || match('-') || match('~') || match('!')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) throwErrorTolerant({
            }, Messages.StrictDelete);
        } else expr = parsePostfixExpression();
        return expr;
    }
    function binaryPrecedence(token, allowIn) {
        var prec = 0;
        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) return 0;
        switch(token.value){
            case '||':
                prec = 1;
                break;
            case '&&':
                prec = 2;
                break;
            case '|':
                prec = 3;
                break;
            case '^':
                prec = 4;
                break;
            case '&':
                prec = 5;
                break;
            case '==':
            case '!=':
            case '===':
            case '!==':
                prec = 6;
                break;
            case '<':
            case '>':
            case '<=':
            case '>=':
            case 'instanceof':
                prec = 7;
                break;
            case 'in':
                prec = allowIn ? 7 : 0;
                break;
            case '<<':
            case '>>':
            case '>>>':
                prec = 8;
                break;
            case '+':
            case '-':
                prec = 9;
                break;
            case '*':
            case '/':
            case '%':
                prec = 11;
                break;
            default:
                break;
        }
        return prec;
    }
    // 11.5 Multiplicative Operators
    // 11.6 Additive Operators
    // 11.7 Bitwise Shift Operators
    // 11.8 Relational Operators
    // 11.9 Equality Operators
    // 11.10 Binary Bitwise Operators
    // 11.11 Binary Logical Operators
    function parseBinaryExpression() {
        var marker, markers, expr, token, prec, stack, right, operator, left, i;
        marker = lookahead;
        left = parseUnaryExpression();
        token = lookahead;
        prec = binaryPrecedence(token, state.allowIn);
        if (prec === 0) return left;
        token.prec = prec;
        lex();
        markers = [
            marker,
            lookahead
        ];
        right = parseUnaryExpression();
        stack = [
            left,
            token,
            right
        ];
        while((prec = binaryPrecedence(lookahead, state.allowIn)) > 0){
            // Reduce: make a binary expression from the three topmost entries.
            while(stack.length > 2 && prec <= stack[stack.length - 2].prec){
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                expr = delegate.createBinaryExpression(operator, left, right);
                markers.pop();
                marker = markers[markers.length - 1];
                delegate.markEnd(expr, marker);
                stack.push(expr);
            }
            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(lookahead);
            expr = parseUnaryExpression();
            stack.push(expr);
        }
        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while(i > 1){
            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
            marker = markers.pop();
            delegate.markEnd(expr, marker);
        }
        return expr;
    }
    // 11.12 Conditional Operator
    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, startToken;
        startToken = lookahead;
        expr = parseBinaryExpression();
        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = parseAssignmentExpression();
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = parseAssignmentExpression();
            expr = delegate.createConditionalExpression(expr, consequent, alternate);
            delegate.markEnd(expr, startToken);
        }
        return expr;
    }
    // 11.13 Assignment Operators
    function parseAssignmentExpression() {
        var token, left, right, node, startToken;
        token = lookahead;
        startToken = lookahead;
        node = left = parseConditionalExpression();
        if (matchAssign()) {
            // LeftHandSideExpression
            if (!isLeftHandSide(left)) throwErrorTolerant({
            }, Messages.InvalidLHSInAssignment);
            // 11.13.1
            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) throwErrorTolerant(token, Messages.StrictLHSAssignment);
            token = lex();
            right = parseAssignmentExpression();
            node = delegate.markEnd(delegate.createAssignmentExpression(token.value, left, right), startToken);
        }
        return node;
    }
    // 11.14 Comma Operator
    function parseExpression() {
        var expr, startToken = lookahead;
        expr = parseAssignmentExpression();
        if (match(',')) {
            expr = delegate.createSequenceExpression([
                expr
            ]);
            while(index1 < length){
                if (!match(',')) break;
                lex();
                expr.expressions.push(parseAssignmentExpression());
            }
            delegate.markEnd(expr, startToken);
        }
        return expr;
    }
    // 12.1 Block
    function parseStatementList() {
        var list = [], statement;
        while(index1 < length){
            if (match('}')) break;
            statement = parseSourceElement();
            if (typeof statement === 'undefined') break;
            list.push(statement);
        }
        return list;
    }
    function parseBlock() {
        var block, startToken;
        startToken = lookahead;
        expect('{');
        block = parseStatementList();
        expect('}');
        return delegate.markEnd(delegate.createBlockStatement(block), startToken);
    }
    // 12.2 Variable Statement
    function parseVariableIdentifier() {
        var token, startToken;
        startToken = lookahead;
        token = lex();
        if (token.type !== Token.Identifier) throwUnexpected(token);
        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }
    function parseVariableDeclaration(kind) {
        var init = null, id, startToken;
        startToken = lookahead;
        id = parseVariableIdentifier();
        // 12.2.1
        if (strict && isRestrictedWord(id.name)) throwErrorTolerant({
        }, Messages.StrictVarName);
        if (kind === 'const') {
            expect('=');
            init = parseAssignmentExpression();
        } else if (match('=')) {
            lex();
            init = parseAssignmentExpression();
        }
        return delegate.markEnd(delegate.createVariableDeclarator(id, init), startToken);
    }
    function parseVariableDeclarationList(kind) {
        var list = [];
        do {
            list.push(parseVariableDeclaration(kind));
            if (!match(',')) break;
            lex();
        }while (index1 < length)
        return list;
    }
    function parseVariableStatement() {
        var declarations;
        expectKeyword('var');
        declarations = parseVariableDeclarationList();
        consumeSemicolon();
        return delegate.createVariableDeclaration(declarations, 'var');
    }
    // kind may be `const` or `let`
    // Both are experimental and not in the specification yet.
    // see http://wiki.ecmascript.org/doku.php?id=harmony:const
    // and http://wiki.ecmascript.org/doku.php?id=harmony:let
    function parseConstLetDeclaration(kind) {
        var declarations, startToken;
        startToken = lookahead;
        expectKeyword(kind);
        declarations = parseVariableDeclarationList(kind);
        consumeSemicolon();
        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind), startToken);
    }
    // 12.3 Empty Statement
    function parseEmptyStatement() {
        expect(';');
        return delegate.createEmptyStatement();
    }
    // 12.4 Expression Statement
    function parseExpressionStatement() {
        var expr = parseExpression();
        consumeSemicolon();
        return delegate.createExpressionStatement(expr);
    }
    // 12.5 If statement
    function parseIfStatement() {
        var test, consequent, alternate;
        expectKeyword('if');
        expect('(');
        test = parseExpression();
        expect(')');
        consequent = parseStatement();
        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else alternate = null;
        return delegate.createIfStatement(test, consequent, alternate);
    }
    // 12.6 Iteration Statements
    function parseDoWhileStatement() {
        var body, test, oldInIteration;
        expectKeyword('do');
        oldInIteration = state.inIteration;
        state.inIteration = true;
        body = parseStatement();
        state.inIteration = oldInIteration;
        expectKeyword('while');
        expect('(');
        test = parseExpression();
        expect(')');
        if (match(';')) lex();
        return delegate.createDoWhileStatement(body, test);
    }
    function parseWhileStatement() {
        var test, body, oldInIteration;
        expectKeyword('while');
        expect('(');
        test = parseExpression();
        expect(')');
        oldInIteration = state.inIteration;
        state.inIteration = true;
        body = parseStatement();
        state.inIteration = oldInIteration;
        return delegate.createWhileStatement(test, body);
    }
    function parseForVariableDeclaration() {
        var token, declarations, startToken;
        startToken = lookahead;
        token = lex();
        declarations = parseVariableDeclarationList();
        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value), startToken);
    }
    function parseForStatement() {
        var init, test, update, left, right, body, oldInIteration, previousAllowIn = state.allowIn;
        init = test = update = null;
        expectKeyword('for');
        expect('(');
        if (match(';')) lex();
        else {
            if (matchKeyword('var') || matchKeyword('let')) {
                state.allowIn = false;
                init = parseForVariableDeclaration();
                state.allowIn = previousAllowIn;
                if (init.declarations.length === 1 && matchKeyword('in')) {
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            } else {
                state.allowIn = false;
                init = parseExpression();
                state.allowIn = previousAllowIn;
                if (matchKeyword('in')) {
                    // LeftHandSideExpression
                    if (!isLeftHandSide(init)) throwErrorTolerant({
                    }, Messages.InvalidLHSInForIn);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            }
            if (typeof left === 'undefined') expect(';');
        }
        if (typeof left === 'undefined') {
            if (!match(';')) test = parseExpression();
            expect(';');
            if (!match(')')) update = parseExpression();
        }
        expect(')');
        oldInIteration = state.inIteration;
        state.inIteration = true;
        body = parseStatement();
        state.inIteration = oldInIteration;
        return typeof left === 'undefined' ? delegate.createForStatement(init, test, update, body) : delegate.createForInStatement(left, right, body);
    }
    // 12.7 The continue statement
    function parseContinueStatement() {
        var label = null, key;
        expectKeyword('continue');
        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(index1) === 59) {
            lex();
            if (!state.inIteration) throwError({
            }, Messages.IllegalContinue);
            return delegate.createContinueStatement(null);
        }
        if (peekLineTerminator()) {
            if (!state.inIteration) throwError({
            }, Messages.IllegalContinue);
            return delegate.createContinueStatement(null);
        }
        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();
            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) throwError({
            }, Messages.UnknownLabel, label.name);
        }
        consumeSemicolon();
        if (label === null && !state.inIteration) throwError({
        }, Messages.IllegalContinue);
        return delegate.createContinueStatement(label);
    }
    // 12.8 The break statement
    function parseBreakStatement() {
        var label = null, key;
        expectKeyword('break');
        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(index1) === 59) {
            lex();
            if (!(state.inIteration || state.inSwitch)) throwError({
            }, Messages.IllegalBreak);
            return delegate.createBreakStatement(null);
        }
        if (peekLineTerminator()) {
            if (!(state.inIteration || state.inSwitch)) throwError({
            }, Messages.IllegalBreak);
            return delegate.createBreakStatement(null);
        }
        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();
            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) throwError({
            }, Messages.UnknownLabel, label.name);
        }
        consumeSemicolon();
        if (label === null && !(state.inIteration || state.inSwitch)) throwError({
        }, Messages.IllegalBreak);
        return delegate.createBreakStatement(label);
    }
    // 12.9 The return statement
    function parseReturnStatement() {
        var argument = null;
        expectKeyword('return');
        if (!state.inFunctionBody) throwErrorTolerant({
        }, Messages.IllegalReturn);
        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(index1) === 32) {
            if (isIdentifierStart(source.charCodeAt(index1 + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return delegate.createReturnStatement(argument);
            }
        }
        if (peekLineTerminator()) return delegate.createReturnStatement(null);
        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) argument = parseExpression();
        }
        consumeSemicolon();
        return delegate.createReturnStatement(argument);
    }
    // 12.10 The with statement
    function parseWithStatement() {
        var object, body;
        if (strict) {
            // TODO(ikarienator): Should we update the test cases instead?
            skipComment();
            throwErrorTolerant({
            }, Messages.StrictModeWith);
        }
        expectKeyword('with');
        expect('(');
        object = parseExpression();
        expect(')');
        body = parseStatement();
        return delegate.createWithStatement(object, body);
    }
    // 12.10 The swith statement
    function parseSwitchCase() {
        var test, consequent = [], statement, startToken;
        startToken = lookahead;
        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');
        while(index1 < length){
            if (match('}') || matchKeyword('default') || matchKeyword('case')) break;
            statement = parseStatement();
            consequent.push(statement);
        }
        return delegate.markEnd(delegate.createSwitchCase(test, consequent), startToken);
    }
    function parseSwitchStatement() {
        var discriminant, cases, clause, oldInSwitch, defaultFound;
        expectKeyword('switch');
        expect('(');
        discriminant = parseExpression();
        expect(')');
        expect('{');
        cases = [];
        if (match('}')) {
            lex();
            return delegate.createSwitchStatement(discriminant, cases);
        }
        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;
        while(index1 < length){
            if (match('}')) break;
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) throwError({
                }, Messages.MultipleDefaultsInSwitch);
                defaultFound = true;
            }
            cases.push(clause);
        }
        state.inSwitch = oldInSwitch;
        expect('}');
        return delegate.createSwitchStatement(discriminant, cases);
    }
    // 12.13 The throw statement
    function parseThrowStatement() {
        var argument;
        expectKeyword('throw');
        if (peekLineTerminator()) throwError({
        }, Messages.NewlineAfterThrow);
        argument = parseExpression();
        consumeSemicolon();
        return delegate.createThrowStatement(argument);
    }
    // 12.14 The try statement
    function parseCatchClause() {
        var param, body, startToken;
        startToken = lookahead;
        expectKeyword('catch');
        expect('(');
        if (match(')')) throwUnexpected(lookahead);
        param = parseVariableIdentifier();
        // 12.14.1
        if (strict && isRestrictedWord(param.name)) throwErrorTolerant({
        }, Messages.StrictCatchVariable);
        expect(')');
        body = parseBlock();
        return delegate.markEnd(delegate.createCatchClause(param, body), startToken);
    }
    function parseTryStatement() {
        var block, handlers = [], finalizer = null;
        expectKeyword('try');
        block = parseBlock();
        if (matchKeyword('catch')) handlers.push(parseCatchClause());
        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }
        if (handlers.length === 0 && !finalizer) throwError({
        }, Messages.NoCatchOrFinally);
        return delegate.createTryStatement(block, [], handlers, finalizer);
    }
    // 12.15 The debugger statement
    function parseDebuggerStatement() {
        expectKeyword('debugger');
        consumeSemicolon();
        return delegate.createDebuggerStatement();
    }
    // 12 Statements
    function parseStatement() {
        var type = lookahead.type, expr, labeledBody, key, startToken;
        if (type === Token.EOF) throwUnexpected(lookahead);
        if (type === Token.Punctuator && lookahead.value === '{') return parseBlock();
        startToken = lookahead;
        if (type === Token.Punctuator) switch(lookahead.value){
            case ';':
                return delegate.markEnd(parseEmptyStatement(), startToken);
            case '(':
                return delegate.markEnd(parseExpressionStatement(), startToken);
            default:
                break;
        }
        if (type === Token.Keyword) switch(lookahead.value){
            case 'break':
                return delegate.markEnd(parseBreakStatement(), startToken);
            case 'continue':
                return delegate.markEnd(parseContinueStatement(), startToken);
            case 'debugger':
                return delegate.markEnd(parseDebuggerStatement(), startToken);
            case 'do':
                return delegate.markEnd(parseDoWhileStatement(), startToken);
            case 'for':
                return delegate.markEnd(parseForStatement(), startToken);
            case 'function':
                return delegate.markEnd(parseFunctionDeclaration(), startToken);
            case 'if':
                return delegate.markEnd(parseIfStatement(), startToken);
            case 'return':
                return delegate.markEnd(parseReturnStatement(), startToken);
            case 'switch':
                return delegate.markEnd(parseSwitchStatement(), startToken);
            case 'throw':
                return delegate.markEnd(parseThrowStatement(), startToken);
            case 'try':
                return delegate.markEnd(parseTryStatement(), startToken);
            case 'var':
                return delegate.markEnd(parseVariableStatement(), startToken);
            case 'while':
                return delegate.markEnd(parseWhileStatement(), startToken);
            case 'with':
                return delegate.markEnd(parseWithStatement(), startToken);
            default:
                break;
        }
        expr = parseExpression();
        // 12.12 Labelled Statements
        if (expr.type === Syntax.Identifier && match(':')) {
            lex();
            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) throwError({
            }, Messages.Redeclaration, 'Label', expr.name);
            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody), startToken);
        }
        consumeSemicolon();
        return delegate.markEnd(delegate.createExpressionStatement(expr), startToken);
    }
    // 13 Function Definition
    function parseFunctionSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted, oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, startToken;
        startToken = lookahead;
        expect('{');
        while(index1 < length){
            if (lookahead.type !== Token.StringLiteral) break;
            token = lookahead;
            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) break;
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
            } else if (!firstRestricted && token.octal) firstRestricted = token;
        }
        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;
        state.labelSet = {
        };
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;
        while(index1 < length){
            if (match('}')) break;
            sourceElement = parseSourceElement();
            if (typeof sourceElement === 'undefined') break;
            sourceElements.push(sourceElement);
        }
        expect('}');
        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;
        return delegate.markEnd(delegate.createBlockStatement(sourceElements), startToken);
    }
    function parseParams(firstRestricted) {
        var param, params = [], token, stricted, paramSet, key, message;
        expect('(');
        if (!match(')')) {
            paramSet = {
            };
            while(index1 < length){
                token = lookahead;
                param = parseVariableIdentifier();
                key = '$' + token.value;
                if (strict) {
                    if (isRestrictedWord(token.value)) {
                        stricted = token;
                        message = Messages.StrictParamName;
                    }
                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        stricted = token;
                        message = Messages.StrictParamDupe;
                    }
                } else if (!firstRestricted) {
                    if (isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictParamName;
                    } else if (isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictReservedWord;
                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        firstRestricted = token;
                        message = Messages.StrictParamDupe;
                    }
                }
                params.push(param);
                paramSet[key] = true;
                if (match(')')) break;
                expect(',');
            }
        }
        expect(')');
        return {
            params: params,
            stricted: stricted,
            firstRestricted: firstRestricted,
            message: message
        };
    }
    function parseFunctionDeclaration() {
        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, startToken;
        startToken = lookahead;
        expectKeyword('function');
        token = lookahead;
        id = parseVariableIdentifier();
        if (strict) {
            if (isRestrictedWord(token.value)) throwErrorTolerant(token, Messages.StrictFunctionName);
        } else {
            if (isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictFunctionName;
            } else if (isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictReservedWord;
            }
        }
        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) message = tmp.message;
        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) throwError(firstRestricted, message);
        if (strict && stricted) throwErrorTolerant(stricted, message);
        strict = previousStrict;
        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body), startToken);
    }
    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict, startToken;
        startToken = lookahead;
        expectKeyword('function');
        if (!match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) throwErrorTolerant(token, Messages.StrictFunctionName);
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }
        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) message = tmp.message;
        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) throwError(firstRestricted, message);
        if (strict && stricted) throwErrorTolerant(stricted, message);
        strict = previousStrict;
        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body), startToken);
    }
    // 14 Program
    function parseSourceElement() {
        if (lookahead.type === Token.Keyword) switch(lookahead.value){
            case 'const':
            case 'let':
                return parseConstLetDeclaration(lookahead.value);
            case 'function':
                return parseFunctionDeclaration();
            default:
                return parseStatement();
        }
        if (lookahead.type !== Token.EOF) return parseStatement();
    }
    function parseSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted;
        while(index1 < length){
            token = lookahead;
            if (token.type !== Token.StringLiteral) break;
            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) break;
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
            } else if (!firstRestricted && token.octal) firstRestricted = token;
        }
        while(index1 < length){
            sourceElement = parseSourceElement();
            /* istanbul ignore if */ if (typeof sourceElement === 'undefined') break;
            sourceElements.push(sourceElement);
        }
        return sourceElements;
    }
    function parseProgram() {
        var body, startToken;
        skipComment();
        peek();
        startToken = lookahead;
        strict = false;
        body = parseSourceElements();
        return delegate.markEnd(delegate.createProgram(body), startToken);
    }
    function filterTokenLocation() {
        var i, entry, token, tokens = [];
        for(i = 0; i < extra.tokens.length; ++i){
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (extra.range) token.range = entry.range;
            if (extra.loc) token.loc = entry.loc;
            tokens.push(token);
        }
        extra.tokens = tokens;
    }
    function tokenize(code, options) {
        var toString, token, tokens;
        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) code = toString(code);
        delegate = SyntaxTreeDelegate;
        source = code;
        index1 = 0;
        lineNumber = source.length > 0 ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {
            },
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1
        };
        extra = {
        };
        // Options matching.
        options = options || {
        };
        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenize = true;
        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;
        extra.range = typeof options.range === 'boolean' && options.range;
        extra.loc = typeof options.loc === 'boolean' && options.loc;
        if (typeof options.comment === 'boolean' && options.comment) extra.comments = [];
        if (typeof options.tolerant === 'boolean' && options.tolerant) extra.errors = [];
        try {
            peek();
            if (lookahead.type === Token.EOF) return extra.tokens;
            token = lex();
            while(lookahead.type !== Token.EOF)try {
                token = lex();
            } catch (lexError) {
                token = lookahead;
                if (extra.errors) {
                    extra.errors.push(lexError);
                    break;
                } else throw lexError;
            }
            filterTokenLocation();
            tokens = extra.tokens;
            if (typeof extra.comments !== 'undefined') tokens.comments = extra.comments;
            if (typeof extra.errors !== 'undefined') tokens.errors = extra.errors;
        } catch (e) {
            throw e;
        } finally{
            extra = {
            };
        }
        return tokens;
    }
    function parse(code, options) {
        var program, toString;
        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) code = toString(code);
        delegate = SyntaxTreeDelegate;
        source = code;
        index1 = 0;
        lineNumber = source.length > 0 ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {
            },
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1
        };
        extra = {
        };
        if (typeof options !== 'undefined') {
            extra.range = typeof options.range === 'boolean' && options.range;
            extra.loc = typeof options.loc === 'boolean' && options.loc;
            extra.attachComment = typeof options.attachComment === 'boolean' && options.attachComment;
            if (extra.loc && options.source !== null && options.source !== undefined) extra.source = toString(options.source);
            if (typeof options.tokens === 'boolean' && options.tokens) extra.tokens = [];
            if (typeof options.comment === 'boolean' && options.comment) extra.comments = [];
            if (typeof options.tolerant === 'boolean' && options.tolerant) extra.errors = [];
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
        }
        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') program.comments = extra.comments;
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') program.errors = extra.errors;
        } catch (e) {
            throw e;
        } finally{
            extra = {
            };
        }
        return program;
    }
    // Sync with *.json manifests.
    exports.version = '1.2.5';
    exports.tokenize = tokenize;
    exports.parse = parse;
    // Deep copy.
    /* istanbul ignore next */ exports.Syntax = (function() {
        var name, types = {
        };
        if (typeof Object.create === 'function') types = Object.create(null);
        for(name in Syntax)if (Syntax.hasOwnProperty(name)) types[name] = Syntax[name];
        if (typeof Object.freeze === 'function') Object.freeze(types);
        return types;
    })();
}); /* vim: set sw=4 ts=4 et tw=80 : */


var $da4e7f819177b26e$exports = {};
"use strict";
function $da4e7f819177b26e$var$unique_pred(list, compare) {
    var ptr = 1, len = list.length, a = list[0], b = list[0];
    for(var i = 1; i < len; ++i){
        b = a;
        a = list[i];
        if (compare(a, b)) {
            if (i === ptr) {
                ptr++;
                continue;
            }
            list[ptr++] = a;
        }
    }
    list.length = ptr;
    return list;
}
function $da4e7f819177b26e$var$unique_eq(list) {
    var ptr = 1, len = list.length, a = list[0], b = list[0];
    for(var i = 1; i < len; ++i, b = a){
        b = a;
        a = list[i];
        if (a !== b) {
            if (i === ptr) {
                ptr++;
                continue;
            }
            list[ptr++] = a;
        }
    }
    list.length = ptr;
    return list;
}
function $da4e7f819177b26e$var$unique(list, compare, sorted) {
    if (list.length === 0) return list;
    if (compare) {
        if (!sorted) list.sort(compare);
        return $da4e7f819177b26e$var$unique_pred(list, compare);
    }
    if (!sorted) list.sort();
    return $da4e7f819177b26e$var$unique_eq(list);
}
$da4e7f819177b26e$exports = $da4e7f819177b26e$var$unique;


var $66348460240f6b71$var$PREFIX_COUNTER = 0;
function $66348460240f6b71$var$CompiledArgument(name, lvalue, rvalue) {
    this.name = name;
    this.lvalue = lvalue;
    this.rvalue = rvalue;
    this.count = 0;
}
function $66348460240f6b71$var$CompiledRoutine(body, args, thisVars, localVars) {
    this.body = body;
    this.args = args;
    this.thisVars = thisVars;
    this.localVars = localVars;
}
function $66348460240f6b71$var$isGlobal(identifier) {
    if (identifier === "eval") throw new Error("cwise-parser: eval() not allowed");
    if (typeof window !== "undefined") return identifier in window;
    else if (typeof $parcel$global !== "undefined") return identifier in $parcel$global;
    else if (typeof self !== "undefined") return identifier in self;
    else return false;
}
function $66348460240f6b71$var$getArgNames(ast) {
    var params = ast.body[0].expression.callee.params;
    var names = new Array(params.length);
    for(var i = 0; i < params.length; ++i)names[i] = params[i].name;
    return names;
}
function $66348460240f6b71$var$preprocess(func) {
    var src = [
        "(",
        func,
        ")()"
    ].join("");
    var ast = $189fa71fecbaf821$exports.parse(src, {
        range: true
    });
    //Compute new prefix
    var prefix = "_inline_" + $66348460240f6b71$var$PREFIX_COUNTER++ + "_";
    //Parse out arguments
    var argNames = $66348460240f6b71$var$getArgNames(ast);
    var compiledArgs = new Array(argNames.length);
    for(var i1 = 0; i1 < argNames.length; ++i1)compiledArgs[i1] = new $66348460240f6b71$var$CompiledArgument([
        prefix,
        "arg",
        i1,
        "_"
    ].join(""), false, false);
    //Create temporary data structure for source rewriting
    var exploded = new Array(src.length);
    for(var i1 = 0, n1 = src.length; i1 < n1; ++i1)exploded[i1] = src.charAt(i1);
    //Local variables
    var localVars = [];
    var thisVars = [];
    var computedThis = false;
    //Retrieves a local variable
    function createLocal(id) {
        var nstr = prefix + id.replace(/\_/g, "__");
        localVars.push(nstr);
        return nstr;
    }
    //Creates a this variable
    function createThisVar(id) {
        var nstr = "this_" + id.replace(/\_/g, "__");
        thisVars.push(nstr);
        return nstr;
    }
    //Rewrites an ast node
    function rewrite(node, nstr) {
        var lo = node.range[0], hi = node.range[1];
        for(var i = lo + 1; i < hi; ++i)exploded[i] = "";
        exploded[lo] = nstr;
    }
    //Remove any underscores
    function escapeString(str) {
        return "'" + str.replace(/\_/g, "\\_").replace(/\'/g, "\'") + "'";
    }
    //Returns the source of an identifier
    function source(node) {
        return exploded.slice(node.range[0], node.range[1]).join("");
    }
    //Computes the usage of a node
    var LVALUE = 1;
    var RVALUE = 2;
    function getUsage(node) {
        if (node.parent.type === "AssignmentExpression") {
            if (node.parent.left === node) {
                if (node.parent.operator === "=") return LVALUE;
                return LVALUE | RVALUE;
            }
        }
        if (node.parent.type === "UpdateExpression") return LVALUE | RVALUE;
        return RVALUE;
    }
    //Handle visiting a node
    (function visit(node, parent) {
        node.parent = parent;
        if (node.type === "MemberExpression") {
            //Handle member expression
            if (node.computed) {
                visit(node.object, node);
                visit(node.property, node);
            } else if (node.object.type === "ThisExpression") rewrite(node, createThisVar(node.property.name));
            else visit(node.object, node);
        } else if (node.type === "ThisExpression") throw new Error("cwise-parser: Computed this is not allowed");
        else if (node.type === "Identifier") {
            //Handle identifier
            var name = node.name;
            var argNo = argNames.indexOf(name);
            if (argNo >= 0) {
                var carg = compiledArgs[argNo];
                var usage = getUsage(node);
                if (usage & LVALUE) carg.lvalue = true;
                if (usage & RVALUE) carg.rvalue = true;
                ++carg.count;
                rewrite(node, carg.name);
            } else if ($66348460240f6b71$var$isGlobal(name)) ;
            else rewrite(node, createLocal(name));
        } else if (node.type === "Literal") {
            if (typeof node.value === "string") rewrite(node, escapeString(node.value));
        } else if (node.type === "WithStatement") throw new Error("cwise-parser: with() statements not allowed");
        else {
            //Visit all children
            var keys = Object.keys(node);
            for(var i = 0, n = keys.length; i < n; ++i){
                if (keys[i] === "parent") continue;
                var value = node[keys[i]];
                if (value) {
                    if (value instanceof Array) {
                        for(var j = 0; j < value.length; ++j)if (value[j] && typeof value[j].type === "string") visit(value[j], node);
                    } else if (typeof value.type === "string") visit(value, node);
                }
            }
        }
    })(ast.body[0].expression.callee.body, undefined);
    //Remove duplicate variables
    $da4e7f819177b26e$exports(localVars);
    $da4e7f819177b26e$exports(thisVars);
    //Return body
    var routine = new $66348460240f6b71$var$CompiledRoutine(source(ast.body[0].expression.callee.body), compiledArgs, thisVars, localVars);
    return routine;
}
$66348460240f6b71$exports = $66348460240f6b71$var$preprocess;


var $86c9da943d12a21c$exports = {};
"use strict";
var $974a5f05e14b5eaa$exports = {};
"use strict";
var $192a8e2c043b91f1$exports = {};
"use strict";

// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)
// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of "pointers" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.
function $192a8e2c043b91f1$var$innerFill(order, proc, body) {
    var dimension = order.length, nargs = proc.arrayArgs.length, has_index = proc.indexArgs.length > 0, code = [], vars = [], idx = 0, pidx = 0, i, j;
    for(i = 0; i < dimension; ++i)vars.push([
        "i",
        i,
        "=0"
    ].join(""));
    //Compute scan deltas
    for(j = 0; j < nargs; ++j)for(i = 0; i < dimension; ++i){
        pidx = idx;
        idx = order[i];
        if (i === 0) vars.push([
            "d",
            j,
            "s",
            i,
            "=t",
            j,
            "p",
            idx
        ].join(""));
        else vars.push([
            "d",
            j,
            "s",
            i,
            "=(t",
            j,
            "p",
            idx,
            "-s",
            pidx,
            "*t",
            j,
            "p",
            pidx,
            ")"
        ].join(""));
    }
    if (vars.length > 0) code.push("var " + vars.join(","));
    //Scan loop
    for(i = dimension - 1; i >= 0; --i){
        idx = order[i];
        code.push([
            "for(i",
            i,
            "=0;i",
            i,
            "<s",
            idx,
            ";++i",
            i,
            "){"
        ].join(""));
    }
    //Push body of inner loop
    code.push(body);
    //Advance scan pointers
    for(i = 0; i < dimension; ++i){
        pidx = idx;
        idx = order[i];
        for(j = 0; j < nargs; ++j)code.push([
            "p",
            j,
            "+=d",
            j,
            "s",
            i
        ].join(""));
        if (has_index) {
            if (i > 0) code.push([
                "index[",
                pidx,
                "]-=s",
                pidx
            ].join(""));
            code.push([
                "++index[",
                idx,
                "]"
            ].join(""));
        }
        code.push("}");
    }
    return code.join("\n");
}
// Generate "outer" loops that loop over blocks of data, applying "inner" loops to the blocks by manipulating the local variables in such a way that the inner loop only "sees" the current block.
// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.
//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and "shape" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.
function $192a8e2c043b91f1$var$outerFill(matched, order, proc, body) {
    var dimension = order.length, nargs = proc.arrayArgs.length, blockSize = proc.blockSize, has_index = proc.indexArgs.length > 0, code = [];
    for(var i = 0; i < nargs; ++i)code.push([
        "var offset",
        i,
        "=p",
        i
    ].join(""));
    //Generate loops for unmatched dimensions
    // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)
    // TODO: It would be nice if the order in which these loops are placed would also be somehow "optimal" (at the very least we should check that it really doesn't hurt us if they're not).
    for(var i = matched; i < dimension; ++i){
        code.push([
            "for(var j" + i + "=SS[",
            order[i],
            "]|0;j",
            i,
            ">0;){"
        ].join("")) // Iterate back to front
        ;
        code.push([
            "if(j",
            i,
            "<",
            blockSize,
            "){"
        ].join("")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).
        ;
        code.push([
            "s",
            order[i],
            "=j",
            i
        ].join(""));
        code.push([
            "j",
            i,
            "=0"
        ].join(""));
        code.push([
            "}else{s",
            order[i],
            "=",
            blockSize
        ].join(""));
        code.push([
            "j",
            i,
            "-=",
            blockSize,
            "}"
        ].join(""));
        if (has_index) code.push([
            "index[",
            order[i],
            "]=j",
            i
        ].join(""));
    }
    for(var i = 0; i < nargs; ++i){
        var indexStr = [
            "offset" + i
        ];
        for(var j = matched; j < dimension; ++j)indexStr.push([
            "j",
            j,
            "*t",
            i,
            "p",
            order[j]
        ].join(""));
        code.push([
            "p",
            i,
            "=(",
            indexStr.join("+"),
            ")"
        ].join(""));
    }
    code.push($192a8e2c043b91f1$var$innerFill(order, proc, body));
    for(var i = matched; i < dimension; ++i)code.push("}");
    return code.join("\n");
}
//Count the number of compatible inner orders
// This is the length of the longest common prefix of the arrays in orders.
// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.
// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.
function $192a8e2c043b91f1$var$countMatches(orders) {
    var matched = 0, dimension = orders[0].length;
    while(matched < dimension){
        for(var j = 1; j < orders.length; ++j){
            if (orders[j][matched] !== orders[0][matched]) return matched;
        }
        ++matched;
    }
    return matched;
}
//Processes a block according to the given data types
// Replaces variable names by different ones, either "local" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.
function $192a8e2c043b91f1$var$processBlock(block, proc, dtypes) {
    var code = block.body;
    var pre = [];
    var post = [];
    for(var i = 0; i < block.args.length; ++i){
        var carg = block.args[i];
        if (carg.count <= 0) continue;
        var re = new RegExp(carg.name, "g");
        var ptrStr = "";
        var arrNum = proc.arrayArgs.indexOf(i);
        switch(proc.argTypes[i]){
            case "offset":
                var offArgIndex = proc.offsetArgIndex.indexOf(i);
                var offArg = proc.offsetArgs[offArgIndex];
                arrNum = offArg.array;
                ptrStr = "+q" + offArgIndex // Adds offset to the "pointer" in the array
                ;
            case "array":
                ptrStr = "p" + arrNum + ptrStr;
                var localStr = "l" + i;
                var arrStr = "a" + arrNum;
                if (proc.arrayBlockIndices[arrNum] === 0) {
                    if (carg.count === 1) {
                        if (dtypes[arrNum] === "generic") {
                            if (carg.lvalue) {
                                pre.push([
                                    "var ",
                                    localStr,
                                    "=",
                                    arrStr,
                                    ".get(",
                                    ptrStr,
                                    ")"
                                ].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
                                ;
                                code = code.replace(re, localStr);
                                post.push([
                                    arrStr,
                                    ".set(",
                                    ptrStr,
                                    ",",
                                    localStr,
                                    ")"
                                ].join(""));
                            } else code = code.replace(re, [
                                arrStr,
                                ".get(",
                                ptrStr,
                                ")"
                            ].join(""));
                        } else code = code.replace(re, [
                            arrStr,
                            "[",
                            ptrStr,
                            "]"
                        ].join(""));
                    } else if (dtypes[arrNum] === "generic") {
                        pre.push([
                            "var ",
                            localStr,
                            "=",
                            arrStr,
                            ".get(",
                            ptrStr,
                            ")"
                        ].join("")) // TODO: Could we optimize by checking for carg.rvalue?
                        ;
                        code = code.replace(re, localStr);
                        if (carg.lvalue) post.push([
                            arrStr,
                            ".set(",
                            ptrStr,
                            ",",
                            localStr,
                            ")"
                        ].join(""));
                    } else {
                        pre.push([
                            "var ",
                            localStr,
                            "=",
                            arrStr,
                            "[",
                            ptrStr,
                            "]"
                        ].join("")) // TODO: Could we optimize by checking for carg.rvalue?
                        ;
                        code = code.replace(re, localStr);
                        if (carg.lvalue) post.push([
                            arrStr,
                            "[",
                            ptrStr,
                            "]=",
                            localStr
                        ].join(""));
                    }
                } else {
                    var reStrArr = [
                        carg.name
                    ], ptrStrArr = [
                        ptrStr
                    ];
                    for(var j = 0; j < Math.abs(proc.arrayBlockIndices[arrNum]); j++){
                        reStrArr.push("\\s*\\[([^\\]]+)\\]");
                        ptrStrArr.push("$" + (j + 1) + "*t" + arrNum + "b" + j) // Matched index times stride
                        ;
                    }
                    re = new RegExp(reStrArr.join(""), "g");
                    ptrStr = ptrStrArr.join("+");
                    if (dtypes[arrNum] === "generic") /*if(carg.lvalue) {
              pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
              code = code.replace(re, localStr)
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            } else {
              code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
            }*/ throw new Error("cwise: Generic arrays not supported in combination with blocks!");
                    else // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.
                    code = code.replace(re, [
                        arrStr,
                        "[",
                        ptrStr,
                        "]"
                    ].join(""));
                }
                break;
            case "scalar":
                code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i));
                break;
            case "index":
                code = code.replace(re, "index");
                break;
            case "shape":
                code = code.replace(re, "shape");
                break;
        }
    }
    return [
        pre.join("\n"),
        code,
        post.join("\n")
    ].join("\n").trim();
}
function $192a8e2c043b91f1$var$typeSummary(dtypes) {
    var summary = new Array(dtypes.length);
    var allEqual = true;
    for(var i = 0; i < dtypes.length; ++i){
        var t = dtypes[i];
        var digits = t.match(/\d+/);
        if (!digits) digits = "";
        else digits = digits[0];
        if (t.charAt(0) === 0) summary[i] = "u" + t.charAt(1) + digits;
        else summary[i] = t.charAt(0) + digits;
        if (i > 0) allEqual = allEqual && summary[i] === summary[i - 1];
    }
    if (allEqual) return summary[0];
    return summary.join("");
}
//Generates a cwise operator
function $192a8e2c043b91f1$var$generateCWiseOp(proc, typesig) {
    //Compute dimension
    // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.
    var dimension = typesig[1].length - Math.abs(proc.arrayBlockIndices[0]) | 0;
    var orders = new Array(proc.arrayArgs.length);
    var dtypes = new Array(proc.arrayArgs.length);
    for(var i = 0; i < proc.arrayArgs.length; ++i){
        dtypes[i] = typesig[2 * i];
        orders[i] = typesig[2 * i + 1];
    }
    //Determine where block and loop indices start and end
    var blockBegin = [], blockEnd = [] // These indices are exposed as blocks
    ;
    var loopBegin = [], loopEnd = [] // These indices are iterated over
    ;
    var loopOrders = [] // orders restricted to the loop indices
    ;
    for(var i = 0; i < proc.arrayArgs.length; ++i){
        if (proc.arrayBlockIndices[i] < 0) {
            loopBegin.push(0);
            loopEnd.push(dimension);
            blockBegin.push(dimension);
            blockEnd.push(dimension + proc.arrayBlockIndices[i]);
        } else {
            loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative
            ;
            loopEnd.push(proc.arrayBlockIndices[i] + dimension);
            blockBegin.push(0);
            blockEnd.push(proc.arrayBlockIndices[i]);
        }
        var newOrder = [];
        for(var j = 0; j < orders[i].length; j++)if (loopBegin[i] <= orders[i][j] && orders[i][j] < loopEnd[i]) newOrder.push(orders[i][j] - loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.
        ;
        loopOrders.push(newOrder);
    }
    //First create arguments for procedure
    var arglist = [
        "SS"
    ] // SS is the overall shape over which we iterate
    ;
    var code = [
        "'use strict'"
    ];
    var vars = [];
    for(var j = 0; j < dimension; ++j)vars.push([
        "s",
        j,
        "=SS[",
        j,
        "]"
    ].join("")) // The limits for each dimension.
    ;
    for(var i = 0; i < proc.arrayArgs.length; ++i){
        arglist.push("a" + i) // Actual data array
        ;
        arglist.push("t" + i) // Strides
        ;
        arglist.push("p" + i) // Offset in the array at which the data starts (also used for iterating over the data)
        ;
        for(var j = 0; j < dimension; ++j)vars.push([
            "t",
            i,
            "p",
            j,
            "=t",
            i,
            "[",
            loopBegin[i] + j,
            "]"
        ].join(""));
        for(var j = 0; j < Math.abs(proc.arrayBlockIndices[i]); ++j)vars.push([
            "t",
            i,
            "b",
            j,
            "=t",
            i,
            "[",
            blockBegin[i] + j,
            "]"
        ].join(""));
    }
    for(var i = 0; i < proc.scalarArgs.length; ++i)arglist.push("Y" + i);
    if (proc.shapeArgs.length > 0) vars.push("shape=SS.slice(0)") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)
    ;
    if (proc.indexArgs.length > 0) {
        // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.
        var zeros = new Array(dimension);
        for(var i = 0; i < dimension; ++i)zeros[i] = "0";
        vars.push([
            "index=[",
            zeros.join(","),
            "]"
        ].join(""));
    }
    for(var i = 0; i < proc.offsetArgs.length; ++i){
        var off_arg = proc.offsetArgs[i];
        var init_string = [];
        for(var j = 0; j < off_arg.offset.length; ++j){
            if (off_arg.offset[j] === 0) continue;
            else if (off_arg.offset[j] === 1) init_string.push([
                "t",
                off_arg.array,
                "p",
                j
            ].join(""));
            else init_string.push([
                off_arg.offset[j],
                "*t",
                off_arg.array,
                "p",
                j
            ].join(""));
        }
        if (init_string.length === 0) vars.push("q" + i + "=0");
        else vars.push([
            "q",
            i,
            "=",
            init_string.join("+")
        ].join(""));
    }
    //Prepare this variables
    var thisVars = $da4e7f819177b26e$exports([].concat(proc.pre.thisVars).concat(proc.body.thisVars).concat(proc.post.thisVars));
    vars = vars.concat(thisVars);
    if (vars.length > 0) code.push("var " + vars.join(","));
    for(var i = 0; i < proc.arrayArgs.length; ++i)code.push("p" + i + "|=0");
    //Inline prelude
    if (proc.pre.body.length > 3) code.push($192a8e2c043b91f1$var$processBlock(proc.pre, proc, dtypes));
    //Process body
    var body = $192a8e2c043b91f1$var$processBlock(proc.body, proc, dtypes);
    var matched = $192a8e2c043b91f1$var$countMatches(loopOrders);
    if (matched < dimension) code.push($192a8e2c043b91f1$var$outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.
    ;
    else code.push($192a8e2c043b91f1$var$innerFill(loopOrders[0], proc, body));
    //Inline epilog
    if (proc.post.body.length > 3) code.push($192a8e2c043b91f1$var$processBlock(proc.post, proc, dtypes));
    if (proc.debug) console.log("-----Generated cwise routine for ", typesig, ":\n" + code.join("\n") + "\n----------");
    var loopName = [
        proc.funcName || "unnamed",
        "_cwise_loop_",
        orders[0].join("s"),
        "m",
        matched,
        $192a8e2c043b91f1$var$typeSummary(dtypes)
    ].join("");
    var f = new Function([
        "function ",
        loopName,
        "(",
        arglist.join(","),
        "){",
        code.join("\n"),
        "} return ",
        loopName
    ].join(""));
    return f();
}
$192a8e2c043b91f1$exports = $192a8e2c043b91f1$var$generateCWiseOp;


function $974a5f05e14b5eaa$var$createThunk(proc) {
    var code = [
        "'use strict'",
        "var CACHED={}"
    ];
    var vars = [];
    var thunkName = proc.funcName + "_cwise_thunk";
    //Build thunk
    code.push([
        "return function ",
        thunkName,
        "(",
        proc.shimArgs.join(","),
        "){"
    ].join(""));
    var typesig = [];
    var string_typesig = [];
    var proc_args = [
        [
            "array",
            proc.arrayArgs[0],
            ".shape.slice(",
            Math.max(0, proc.arrayBlockIndices[0]),
            proc.arrayBlockIndices[0] < 0 ? "," + proc.arrayBlockIndices[0] + ")" : ")"
        ].join("")
    ];
    var shapeLengthConditions = [], shapeConditions = [];
    // Process array arguments
    for(var i = 0; i < proc.arrayArgs.length; ++i){
        var j = proc.arrayArgs[i];
        vars.push([
            "t",
            j,
            "=array",
            j,
            ".dtype,",
            "r",
            j,
            "=array",
            j,
            ".order"
        ].join(""));
        typesig.push("t" + j);
        typesig.push("r" + j);
        string_typesig.push("t" + j);
        string_typesig.push("r" + j + ".join()");
        proc_args.push("array" + j + ".data");
        proc_args.push("array" + j + ".stride");
        proc_args.push("array" + j + ".offset|0");
        if (i > 0) {
            shapeLengthConditions.push("array" + proc.arrayArgs[0] + ".shape.length===array" + j + ".shape.length+" + (Math.abs(proc.arrayBlockIndices[0]) - Math.abs(proc.arrayBlockIndices[i])));
            shapeConditions.push("array" + proc.arrayArgs[0] + ".shape[shapeIndex+" + Math.max(0, proc.arrayBlockIndices[0]) + "]===array" + j + ".shape[shapeIndex+" + Math.max(0, proc.arrayBlockIndices[i]) + "]");
        }
    }
    // Check for shape equality
    if (proc.arrayArgs.length > 1) {
        code.push("if (!(" + shapeLengthConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same dimensionality!')");
        code.push("for(var shapeIndex=array" + proc.arrayArgs[0] + ".shape.length-" + Math.abs(proc.arrayBlockIndices[0]) + "; shapeIndex-->0;) {");
        code.push("if (!(" + shapeConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same shape!')");
        code.push("}");
    }
    // Process scalar arguments
    for(var i = 0; i < proc.scalarArgs.length; ++i)proc_args.push("scalar" + proc.scalarArgs[i]);
    // Check for cached function (and if not present, generate it)
    vars.push([
        "type=[",
        string_typesig.join(","),
        "].join()"
    ].join(""));
    vars.push("proc=CACHED[type]");
    code.push("var " + vars.join(","));
    code.push([
        "if(!proc){",
        "CACHED[type]=proc=compile([",
        typesig.join(","),
        "])}",
        "return proc(",
        proc_args.join(","),
        ")}"
    ].join(""));
    if (proc.debug) console.log("-----Generated thunk:\n" + code.join("\n") + "\n----------");
    //Compile thunk
    var thunk = new Function("compile", code.join("\n"));
    return thunk($192a8e2c043b91f1$exports.bind(undefined, proc));
}
$974a5f05e14b5eaa$exports = $974a5f05e14b5eaa$var$createThunk;


function $86c9da943d12a21c$var$Procedure() {
    this.argTypes = [];
    this.shimArgs = [];
    this.arrayArgs = [];
    this.arrayBlockIndices = [];
    this.scalarArgs = [];
    this.offsetArgs = [];
    this.offsetArgIndex = [];
    this.indexArgs = [];
    this.shapeArgs = [];
    this.funcName = "";
    this.pre = null;
    this.body = null;
    this.post = null;
    this.debug = false;
}
function $86c9da943d12a21c$var$compileCwise(user_args) {
    //Create procedure
    var proc = new $86c9da943d12a21c$var$Procedure();
    //Parse blocks
    proc.pre = user_args.pre;
    proc.body = user_args.body;
    proc.post = user_args.post;
    //Parse arguments
    var proc_args = user_args.args.slice(0);
    proc.argTypes = proc_args;
    for(var i = 0; i < proc_args.length; ++i){
        var arg_type = proc_args[i];
        if (arg_type === "array" || typeof arg_type === "object" && arg_type.blockIndices) {
            proc.argTypes[i] = "array";
            proc.arrayArgs.push(i);
            proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0);
            proc.shimArgs.push("array" + i);
            if (i < proc.pre.args.length && proc.pre.args[i].count > 0) throw new Error("cwise: pre() block may not reference array args");
            if (i < proc.post.args.length && proc.post.args[i].count > 0) throw new Error("cwise: post() block may not reference array args");
        } else if (arg_type === "scalar") {
            proc.scalarArgs.push(i);
            proc.shimArgs.push("scalar" + i);
        } else if (arg_type === "index") {
            proc.indexArgs.push(i);
            if (i < proc.pre.args.length && proc.pre.args[i].count > 0) throw new Error("cwise: pre() block may not reference array index");
            if (i < proc.body.args.length && proc.body.args[i].lvalue) throw new Error("cwise: body() block may not write to array index");
            if (i < proc.post.args.length && proc.post.args[i].count > 0) throw new Error("cwise: post() block may not reference array index");
        } else if (arg_type === "shape") {
            proc.shapeArgs.push(i);
            if (i < proc.pre.args.length && proc.pre.args[i].lvalue) throw new Error("cwise: pre() block may not write to array shape");
            if (i < proc.body.args.length && proc.body.args[i].lvalue) throw new Error("cwise: body() block may not write to array shape");
            if (i < proc.post.args.length && proc.post.args[i].lvalue) throw new Error("cwise: post() block may not write to array shape");
        } else if (typeof arg_type === "object" && arg_type.offset) {
            proc.argTypes[i] = "offset";
            proc.offsetArgs.push({
                array: arg_type.array,
                offset: arg_type.offset
            });
            proc.offsetArgIndex.push(i);
        } else throw new Error("cwise: Unknown argument type " + proc_args[i]);
    }
    //Make sure at least one array argument was specified
    if (proc.arrayArgs.length <= 0) throw new Error("cwise: No array arguments specified");
    //Make sure arguments are correct
    if (proc.pre.args.length > proc_args.length) throw new Error("cwise: Too many arguments in pre() block");
    if (proc.body.args.length > proc_args.length) throw new Error("cwise: Too many arguments in body() block");
    if (proc.post.args.length > proc_args.length) throw new Error("cwise: Too many arguments in post() block");
    //Check debug flag
    proc.debug = !!user_args.printCode || !!user_args.debug;
    //Retrieve name
    proc.funcName = user_args.funcName || "cwise";
    //Read in block size
    proc.blockSize = user_args.blockSize || 64;
    return $974a5f05e14b5eaa$exports(proc);
}
$86c9da943d12a21c$exports = $86c9da943d12a21c$var$compileCwise;


var $a1c71f2c05033a53$var$REQUIRED_FIELDS = [
    "args",
    "body"
];
var $a1c71f2c05033a53$var$OPTIONAL_FIELDS = [
    "pre",
    "post",
    "printCode",
    "funcName",
    "blockSize"
];
function $a1c71f2c05033a53$var$createCWise(user_args) {
    //Check parameters
    for(var id in user_args)if ($a1c71f2c05033a53$var$REQUIRED_FIELDS.indexOf(id) < 0 && $a1c71f2c05033a53$var$OPTIONAL_FIELDS.indexOf(id) < 0) console.warn("cwise: Unknown argument '" + id + "' passed to expression compiler");
    for(var i = 0; i < $a1c71f2c05033a53$var$REQUIRED_FIELDS.length; ++i){
        if (!user_args[$a1c71f2c05033a53$var$REQUIRED_FIELDS[i]]) throw new Error("cwise: Missing argument: " + $a1c71f2c05033a53$var$REQUIRED_FIELDS[i]);
    }
    //Parse blocks
    return $86c9da943d12a21c$exports({
        args: user_args.args,
        pre: $66348460240f6b71$exports(user_args.pre || function() {
        }),
        body: $66348460240f6b71$exports(user_args.body),
        post: $66348460240f6b71$exports(user_args.post || function() {
        }),
        debug: !!user_args.printCode,
        funcName: user_args.funcName || user_args.body.name || "cwise",
        blockSize: user_args.blockSize || 64
    });
}
$a1c71f2c05033a53$exports = $a1c71f2c05033a53$var$createCWise;


var $1cb49d2bf43ba42b$exports = {};
"use strict";

var $1cb49d2bf43ba42b$var$EmptyProc = {
    body: "",
    args: [],
    thisVars: [],
    localVars: []
};
function $1cb49d2bf43ba42b$var$fixup(x) {
    if (!x) return $1cb49d2bf43ba42b$var$EmptyProc;
    for(var i = 0; i < x.args.length; ++i){
        var a = x.args[i];
        if (i === 0) x.args[i] = {
            name: a,
            lvalue: true,
            rvalue: !!x.rvalue,
            count: x.count || 1
        };
        else x.args[i] = {
            name: a,
            lvalue: false,
            rvalue: true,
            count: 1
        };
    }
    if (!x.thisVars) x.thisVars = [];
    if (!x.localVars) x.localVars = [];
    return x;
}
function $1cb49d2bf43ba42b$var$pcompile(user_args) {
    return $86c9da943d12a21c$exports({
        args: user_args.args,
        pre: $1cb49d2bf43ba42b$var$fixup(user_args.pre),
        body: $1cb49d2bf43ba42b$var$fixup(user_args.body),
        post: $1cb49d2bf43ba42b$var$fixup(user_args.proc),
        funcName: user_args.funcName
    });
}
function $1cb49d2bf43ba42b$var$makeOp(user_args) {
    var args = [];
    for(var i = 0; i < user_args.args.length; ++i)args.push("a" + i);
    var wrapper = new Function("P", [
        "return function ",
        user_args.funcName,
        "_ndarrayops(",
        args.join(","),
        ") {P(",
        args.join(","),
        ");return a0}"
    ].join(""));
    return wrapper($1cb49d2bf43ba42b$var$pcompile(user_args));
}
var $1cb49d2bf43ba42b$var$assign_ops = {
    add: "+",
    sub: "-",
    mul: "*",
    div: "/",
    mod: "%",
    band: "&",
    bor: "|",
    bxor: "^",
    lshift: "<<",
    rshift: ">>",
    rrshift: ">>>"
};
(function() {
    for(var id in $1cb49d2bf43ba42b$var$assign_ops){
        var op = $1cb49d2bf43ba42b$var$assign_ops[id];
        $1cb49d2bf43ba42b$exports[id] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "array"
            ],
            body: {
                args: [
                    "a",
                    "b",
                    "c"
                ],
                body: "a=b" + op + "c"
            },
            funcName: id
        });
        $1cb49d2bf43ba42b$exports[id + "eq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array"
            ],
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a" + op + "=b"
            },
            rvalue: true,
            funcName: id + "eq"
        });
        $1cb49d2bf43ba42b$exports[id + "s"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "scalar"
            ],
            body: {
                args: [
                    "a",
                    "b",
                    "s"
                ],
                body: "a=b" + op + "s"
            },
            funcName: id + "s"
        });
        $1cb49d2bf43ba42b$exports[id + "seq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "scalar"
            ],
            body: {
                args: [
                    "a",
                    "s"
                ],
                body: "a" + op + "=s"
            },
            rvalue: true,
            funcName: id + "seq"
        });
    }
})();
var $1cb49d2bf43ba42b$var$unary_ops = {
    not: "!",
    bnot: "~",
    neg: "-",
    recip: "1.0/"
};
(function() {
    for(var id in $1cb49d2bf43ba42b$var$unary_ops){
        var op = $1cb49d2bf43ba42b$var$unary_ops[id];
        $1cb49d2bf43ba42b$exports[id] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array"
            ],
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a=" + op + "b"
            },
            funcName: id
        });
        $1cb49d2bf43ba42b$exports[id + "eq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array"
            ],
            body: {
                args: [
                    "a"
                ],
                body: "a=" + op + "a"
            },
            rvalue: true,
            count: 2,
            funcName: id + "eq"
        });
    }
})();
var $1cb49d2bf43ba42b$var$binary_ops = {
    and: "&&",
    or: "||",
    eq: "===",
    neq: "!==",
    lt: "<",
    gt: ">",
    leq: "<=",
    geq: ">="
};
(function() {
    for(var id in $1cb49d2bf43ba42b$var$binary_ops){
        var op = $1cb49d2bf43ba42b$var$binary_ops[id];
        $1cb49d2bf43ba42b$exports[id] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "array"
            ],
            body: {
                args: [
                    "a",
                    "b",
                    "c"
                ],
                body: "a=b" + op + "c"
            },
            funcName: id
        });
        $1cb49d2bf43ba42b$exports[id + "s"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "scalar"
            ],
            body: {
                args: [
                    "a",
                    "b",
                    "s"
                ],
                body: "a=b" + op + "s"
            },
            funcName: id + "s"
        });
        $1cb49d2bf43ba42b$exports[id + "eq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array"
            ],
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a=a" + op + "b"
            },
            rvalue: true,
            count: 2,
            funcName: id + "eq"
        });
        $1cb49d2bf43ba42b$exports[id + "seq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "scalar"
            ],
            body: {
                args: [
                    "a",
                    "s"
                ],
                body: "a=a" + op + "s"
            },
            rvalue: true,
            count: 2,
            funcName: id + "seq"
        });
    }
})();
var $1cb49d2bf43ba42b$var$math_unary = [
    "abs",
    "acos",
    "asin",
    "atan",
    "ceil",
    "cos",
    "exp",
    "floor",
    "log",
    "round",
    "sin",
    "sqrt",
    "tan"
];
(function() {
    for(var i = 0; i < $1cb49d2bf43ba42b$var$math_unary.length; ++i){
        var f = $1cb49d2bf43ba42b$var$math_unary[i];
        $1cb49d2bf43ba42b$exports[f] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a=this_f(b)",
                thisVars: [
                    "this_f"
                ]
            },
            funcName: f
        });
        $1cb49d2bf43ba42b$exports[f + "eq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a"
                ],
                body: "a=this_f(a)",
                thisVars: [
                    "this_f"
                ]
            },
            rvalue: true,
            count: 2,
            funcName: f + "eq"
        });
    }
})();
var $1cb49d2bf43ba42b$var$math_comm = [
    "max",
    "min",
    "atan2",
    "pow"
];
(function() {
    for(var i = 0; i < $1cb49d2bf43ba42b$var$math_comm.length; ++i){
        var f = $1cb49d2bf43ba42b$var$math_comm[i];
        $1cb49d2bf43ba42b$exports[f] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "array"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b",
                    "c"
                ],
                body: "a=this_f(b,c)",
                thisVars: [
                    "this_f"
                ]
            },
            funcName: f
        });
        $1cb49d2bf43ba42b$exports[f + "s"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "scalar"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b",
                    "c"
                ],
                body: "a=this_f(b,c)",
                thisVars: [
                    "this_f"
                ]
            },
            funcName: f + "s"
        });
        $1cb49d2bf43ba42b$exports[f + "eq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a=this_f(a,b)",
                thisVars: [
                    "this_f"
                ]
            },
            rvalue: true,
            count: 2,
            funcName: f + "eq"
        });
        $1cb49d2bf43ba42b$exports[f + "seq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "scalar"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a=this_f(a,b)",
                thisVars: [
                    "this_f"
                ]
            },
            rvalue: true,
            count: 2,
            funcName: f + "seq"
        });
    }
})();
var $1cb49d2bf43ba42b$var$math_noncomm = [
    "atan2",
    "pow"
];
(function() {
    for(var i = 0; i < $1cb49d2bf43ba42b$var$math_noncomm.length; ++i){
        var f = $1cb49d2bf43ba42b$var$math_noncomm[i];
        $1cb49d2bf43ba42b$exports[f + "op"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "array"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b",
                    "c"
                ],
                body: "a=this_f(c,b)",
                thisVars: [
                    "this_f"
                ]
            },
            funcName: f + "op"
        });
        $1cb49d2bf43ba42b$exports[f + "ops"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array",
                "scalar"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b",
                    "c"
                ],
                body: "a=this_f(c,b)",
                thisVars: [
                    "this_f"
                ]
            },
            funcName: f + "ops"
        });
        $1cb49d2bf43ba42b$exports[f + "opeq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "array"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a=this_f(b,a)",
                thisVars: [
                    "this_f"
                ]
            },
            rvalue: true,
            count: 2,
            funcName: f + "opeq"
        });
        $1cb49d2bf43ba42b$exports[f + "opseq"] = $1cb49d2bf43ba42b$var$makeOp({
            args: [
                "array",
                "scalar"
            ],
            pre: {
                args: [],
                body: "this_f=Math." + f,
                thisVars: [
                    "this_f"
                ]
            },
            body: {
                args: [
                    "a",
                    "b"
                ],
                body: "a=this_f(b,a)",
                thisVars: [
                    "this_f"
                ]
            },
            rvalue: true,
            count: 2,
            funcName: f + "opseq"
        });
    }
})();
$1cb49d2bf43ba42b$exports.any = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: $1cb49d2bf43ba42b$var$EmptyProc,
    body: {
        args: [
            {
                name: "a",
                lvalue: false,
                rvalue: true,
                count: 1
            }
        ],
        body: "if(a){return true}",
        localVars: [],
        thisVars: []
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [],
        body: "return false"
    },
    funcName: "any"
});
$1cb49d2bf43ba42b$exports.all = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: $1cb49d2bf43ba42b$var$EmptyProc,
    body: {
        args: [
            {
                name: "x",
                lvalue: false,
                rvalue: true,
                count: 1
            }
        ],
        body: "if(!x){return false}",
        localVars: [],
        thisVars: []
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [],
        body: "return true"
    },
    funcName: "all"
});
$1cb49d2bf43ba42b$exports.sum = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "this_s=0"
    },
    body: {
        args: [
            {
                name: "a",
                lvalue: false,
                rvalue: true,
                count: 1
            }
        ],
        body: "this_s+=a",
        localVars: [],
        thisVars: [
            "this_s"
        ]
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "return this_s"
    },
    funcName: "sum"
});
$1cb49d2bf43ba42b$exports.prod = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "this_s=1"
    },
    body: {
        args: [
            {
                name: "a",
                lvalue: false,
                rvalue: true,
                count: 1
            }
        ],
        body: "this_s*=a",
        localVars: [],
        thisVars: [
            "this_s"
        ]
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "return this_s"
    },
    funcName: "prod"
});
$1cb49d2bf43ba42b$exports.norm2squared = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "this_s=0"
    },
    body: {
        args: [
            {
                name: "a",
                lvalue: false,
                rvalue: true,
                count: 2
            }
        ],
        body: "this_s+=a*a",
        localVars: [],
        thisVars: [
            "this_s"
        ]
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "return this_s"
    },
    funcName: "norm2squared"
});
$1cb49d2bf43ba42b$exports.norm2 = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "this_s=0"
    },
    body: {
        args: [
            {
                name: "a",
                lvalue: false,
                rvalue: true,
                count: 2
            }
        ],
        body: "this_s+=a*a",
        localVars: [],
        thisVars: [
            "this_s"
        ]
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "return Math.sqrt(this_s)"
    },
    funcName: "norm2"
});
$1cb49d2bf43ba42b$exports.norminf = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "this_s=0"
    },
    body: {
        args: [
            {
                name: "a",
                lvalue: false,
                rvalue: true,
                count: 4
            }
        ],
        body: "if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}",
        localVars: [],
        thisVars: [
            "this_s"
        ]
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "return this_s"
    },
    funcName: "norminf"
});
$1cb49d2bf43ba42b$exports.norm1 = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "this_s=0"
    },
    body: {
        args: [
            {
                name: "a",
                lvalue: false,
                rvalue: true,
                count: 3
            }
        ],
        body: "this_s+=a<0?-a:a",
        localVars: [],
        thisVars: [
            "this_s"
        ]
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [
            "this_s"
        ],
        body: "return this_s"
    },
    funcName: "norm1"
});
$1cb49d2bf43ba42b$exports.sup = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        body: "this_h=-Infinity",
        args: [],
        thisVars: [
            "this_h"
        ],
        localVars: []
    },
    body: {
        body: "if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",
        args: [
            {
                "name": "_inline_1_arg0_",
                "lvalue": false,
                "rvalue": true,
                "count": 2
            }
        ],
        thisVars: [
            "this_h"
        ],
        localVars: []
    },
    post: {
        body: "return this_h",
        args: [],
        thisVars: [
            "this_h"
        ],
        localVars: []
    }
});
$1cb49d2bf43ba42b$exports.inf = $86c9da943d12a21c$exports({
    args: [
        "array"
    ],
    pre: {
        body: "this_h=Infinity",
        args: [],
        thisVars: [
            "this_h"
        ],
        localVars: []
    },
    body: {
        body: "if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",
        args: [
            {
                "name": "_inline_1_arg0_",
                "lvalue": false,
                "rvalue": true,
                "count": 2
            }
        ],
        thisVars: [
            "this_h"
        ],
        localVars: []
    },
    post: {
        body: "return this_h",
        args: [],
        thisVars: [
            "this_h"
        ],
        localVars: []
    }
});
$1cb49d2bf43ba42b$exports.argmin = $86c9da943d12a21c$exports({
    args: [
        "index",
        "array",
        "shape"
    ],
    pre: {
        body: "{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",
        args: [
            {
                name: "_inline_0_arg0_",
                lvalue: false,
                rvalue: false,
                count: 0
            },
            {
                name: "_inline_0_arg1_",
                lvalue: false,
                rvalue: false,
                count: 0
            },
            {
                name: "_inline_0_arg2_",
                lvalue: false,
                rvalue: true,
                count: 1
            }
        ],
        thisVars: [
            "this_i",
            "this_v"
        ],
        localVars: []
    },
    body: {
        body: "{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
        args: [
            {
                name: "_inline_1_arg0_",
                lvalue: false,
                rvalue: true,
                count: 2
            },
            {
                name: "_inline_1_arg1_",
                lvalue: false,
                rvalue: true,
                count: 2
            }
        ],
        thisVars: [
            "this_i",
            "this_v"
        ],
        localVars: [
            "_inline_1_k"
        ]
    },
    post: {
        body: "{return this_i}",
        args: [],
        thisVars: [
            "this_i"
        ],
        localVars: []
    }
});
$1cb49d2bf43ba42b$exports.argmax = $86c9da943d12a21c$exports({
    args: [
        "index",
        "array",
        "shape"
    ],
    pre: {
        body: "{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",
        args: [
            {
                name: "_inline_0_arg0_",
                lvalue: false,
                rvalue: false,
                count: 0
            },
            {
                name: "_inline_0_arg1_",
                lvalue: false,
                rvalue: false,
                count: 0
            },
            {
                name: "_inline_0_arg2_",
                lvalue: false,
                rvalue: true,
                count: 1
            }
        ],
        thisVars: [
            "this_i",
            "this_v"
        ],
        localVars: []
    },
    body: {
        body: "{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
        args: [
            {
                name: "_inline_1_arg0_",
                lvalue: false,
                rvalue: true,
                count: 2
            },
            {
                name: "_inline_1_arg1_",
                lvalue: false,
                rvalue: true,
                count: 2
            }
        ],
        thisVars: [
            "this_i",
            "this_v"
        ],
        localVars: [
            "_inline_1_k"
        ]
    },
    post: {
        body: "{return this_i}",
        args: [],
        thisVars: [
            "this_i"
        ],
        localVars: []
    }
});
$1cb49d2bf43ba42b$exports.random = $1cb49d2bf43ba42b$var$makeOp({
    args: [
        "array"
    ],
    pre: {
        args: [],
        body: "this_f=Math.random",
        thisVars: [
            "this_f"
        ]
    },
    body: {
        args: [
            "a"
        ],
        body: "a=this_f()",
        thisVars: [
            "this_f"
        ]
    },
    funcName: "random"
});
$1cb49d2bf43ba42b$exports.assign = $1cb49d2bf43ba42b$var$makeOp({
    args: [
        "array",
        "array"
    ],
    body: {
        args: [
            "a",
            "b"
        ],
        body: "a=b"
    },
    funcName: "assign"
});
$1cb49d2bf43ba42b$exports.assigns = $1cb49d2bf43ba42b$var$makeOp({
    args: [
        "array",
        "scalar"
    ],
    body: {
        args: [
            "a",
            "b"
        ],
        body: "a=b"
    },
    funcName: "assigns"
});
$1cb49d2bf43ba42b$exports.equals = $86c9da943d12a21c$exports({
    args: [
        "array",
        "array"
    ],
    pre: $1cb49d2bf43ba42b$var$EmptyProc,
    body: {
        args: [
            {
                name: "x",
                lvalue: false,
                rvalue: true,
                count: 1
            },
            {
                name: "y",
                lvalue: false,
                rvalue: true,
                count: 1
            }
        ],
        body: "if(x!==y){return false}",
        localVars: [],
        thisVars: []
    },
    post: {
        args: [],
        localVars: [],
        thisVars: [],
        body: "return true"
    },
    funcName: "equals"
});


var $959c399aa04d5b22$exports = {};
'use strict';

var $9c471cb5cd11f802$exports = {};
var $eb4a634d39ffabb2$exports = {};
"use strict";
function $eb4a634d39ffabb2$var$iota(n) {
    var result = new Array(n);
    for(var i = 0; i < n; ++i)result[i] = i;
    return result;
}
$eb4a634d39ffabb2$exports = $eb4a634d39ffabb2$var$iota;


var $e9864cd9759657e8$exports = {};
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ // The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
$e9864cd9759657e8$exports = function(obj) {
    return obj != null && ($e9864cd9759657e8$var$isBuffer(obj) || $e9864cd9759657e8$var$isSlowBuffer(obj) || !!obj._isBuffer);
};
function $e9864cd9759657e8$var$isBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}
// For Node v0.10 support. Remove this eventually.
function $e9864cd9759657e8$var$isSlowBuffer(obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && $e9864cd9759657e8$var$isBuffer(obj.slice(0, 0));
}


var $9c471cb5cd11f802$var$hasTypedArrays = typeof Float64Array !== "undefined";
function $9c471cb5cd11f802$var$compare1st(a, b) {
    return a[0] - b[0];
}
function $9c471cb5cd11f802$var$order() {
    var stride = this.stride;
    var terms = new Array(stride.length);
    var i;
    for(i = 0; i < terms.length; ++i)terms[i] = [
        Math.abs(stride[i]),
        i
    ];
    terms.sort($9c471cb5cd11f802$var$compare1st);
    var result = new Array(terms.length);
    for(i = 0; i < result.length; ++i)result[i] = terms[i][1];
    return result;
}
function $9c471cb5cd11f802$var$compileConstructor(dtype, dimension) {
    var className = [
        "View",
        dimension,
        "d",
        dtype
    ].join("");
    if (dimension < 0) className = "View_Nil" + dtype;
    var useGetters = dtype === "generic";
    if (dimension === -1) {
        //Special case for trivial arrays
        var code = "function " + className + "(a){this.data=a;};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new " + className + "(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_" + className + "(a){return new " + className + "(a);}";
        var procedure = new Function(code);
        return procedure();
    } else if (dimension === 0) {
        //Special case for 0d arrays
        var code = "function " + className + "(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function " + className + "_copy() {\
return new " + className + "(this.data,this.offset)\
};\
proto.pick=function " + className + "_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function " + className + "_get(){\
return " + (useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]") + "};\
proto.set=function " + className + "_set(v){\
return " + (useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v") + "\
};\
return function construct_" + className + "(a,b,c,d){return new " + className + "(a,d)}";
        var procedure = new Function("TrivialArray", code);
        return procedure($9c471cb5cd11f802$var$CACHED_CONSTRUCTORS[dtype][0]);
    }
    var code = [
        "'use strict'"
    ];
    //Create constructor for view
    var indices = $eb4a634d39ffabb2$exports(dimension);
    var args = indices.map(function(i) {
        return "i" + i;
    });
    var index_str = "this.offset+" + indices.map(function(i) {
        return "this.stride[" + i + "]*i" + i;
    }).join("+");
    var shapeArg = indices.map(function(i) {
        return "b" + i;
    }).join(",");
    var strideArg = indices.map(function(i) {
        return "c" + i;
    }).join(",");
    code.push("function " + className + "(a," + shapeArg + "," + strideArg + ",d){this.data=a", "this.shape=[" + shapeArg + "]", "this.stride=[" + strideArg + "]", "this.offset=d|0}", "var proto=" + className + ".prototype", "proto.dtype='" + dtype + "'", "proto.dimension=" + dimension);
    //view.size:
    code.push("Object.defineProperty(proto,'size',{get:function " + className + "_size(){\
return " + indices.map(function(i) {
        return "this.shape[" + i + "]";
    }).join("*"), "}})");
    //view.order:
    if (dimension === 1) code.push("proto.order=[0]");
    else {
        code.push("Object.defineProperty(proto,'order',{get:");
        if (dimension < 4) {
            code.push("function " + className + "_order(){");
            if (dimension === 2) code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})");
            else if (dimension === 3) code.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})");
        } else code.push("ORDER})");
    }
    //view.set(i0, ..., v):
    code.push("proto.set=function " + className + "_set(" + args.join(",") + ",v){");
    if (useGetters) code.push("return this.data.set(" + index_str + ",v)}");
    else code.push("return this.data[" + index_str + "]=v}");
    //view.get(i0, ...):
    code.push("proto.get=function " + className + "_get(" + args.join(",") + "){");
    if (useGetters) code.push("return this.data.get(" + index_str + ")}");
    else code.push("return this.data[" + index_str + "]}");
    //view.index:
    code.push("proto.index=function " + className + "_index(", args.join(), "){return " + index_str + "}");
    //view.hi():
    code.push("proto.hi=function " + className + "_hi(" + args.join(",") + "){return new " + className + "(this.data," + indices.map(function(i) {
        return [
            "(typeof i",
            i,
            "!=='number'||i",
            i,
            "<0)?this.shape[",
            i,
            "]:i",
            i,
            "|0"
        ].join("");
    }).join(",") + "," + indices.map(function(i) {
        return "this.stride[" + i + "]";
    }).join(",") + ",this.offset)}");
    //view.lo():
    var a_vars = indices.map(function(i) {
        return "a" + i + "=this.shape[" + i + "]";
    });
    var c_vars = indices.map(function(i) {
        return "c" + i + "=this.stride[" + i + "]";
    });
    code.push("proto.lo=function " + className + "_lo(" + args.join(",") + "){var b=this.offset,d=0," + a_vars.join(",") + "," + c_vars.join(","));
    for(var i1 = 0; i1 < dimension; ++i1)code.push("if(typeof i" + i1 + "==='number'&&i" + i1 + ">=0){\
d=i" + i1 + "|0;\
b+=c" + i1 + "*d;\
a" + i1 + "-=d}");
    code.push("return new " + className + "(this.data," + indices.map(function(i) {
        return "a" + i;
    }).join(",") + "," + indices.map(function(i) {
        return "c" + i;
    }).join(",") + ",b)}");
    //view.step():
    code.push("proto.step=function " + className + "_step(" + args.join(",") + "){var " + indices.map(function(i) {
        return "a" + i + "=this.shape[" + i + "]";
    }).join(",") + "," + indices.map(function(i) {
        return "b" + i + "=this.stride[" + i + "]";
    }).join(",") + ",c=this.offset,d=0,ceil=Math.ceil");
    for(var i1 = 0; i1 < dimension; ++i1)code.push("if(typeof i" + i1 + "==='number'){\
d=i" + i1 + "|0;\
if(d<0){\
c+=b" + i1 + "*(a" + i1 + "-1);\
a" + i1 + "=ceil(-a" + i1 + "/d)\
}else{\
a" + i1 + "=ceil(a" + i1 + "/d)\
}\
b" + i1 + "*=d\
}");
    code.push("return new " + className + "(this.data," + indices.map(function(i) {
        return "a" + i;
    }).join(",") + "," + indices.map(function(i) {
        return "b" + i;
    }).join(",") + ",c)}");
    //view.transpose():
    var tShape = new Array(dimension);
    var tStride = new Array(dimension);
    for(var i1 = 0; i1 < dimension; ++i1){
        tShape[i1] = "a[i" + i1 + "]";
        tStride[i1] = "b[i" + i1 + "]";
    }
    code.push("proto.transpose=function " + className + "_transpose(" + args + "){" + args.map(function(n, idx) {
        return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)";
    }).join(";"), "var a=this.shape,b=this.stride;return new " + className + "(this.data," + tShape.join(",") + "," + tStride.join(",") + ",this.offset)}");
    //view.pick():
    code.push("proto.pick=function " + className + "_pick(" + args + "){var a=[],b=[],c=this.offset");
    for(var i1 = 0; i1 < dimension; ++i1)code.push("if(typeof i" + i1 + "==='number'&&i" + i1 + ">=0){c=(c+this.stride[" + i1 + "]*i" + i1 + ")|0}else{a.push(this.shape[" + i1 + "]);b.push(this.stride[" + i1 + "])}");
    code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}");
    //Add return statement
    code.push("return function construct_" + className + "(data,shape,stride,offset){return new " + className + "(data," + indices.map(function(i) {
        return "shape[" + i + "]";
    }).join(",") + "," + indices.map(function(i) {
        return "stride[" + i + "]";
    }).join(",") + ",offset)}");
    //Compile procedure
    var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"));
    return procedure($9c471cb5cd11f802$var$CACHED_CONSTRUCTORS[dtype], $9c471cb5cd11f802$var$order);
}
function $9c471cb5cd11f802$var$arrayDType(data) {
    if ($e9864cd9759657e8$exports(data)) return "buffer";
    if ($9c471cb5cd11f802$var$hasTypedArrays) switch(Object.prototype.toString.call(data)){
        case "[object Float64Array]":
            return "float64";
        case "[object Float32Array]":
            return "float32";
        case "[object Int8Array]":
            return "int8";
        case "[object Int16Array]":
            return "int16";
        case "[object Int32Array]":
            return "int32";
        case "[object Uint8Array]":
            return "uint8";
        case "[object Uint16Array]":
            return "uint16";
        case "[object Uint32Array]":
            return "uint32";
        case "[object Uint8ClampedArray]":
            return "uint8_clamped";
        case "[object BigInt64Array]":
            return "bigint64";
        case "[object BigUint64Array]":
            return "biguint64";
    }
    if (Array.isArray(data)) return "array";
    return "generic";
}
var $9c471cb5cd11f802$var$CACHED_CONSTRUCTORS = {
    "float32": [],
    "float64": [],
    "int8": [],
    "int16": [],
    "int32": [],
    "uint8": [],
    "uint16": [],
    "uint32": [],
    "array": [],
    "uint8_clamped": [],
    "bigint64": [],
    "biguint64": [],
    "buffer": [],
    "generic": []
};
function $9c471cb5cd11f802$var$wrappedNDArrayCtor(data, shape, stride, offset) {
    if (data === undefined) {
        var ctor = $9c471cb5cd11f802$var$CACHED_CONSTRUCTORS.array[0];
        return ctor([]);
    } else if (typeof data === "number") data = [
        data
    ];
    if (shape === undefined) shape = [
        data.length
    ];
    var d = shape.length;
    if (stride === undefined) {
        stride = new Array(d);
        for(var i = d - 1, sz = 1; i >= 0; --i){
            stride[i] = sz;
            sz *= shape[i];
        }
    }
    if (offset === undefined) {
        offset = 0;
        for(var i = 0; i < d; ++i)if (stride[i] < 0) offset -= (shape[i] - 1) * stride[i];
    }
    var dtype = $9c471cb5cd11f802$var$arrayDType(data);
    var ctor_list = $9c471cb5cd11f802$var$CACHED_CONSTRUCTORS[dtype];
    while(ctor_list.length <= d + 1)ctor_list.push($9c471cb5cd11f802$var$compileConstructor(dtype, ctor_list.length - 1));
    var ctor = ctor_list[d + 1];
    return ctor(data, shape, stride, offset);
}
$9c471cb5cd11f802$exports = $9c471cb5cd11f802$var$wrappedNDArrayCtor;


var $9b870bacf32d687d$exports = {};

$parcel$export($9b870bacf32d687d$exports, "free", () => $9b870bacf32d687d$export$13e2de3c33d99539, (v) => $9b870bacf32d687d$export$13e2de3c33d99539 = v);
$parcel$export($9b870bacf32d687d$exports, "freeUint8", () => $9b870bacf32d687d$export$11fc1c4b04ba842c, (v) => $9b870bacf32d687d$export$11fc1c4b04ba842c = v);
$parcel$export($9b870bacf32d687d$exports, "freeUint16", () => $9b870bacf32d687d$export$f5ead431d5bddd13, (v) => $9b870bacf32d687d$export$f5ead431d5bddd13 = v);
$parcel$export($9b870bacf32d687d$exports, "freeUint32", () => $9b870bacf32d687d$export$d6ae10446123eda0, (v) => $9b870bacf32d687d$export$d6ae10446123eda0 = v);
$parcel$export($9b870bacf32d687d$exports, "freeBigUint64", () => $9b870bacf32d687d$export$ef42cc2a8a64e60c, (v) => $9b870bacf32d687d$export$ef42cc2a8a64e60c = v);
$parcel$export($9b870bacf32d687d$exports, "freeInt8", () => $9b870bacf32d687d$export$e0d7dff56fa02f46, (v) => $9b870bacf32d687d$export$e0d7dff56fa02f46 = v);
$parcel$export($9b870bacf32d687d$exports, "freeInt16", () => $9b870bacf32d687d$export$badf6ea6e46c4075, (v) => $9b870bacf32d687d$export$badf6ea6e46c4075 = v);
$parcel$export($9b870bacf32d687d$exports, "freeInt32", () => $9b870bacf32d687d$export$971146dcff607408, (v) => $9b870bacf32d687d$export$971146dcff607408 = v);
$parcel$export($9b870bacf32d687d$exports, "freeBigInt64", () => $9b870bacf32d687d$export$95286cac6fe72f57, (v) => $9b870bacf32d687d$export$95286cac6fe72f57 = v);
$parcel$export($9b870bacf32d687d$exports, "freeFloat32", () => $9b870bacf32d687d$export$781125fcc60e6b35, (v) => $9b870bacf32d687d$export$781125fcc60e6b35 = v);
$parcel$export($9b870bacf32d687d$exports, "freeFloat", () => $9b870bacf32d687d$export$faf8b381a7d1f026, (v) => $9b870bacf32d687d$export$faf8b381a7d1f026 = v);
$parcel$export($9b870bacf32d687d$exports, "freeFloat64", () => $9b870bacf32d687d$export$c26a3648f9f53f6c, (v) => $9b870bacf32d687d$export$c26a3648f9f53f6c = v);
$parcel$export($9b870bacf32d687d$exports, "freeDouble", () => $9b870bacf32d687d$export$eb497d924a09cc2c, (v) => $9b870bacf32d687d$export$eb497d924a09cc2c = v);
$parcel$export($9b870bacf32d687d$exports, "freeUint8Clamped", () => $9b870bacf32d687d$export$73cdf697b53baa, (v) => $9b870bacf32d687d$export$73cdf697b53baa = v);
$parcel$export($9b870bacf32d687d$exports, "freeDataView", () => $9b870bacf32d687d$export$b2756c99e0338993, (v) => $9b870bacf32d687d$export$b2756c99e0338993 = v);
$parcel$export($9b870bacf32d687d$exports, "freeArrayBuffer", () => $9b870bacf32d687d$export$9d0c804f255d59e1, (v) => $9b870bacf32d687d$export$9d0c804f255d59e1 = v);
$parcel$export($9b870bacf32d687d$exports, "freeBuffer", () => $9b870bacf32d687d$export$a24fefa6ccae86ec, (v) => $9b870bacf32d687d$export$a24fefa6ccae86ec = v);
$parcel$export($9b870bacf32d687d$exports, "malloc", () => $9b870bacf32d687d$export$6fa553f58a2a31c2, (v) => $9b870bacf32d687d$export$6fa553f58a2a31c2 = v);
$parcel$export($9b870bacf32d687d$exports, "mallocArrayBuffer", () => $9b870bacf32d687d$export$87c88a877180cdad, (v) => $9b870bacf32d687d$export$87c88a877180cdad = v);
$parcel$export($9b870bacf32d687d$exports, "mallocUint8", () => $9b870bacf32d687d$export$4fc11d1e7c095d9c, (v) => $9b870bacf32d687d$export$4fc11d1e7c095d9c = v);
$parcel$export($9b870bacf32d687d$exports, "mallocUint16", () => $9b870bacf32d687d$export$72dbf0325fb0f6aa, (v) => $9b870bacf32d687d$export$72dbf0325fb0f6aa = v);
$parcel$export($9b870bacf32d687d$exports, "mallocUint32", () => $9b870bacf32d687d$export$5a2d51bea84dc88a, (v) => $9b870bacf32d687d$export$5a2d51bea84dc88a = v);
$parcel$export($9b870bacf32d687d$exports, "mallocInt8", () => $9b870bacf32d687d$export$8e4b75dc6bfe3d87, (v) => $9b870bacf32d687d$export$8e4b75dc6bfe3d87 = v);
$parcel$export($9b870bacf32d687d$exports, "mallocInt16", () => $9b870bacf32d687d$export$97e0aa7cbfa04c72, (v) => $9b870bacf32d687d$export$97e0aa7cbfa04c72 = v);
$parcel$export($9b870bacf32d687d$exports, "mallocInt32", () => $9b870bacf32d687d$export$bf19141f00438a2e, (v) => $9b870bacf32d687d$export$bf19141f00438a2e = v);
$parcel$export($9b870bacf32d687d$exports, "mallocFloat32", () => $9b870bacf32d687d$export$9492a022692715cc, (v) => $9b870bacf32d687d$export$9492a022692715cc = v);
$parcel$export($9b870bacf32d687d$exports, "mallocFloat", () => $9b870bacf32d687d$export$d0434a350fe26016, (v) => $9b870bacf32d687d$export$d0434a350fe26016 = v);
$parcel$export($9b870bacf32d687d$exports, "mallocFloat64", () => $9b870bacf32d687d$export$c0265c4abfd8544d, (v) => $9b870bacf32d687d$export$c0265c4abfd8544d = v);
$parcel$export($9b870bacf32d687d$exports, "mallocDouble", () => $9b870bacf32d687d$export$54d221d78667dc5b, (v) => $9b870bacf32d687d$export$54d221d78667dc5b = v);
$parcel$export($9b870bacf32d687d$exports, "mallocUint8Clamped", () => $9b870bacf32d687d$export$a917895a033466e4, (v) => $9b870bacf32d687d$export$a917895a033466e4 = v);
$parcel$export($9b870bacf32d687d$exports, "mallocBigUint64", () => $9b870bacf32d687d$export$3caddc78357f3843, (v) => $9b870bacf32d687d$export$3caddc78357f3843 = v);
$parcel$export($9b870bacf32d687d$exports, "mallocBigInt64", () => $9b870bacf32d687d$export$31be42ebae36d419, (v) => $9b870bacf32d687d$export$31be42ebae36d419 = v);
$parcel$export($9b870bacf32d687d$exports, "mallocDataView", () => $9b870bacf32d687d$export$101cb185aa94caed, (v) => $9b870bacf32d687d$export$101cb185aa94caed = v);
$parcel$export($9b870bacf32d687d$exports, "mallocBuffer", () => $9b870bacf32d687d$export$76498f1e097fe8a6, (v) => $9b870bacf32d687d$export$76498f1e097fe8a6 = v);
$parcel$export($9b870bacf32d687d$exports, "clearCache", () => $9b870bacf32d687d$export$d2adf65b87e47523, (v) => $9b870bacf32d687d$export$d2adf65b87e47523 = v);
var $9b870bacf32d687d$export$13e2de3c33d99539;
var $9b870bacf32d687d$export$11fc1c4b04ba842c;
var $9b870bacf32d687d$export$f5ead431d5bddd13;
var $9b870bacf32d687d$export$d6ae10446123eda0;
var $9b870bacf32d687d$export$ef42cc2a8a64e60c;
var $9b870bacf32d687d$export$e0d7dff56fa02f46;
var $9b870bacf32d687d$export$badf6ea6e46c4075;
var $9b870bacf32d687d$export$971146dcff607408;
var $9b870bacf32d687d$export$95286cac6fe72f57;
var $9b870bacf32d687d$export$781125fcc60e6b35;
var $9b870bacf32d687d$export$faf8b381a7d1f026;
var $9b870bacf32d687d$export$c26a3648f9f53f6c;
var $9b870bacf32d687d$export$eb497d924a09cc2c;
var $9b870bacf32d687d$export$73cdf697b53baa;
var $9b870bacf32d687d$export$b2756c99e0338993;
var $9b870bacf32d687d$export$9d0c804f255d59e1;
var $9b870bacf32d687d$export$a24fefa6ccae86ec;
var $9b870bacf32d687d$export$6fa553f58a2a31c2;
var $9b870bacf32d687d$export$87c88a877180cdad;
var $9b870bacf32d687d$export$4fc11d1e7c095d9c;
var $9b870bacf32d687d$export$72dbf0325fb0f6aa;
var $9b870bacf32d687d$export$5a2d51bea84dc88a;
var $9b870bacf32d687d$export$8e4b75dc6bfe3d87;
var $9b870bacf32d687d$export$97e0aa7cbfa04c72;
var $9b870bacf32d687d$export$bf19141f00438a2e;
var $9b870bacf32d687d$export$9492a022692715cc;
var $9b870bacf32d687d$export$d0434a350fe26016;
var $9b870bacf32d687d$export$c0265c4abfd8544d;
var $9b870bacf32d687d$export$54d221d78667dc5b;
var $9b870bacf32d687d$export$a917895a033466e4;
var $9b870bacf32d687d$export$3caddc78357f3843;
var $9b870bacf32d687d$export$31be42ebae36d419;
var $9b870bacf32d687d$export$101cb185aa94caed;
var $9b870bacf32d687d$export$76498f1e097fe8a6;
var $9b870bacf32d687d$export$d2adf65b87e47523;
'use strict';
//Constants
var $5ab7ed18a300fd94$export$419a26f2aa9da396;
var $5ab7ed18a300fd94$export$4f4b393a94aa2457;
var $5ab7ed18a300fd94$export$8bb31f9592676215;
//Returns -1, 0, +1 depending on sign of x
var $5ab7ed18a300fd94$export$c5552dfdbc7cec71;
//Computes absolute value of integer
var $5ab7ed18a300fd94$export$2335f513bbd82c6d;
//Computes minimum of integers x and y
var $5ab7ed18a300fd94$export$96ec731ed4dcb222;
//Computes maximum of integers x and y
var $5ab7ed18a300fd94$export$8960430cfd85939f;
//Checks if a number is a power of two
var $5ab7ed18a300fd94$export$eb50b9c078eb6ae7;
//Computes log base 2 of v
var $5ab7ed18a300fd94$export$b9fae0bba9d9094d;
//Computes log base 10 of v
var $5ab7ed18a300fd94$export$75e08744a3ff8516;
//Counts number of bits
var $5ab7ed18a300fd94$export$e504fb5dd3f0574f;
var $5ab7ed18a300fd94$export$89a884564c32f7f7;
//Rounds to next power of 2
var $5ab7ed18a300fd94$export$f0d90cf68bd426eb;
//Rounds down to previous power of 2
var $5ab7ed18a300fd94$export$9d423d818f6c4e8;
//Computes parity of word
var $5ab7ed18a300fd94$export$efe353078db02e10;
//Reverse bits in a 32 bit word
var $5ab7ed18a300fd94$export$66c1ae025e96b4bc;
//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
var $5ab7ed18a300fd94$export$4ba3408bd18f4427;
//Extracts the nth interleaved component
var $5ab7ed18a300fd94$export$7672fa14d84398bf;
//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
var $5ab7ed18a300fd94$export$2e5403465fcfe316;
//Extracts nth interleaved component of a 3-tuple
var $5ab7ed18a300fd94$export$bf2ef72ecb045638;
//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
var $5ab7ed18a300fd94$export$9f555377a7192b69;
/**
 * Bit twiddling hacks for JavaScript.
 *
 * Author: Mikola Lysenko
 *
 * Ported from Stanford bit twiddling hack library:
 *    http://graphics.stanford.edu/~seander/bithacks.html
 */ "use strict";
"use restrict";
//Number of bits in an integer
var $5ab7ed18a300fd94$var$INT_BITS = 32;
$5ab7ed18a300fd94$export$419a26f2aa9da396 = $5ab7ed18a300fd94$var$INT_BITS;
$5ab7ed18a300fd94$export$4f4b393a94aa2457 = 2147483647;
$5ab7ed18a300fd94$export$8bb31f9592676215 = -1 << $5ab7ed18a300fd94$var$INT_BITS - 1;
$5ab7ed18a300fd94$export$c5552dfdbc7cec71 = function(v) {
    return (v > 0) - (v < 0);
};
$5ab7ed18a300fd94$export$2335f513bbd82c6d = function(v) {
    var mask = v >> $5ab7ed18a300fd94$var$INT_BITS - 1;
    return (v ^ mask) - mask;
};
$5ab7ed18a300fd94$export$96ec731ed4dcb222 = function(x, y) {
    return y ^ (x ^ y) & -(x < y);
};
$5ab7ed18a300fd94$export$8960430cfd85939f = function(x, y) {
    return x ^ (x ^ y) & -(x < y);
};
$5ab7ed18a300fd94$export$eb50b9c078eb6ae7 = function(v) {
    return !(v & v - 1) && !!v;
};
$5ab7ed18a300fd94$export$b9fae0bba9d9094d = function(v) {
    var r, shift;
    r = (v > 65535) << 4;
    v >>>= r;
    shift = (v > 255) << 3;
    v >>>= shift;
    r |= shift;
    shift = (v > 15) << 2;
    v >>>= shift;
    r |= shift;
    shift = (v > 3) << 1;
    v >>>= shift;
    r |= shift;
    return r | v >> 1;
};
$5ab7ed18a300fd94$export$75e08744a3ff8516 = function(v) {
    return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;
};
$5ab7ed18a300fd94$export$e504fb5dd3f0574f = function(v) {
    v = v - (v >>> 1 & 1431655765);
    v = (v & 858993459) + (v >>> 2 & 858993459);
    return (v + (v >>> 4) & 252645135) * 16843009 >>> 24;
};
//Counts number of trailing zeros
function $5ab7ed18a300fd94$var$countTrailingZeros(v) {
    var c = 32;
    v &= -v;
    if (v) c--;
    if (v & 65535) c -= 16;
    if (v & 16711935) c -= 8;
    if (v & 252645135) c -= 4;
    if (v & 858993459) c -= 2;
    if (v & 1431655765) c -= 1;
    return c;
}
$5ab7ed18a300fd94$export$89a884564c32f7f7 = $5ab7ed18a300fd94$var$countTrailingZeros;
$5ab7ed18a300fd94$export$f0d90cf68bd426eb = function(v) {
    v += v === 0;
    --v;
    v |= v >>> 1;
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    v |= v >>> 16;
    return v + 1;
};
$5ab7ed18a300fd94$export$9d423d818f6c4e8 = function(v) {
    v |= v >>> 1;
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    v |= v >>> 16;
    return v - (v >>> 1);
};
$5ab7ed18a300fd94$export$efe353078db02e10 = function(v) {
    v ^= v >>> 16;
    v ^= v >>> 8;
    v ^= v >>> 4;
    v &= 15;
    return 27030 >>> v & 1;
};
var $5ab7ed18a300fd94$var$REVERSE_TABLE = new Array(256);
(function(tab) {
    for(var i = 0; i < 256; ++i){
        var v = i, r = i, s = 7;
        for(v >>>= 1; v; v >>>= 1){
            r <<= 1;
            r |= v & 1;
            --s;
        }
        tab[i] = r << s & 255;
    }
})($5ab7ed18a300fd94$var$REVERSE_TABLE);
$5ab7ed18a300fd94$export$66c1ae025e96b4bc = function(v) {
    return $5ab7ed18a300fd94$var$REVERSE_TABLE[v & 255] << 24 | $5ab7ed18a300fd94$var$REVERSE_TABLE[v >>> 8 & 255] << 16 | $5ab7ed18a300fd94$var$REVERSE_TABLE[v >>> 16 & 255] << 8 | $5ab7ed18a300fd94$var$REVERSE_TABLE[v >>> 24 & 255];
};
$5ab7ed18a300fd94$export$4ba3408bd18f4427 = function(x, y) {
    x &= 65535;
    x = (x | x << 8) & 16711935;
    x = (x | x << 4) & 252645135;
    x = (x | x << 2) & 858993459;
    x = (x | x << 1) & 1431655765;
    y &= 65535;
    y = (y | y << 8) & 16711935;
    y = (y | y << 4) & 252645135;
    y = (y | y << 2) & 858993459;
    y = (y | y << 1) & 1431655765;
    return x | y << 1;
};
$5ab7ed18a300fd94$export$7672fa14d84398bf = function(v, n) {
    v = v >>> n & 1431655765;
    v = (v | v >>> 1) & 858993459;
    v = (v | v >>> 2) & 252645135;
    v = (v | v >>> 4) & 16711935;
    v = (v | v >>> 16) & 65535;
    return v << 16 >> 16;
};
$5ab7ed18a300fd94$export$2e5403465fcfe316 = function(x, y, z) {
    x &= 1023;
    x = (x | x << 16) & 4278190335;
    x = (x | x << 8) & 251719695;
    x = (x | x << 4) & 3272356035;
    x = (x | x << 2) & 1227133513;
    y &= 1023;
    y = (y | y << 16) & 4278190335;
    y = (y | y << 8) & 251719695;
    y = (y | y << 4) & 3272356035;
    y = (y | y << 2) & 1227133513;
    x |= y << 1;
    z &= 1023;
    z = (z | z << 16) & 4278190335;
    z = (z | z << 8) & 251719695;
    z = (z | z << 4) & 3272356035;
    z = (z | z << 2) & 1227133513;
    return x | z << 2;
};
$5ab7ed18a300fd94$export$bf2ef72ecb045638 = function(v, n) {
    v = v >>> n & 1227133513;
    v = (v | v >>> 2) & 3272356035;
    v = (v | v >>> 4) & 251719695;
    v = (v | v >>> 8) & 4278190335;
    v = (v | v >>> 16) & 1023;
    return v << 22 >> 22;
};
$5ab7ed18a300fd94$export$9f555377a7192b69 = function(v) {
    var t = v | v - 1;
    return t + 1 | (~t & -~t) - 1 >>> $5ab7ed18a300fd94$var$countTrailingZeros(v) + 1;
};


var $5e1a8c3afb8a0630$exports = {};
"use strict";
function $5e1a8c3afb8a0630$var$dupe_array(count, value, i) {
    var c = count[i] | 0;
    if (c <= 0) return [];
    var result = new Array(c), j;
    if (i === count.length - 1) for(j = 0; j < c; ++j)result[j] = value;
    else for(j = 0; j < c; ++j)result[j] = $5e1a8c3afb8a0630$var$dupe_array(count, value, i + 1);
    return result;
}
function $5e1a8c3afb8a0630$var$dupe_number(count, value) {
    var result, i;
    result = new Array(count);
    for(i = 0; i < count; ++i)result[i] = value;
    return result;
}
function $5e1a8c3afb8a0630$var$dupe(count, value) {
    if (typeof value === "undefined") value = 0;
    switch(typeof count){
        case "number":
            if (count > 0) return $5e1a8c3afb8a0630$var$dupe_number(count | 0, value);
            break;
        case "object":
            if (typeof count.length === "number") return $5e1a8c3afb8a0630$var$dupe_array(count, value, 0);
            break;
    }
    return [];
}
$5e1a8c3afb8a0630$exports = $5e1a8c3afb8a0630$var$dupe;


var $86af3c84b85df088$export$a143d493d941bafc;
var $86af3c84b85df088$export$e4cf37d7f6fb9e0a;
var $86af3c84b85df088$export$f99ded8fe4b79145;
var $86af3c84b85df088$export$599f31c3813fae4d;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var $3b390a66197d6ad3$export$a48f0734ac7c2329;
var $3b390a66197d6ad3$export$d622b2ad8d90c771;
var $3b390a66197d6ad3$export$6100ba28696e12de;
'use strict';
$3b390a66197d6ad3$export$a48f0734ac7c2329 = $3b390a66197d6ad3$var$byteLength;
$3b390a66197d6ad3$export$d622b2ad8d90c771 = $3b390a66197d6ad3$var$toByteArray;
$3b390a66197d6ad3$export$6100ba28696e12de = $3b390a66197d6ad3$var$fromByteArray;
var $3b390a66197d6ad3$var$lookup = [];
var $3b390a66197d6ad3$var$revLookup = [];
var $3b390a66197d6ad3$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $3b390a66197d6ad3$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $3b390a66197d6ad3$var$i = 0, $3b390a66197d6ad3$var$len = $3b390a66197d6ad3$var$code.length; $3b390a66197d6ad3$var$i < $3b390a66197d6ad3$var$len; ++$3b390a66197d6ad3$var$i){
    $3b390a66197d6ad3$var$lookup[$3b390a66197d6ad3$var$i] = $3b390a66197d6ad3$var$code[$3b390a66197d6ad3$var$i];
    $3b390a66197d6ad3$var$revLookup[$3b390a66197d6ad3$var$code.charCodeAt($3b390a66197d6ad3$var$i)] = $3b390a66197d6ad3$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$3b390a66197d6ad3$var$revLookup['-'.charCodeAt(0)] = 62;
$3b390a66197d6ad3$var$revLookup['_'.charCodeAt(0)] = 63;
function $3b390a66197d6ad3$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $3b390a66197d6ad3$var$byteLength(b64) {
    var lens = $3b390a66197d6ad3$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $3b390a66197d6ad3$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $3b390a66197d6ad3$var$toByteArray(b64) {
    var tmp;
    var lens = $3b390a66197d6ad3$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $3b390a66197d6ad3$var$Arr($3b390a66197d6ad3$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i)] << 18 | $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i)] << 2 | $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i)] << 10 | $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $3b390a66197d6ad3$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function $3b390a66197d6ad3$var$tripletToBase64(num) {
    return $3b390a66197d6ad3$var$lookup[num >> 18 & 63] + $3b390a66197d6ad3$var$lookup[num >> 12 & 63] + $3b390a66197d6ad3$var$lookup[num >> 6 & 63] + $3b390a66197d6ad3$var$lookup[num & 63];
}
function $3b390a66197d6ad3$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push($3b390a66197d6ad3$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $3b390a66197d6ad3$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($3b390a66197d6ad3$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($3b390a66197d6ad3$var$lookup[tmp >> 2] + $3b390a66197d6ad3$var$lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($3b390a66197d6ad3$var$lookup[tmp >> 10] + $3b390a66197d6ad3$var$lookup[tmp >> 4 & 63] + $3b390a66197d6ad3$var$lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $8e863f2b23ddfbc9$export$aafa59e2e03f2942;
var $8e863f2b23ddfbc9$export$68d8715fc104d294;
$8e863f2b23ddfbc9$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$8e863f2b23ddfbc9$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};


var $86af3c84b85df088$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
$86af3c84b85df088$export$a143d493d941bafc = $86af3c84b85df088$var$Buffer;
$86af3c84b85df088$export$e4cf37d7f6fb9e0a = $86af3c84b85df088$var$SlowBuffer;
$86af3c84b85df088$export$f99ded8fe4b79145 = 50;
var $86af3c84b85df088$var$K_MAX_LENGTH = 2147483647;
$86af3c84b85df088$export$599f31c3813fae4d = $86af3c84b85df088$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $86af3c84b85df088$var$Buffer.TYPED_ARRAY_SUPPORT = $86af3c84b85df088$var$typedArraySupport();
if (!$86af3c84b85df088$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $86af3c84b85df088$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($86af3c84b85df088$var$Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!$86af3c84b85df088$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($86af3c84b85df088$var$Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!$86af3c84b85df088$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $86af3c84b85df088$var$createBuffer(length) {
    if (length > $86af3c84b85df088$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $86af3c84b85df088$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $86af3c84b85df088$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return $86af3c84b85df088$var$allocUnsafe(arg);
    }
    return $86af3c84b85df088$var$from(arg, encodingOrOffset, length);
}
$86af3c84b85df088$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $86af3c84b85df088$var$from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return $86af3c84b85df088$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $86af3c84b85df088$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($86af3c84b85df088$var$isInstance(value, ArrayBuffer) || value && $86af3c84b85df088$var$isInstance(value.buffer, ArrayBuffer)) return $86af3c84b85df088$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && ($86af3c84b85df088$var$isInstance(value, SharedArrayBuffer) || value && $86af3c84b85df088$var$isInstance(value.buffer, SharedArrayBuffer))) return $86af3c84b85df088$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $86af3c84b85df088$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $86af3c84b85df088$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $86af3c84b85df088$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $86af3c84b85df088$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $86af3c84b85df088$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($86af3c84b85df088$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($86af3c84b85df088$var$Buffer, Uint8Array);
function $86af3c84b85df088$var$assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $86af3c84b85df088$var$alloc(size, fill, encoding) {
    $86af3c84b85df088$var$assertSize(size);
    if (size <= 0) return $86af3c84b85df088$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? $86af3c84b85df088$var$createBuffer(size).fill(fill, encoding) : $86af3c84b85df088$var$createBuffer(size).fill(fill);
    return $86af3c84b85df088$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $86af3c84b85df088$var$Buffer.alloc = function(size, fill, encoding) {
    return $86af3c84b85df088$var$alloc(size, fill, encoding);
};
function $86af3c84b85df088$var$allocUnsafe(size) {
    $86af3c84b85df088$var$assertSize(size);
    return $86af3c84b85df088$var$createBuffer(size < 0 ? 0 : $86af3c84b85df088$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $86af3c84b85df088$var$Buffer.allocUnsafe = function(size) {
    return $86af3c84b85df088$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $86af3c84b85df088$var$Buffer.allocUnsafeSlow = function(size) {
    return $86af3c84b85df088$var$allocUnsafe(size);
};
function $86af3c84b85df088$var$fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!$86af3c84b85df088$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = $86af3c84b85df088$var$byteLength(string, encoding) | 0;
    var buf = $86af3c84b85df088$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $86af3c84b85df088$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $86af3c84b85df088$var$checked(array.length) | 0;
    var buf = $86af3c84b85df088$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $86af3c84b85df088$var$fromArrayView(arrayView) {
    if ($86af3c84b85df088$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $86af3c84b85df088$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $86af3c84b85df088$var$fromArrayLike(arrayView);
}
function $86af3c84b85df088$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $86af3c84b85df088$var$Buffer.prototype);
    return buf;
}
function $86af3c84b85df088$var$fromObject(obj) {
    if ($86af3c84b85df088$var$Buffer.isBuffer(obj)) {
        var len = $86af3c84b85df088$var$checked(obj.length) | 0;
        var buf = $86af3c84b85df088$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || $86af3c84b85df088$var$numberIsNaN(obj.length)) return $86af3c84b85df088$var$createBuffer(0);
        return $86af3c84b85df088$var$fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $86af3c84b85df088$var$fromArrayLike(obj.data);
}
function $86af3c84b85df088$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $86af3c84b85df088$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $86af3c84b85df088$var$K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function $86af3c84b85df088$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $86af3c84b85df088$var$Buffer.alloc(+length);
}
$86af3c84b85df088$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $86af3c84b85df088$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$86af3c84b85df088$var$Buffer.compare = function compare(a, b) {
    if ($86af3c84b85df088$var$isInstance(a, Uint8Array)) a = $86af3c84b85df088$var$Buffer.from(a, a.offset, a.byteLength);
    if ($86af3c84b85df088$var$isInstance(b, Uint8Array)) b = $86af3c84b85df088$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$86af3c84b85df088$var$Buffer.isBuffer(a) || !$86af3c84b85df088$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$86af3c84b85df088$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
$86af3c84b85df088$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $86af3c84b85df088$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $86af3c84b85df088$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($86af3c84b85df088$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $86af3c84b85df088$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$86af3c84b85df088$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $86af3c84b85df088$var$byteLength(string, encoding) {
    if ($86af3c84b85df088$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $86af3c84b85df088$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return $86af3c84b85df088$var$utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return $86af3c84b85df088$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $86af3c84b85df088$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
$86af3c84b85df088$var$Buffer.byteLength = $86af3c84b85df088$var$byteLength;
function $86af3c84b85df088$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return $86af3c84b85df088$var$hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return $86af3c84b85df088$var$utf8Slice(this, start, end);
        case 'ascii':
            return $86af3c84b85df088$var$asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return $86af3c84b85df088$var$latin1Slice(this, start, end);
        case 'base64':
            return $86af3c84b85df088$var$base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $86af3c84b85df088$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$86af3c84b85df088$var$Buffer.prototype._isBuffer = true;
function $86af3c84b85df088$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$86af3c84b85df088$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)$86af3c84b85df088$var$swap(this, i, i + 1);
    return this;
};
$86af3c84b85df088$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        $86af3c84b85df088$var$swap(this, i, i + 3);
        $86af3c84b85df088$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$86af3c84b85df088$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        $86af3c84b85df088$var$swap(this, i, i + 7);
        $86af3c84b85df088$var$swap(this, i + 1, i + 6);
        $86af3c84b85df088$var$swap(this, i + 2, i + 5);
        $86af3c84b85df088$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$86af3c84b85df088$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return $86af3c84b85df088$var$utf8Slice(this, 0, length);
    return $86af3c84b85df088$var$slowToString.apply(this, arguments);
};
$86af3c84b85df088$var$Buffer.prototype.toLocaleString = $86af3c84b85df088$var$Buffer.prototype.toString;
$86af3c84b85df088$var$Buffer.prototype.equals = function equals(b) {
    if (!$86af3c84b85df088$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return $86af3c84b85df088$var$Buffer.compare(this, b) === 0;
};
$86af3c84b85df088$var$Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = $86af3c84b85df088$export$f99ded8fe4b79145;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if ($86af3c84b85df088$var$customInspectSymbol) $86af3c84b85df088$var$Buffer.prototype[$86af3c84b85df088$var$customInspectSymbol] = $86af3c84b85df088$var$Buffer.prototype.inspect;
$86af3c84b85df088$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($86af3c84b85df088$var$isInstance(target, Uint8Array)) target = $86af3c84b85df088$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$86af3c84b85df088$var$Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $86af3c84b85df088$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($86af3c84b85df088$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = $86af3c84b85df088$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($86af3c84b85df088$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $86af3c84b85df088$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $86af3c84b85df088$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function $86af3c84b85df088$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
$86af3c84b85df088$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$86af3c84b85df088$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $86af3c84b85df088$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$86af3c84b85df088$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $86af3c84b85df088$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $86af3c84b85df088$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($86af3c84b85df088$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $86af3c84b85df088$var$utf8Write(buf, string, offset, length) {
    return $86af3c84b85df088$var$blitBuffer($86af3c84b85df088$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $86af3c84b85df088$var$asciiWrite(buf, string, offset, length) {
    return $86af3c84b85df088$var$blitBuffer($86af3c84b85df088$var$asciiToBytes(string), buf, offset, length);
}
function $86af3c84b85df088$var$base64Write(buf, string, offset, length) {
    return $86af3c84b85df088$var$blitBuffer($86af3c84b85df088$var$base64ToBytes(string), buf, offset, length);
}
function $86af3c84b85df088$var$ucs2Write(buf, string, offset, length) {
    return $86af3c84b85df088$var$blitBuffer($86af3c84b85df088$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$86af3c84b85df088$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return $86af3c84b85df088$var$hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return $86af3c84b85df088$var$utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return $86af3c84b85df088$var$asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return $86af3c84b85df088$var$base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $86af3c84b85df088$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
$86af3c84b85df088$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $86af3c84b85df088$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $3b390a66197d6ad3$export$6100ba28696e12de(buf);
    else return $3b390a66197d6ad3$export$6100ba28696e12de(buf.slice(start, end));
}
function $86af3c84b85df088$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $86af3c84b85df088$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $86af3c84b85df088$var$MAX_ARGUMENTS_LENGTH = 4096;
function $86af3c84b85df088$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $86af3c84b85df088$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $86af3c84b85df088$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $86af3c84b85df088$var$asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function $86af3c84b85df088$var$latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $86af3c84b85df088$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += $86af3c84b85df088$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $86af3c84b85df088$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$86af3c84b85df088$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $86af3c84b85df088$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $86af3c84b85df088$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
$86af3c84b85df088$var$Buffer.prototype.readUintLE = $86af3c84b85df088$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
$86af3c84b85df088$var$Buffer.prototype.readUintBE = $86af3c84b85df088$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
    return val;
};
$86af3c84b85df088$var$Buffer.prototype.readUint8 = $86af3c84b85df088$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$86af3c84b85df088$var$Buffer.prototype.readUint16LE = $86af3c84b85df088$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$86af3c84b85df088$var$Buffer.prototype.readUint16BE = $86af3c84b85df088$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$86af3c84b85df088$var$Buffer.prototype.readUint32LE = $86af3c84b85df088$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
$86af3c84b85df088$var$Buffer.prototype.readUint32BE = $86af3c84b85df088$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$86af3c84b85df088$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$86af3c84b85df088$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$86af3c84b85df088$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
$86af3c84b85df088$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$86af3c84b85df088$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$86af3c84b85df088$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$86af3c84b85df088$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$86af3c84b85df088$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 4, this.length);
    return $8e863f2b23ddfbc9$export$aafa59e2e03f2942(this, offset, true, 23, 4);
};
$86af3c84b85df088$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 4, this.length);
    return $8e863f2b23ddfbc9$export$aafa59e2e03f2942(this, offset, false, 23, 4);
};
$86af3c84b85df088$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 8, this.length);
    return $8e863f2b23ddfbc9$export$aafa59e2e03f2942(this, offset, true, 52, 8);
};
$86af3c84b85df088$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkOffset(offset, 8, this.length);
    return $8e863f2b23ddfbc9$export$aafa59e2e03f2942(this, offset, false, 52, 8);
};
function $86af3c84b85df088$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$86af3c84b85df088$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
$86af3c84b85df088$var$Buffer.prototype.writeUintLE = $86af3c84b85df088$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $86af3c84b85df088$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$86af3c84b85df088$var$Buffer.prototype.writeUintBE = $86af3c84b85df088$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $86af3c84b85df088$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$86af3c84b85df088$var$Buffer.prototype.writeUint8 = $86af3c84b85df088$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
$86af3c84b85df088$var$Buffer.prototype.writeUint16LE = $86af3c84b85df088$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$86af3c84b85df088$var$Buffer.prototype.writeUint16BE = $86af3c84b85df088$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$86af3c84b85df088$var$Buffer.prototype.writeUint32LE = $86af3c84b85df088$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
$86af3c84b85df088$var$Buffer.prototype.writeUint32BE = $86af3c84b85df088$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
$86af3c84b85df088$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $86af3c84b85df088$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$86af3c84b85df088$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $86af3c84b85df088$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$86af3c84b85df088$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
$86af3c84b85df088$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$86af3c84b85df088$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$86af3c84b85df088$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$86af3c84b85df088$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function $86af3c84b85df088$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function $86af3c84b85df088$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    $8e863f2b23ddfbc9$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$86af3c84b85df088$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $86af3c84b85df088$var$writeFloat(this, value, offset, true, noAssert);
};
$86af3c84b85df088$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $86af3c84b85df088$var$writeFloat(this, value, offset, false, noAssert);
};
function $86af3c84b85df088$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $86af3c84b85df088$var$checkIEEE754(buf, value, offset
    $8e863f2b23ddfbc9$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$86af3c84b85df088$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $86af3c84b85df088$var$writeDouble(this, value, offset, true, noAssert);
};
$86af3c84b85df088$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $86af3c84b85df088$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$86af3c84b85df088$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$86af3c84b85df088$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$86af3c84b85df088$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !$86af3c84b85df088$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $86af3c84b85df088$var$Buffer.isBuffer(val) ? val : $86af3c84b85df088$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $86af3c84b85df088$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $86af3c84b85df088$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($86af3c84b85df088$var$INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function $86af3c84b85df088$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function $86af3c84b85df088$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function $86af3c84b85df088$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $86af3c84b85df088$var$base64ToBytes(str) {
    return $3b390a66197d6ad3$export$d622b2ad8d90c771($86af3c84b85df088$var$base64clean(str));
}
function $86af3c84b85df088$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $86af3c84b85df088$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $86af3c84b85df088$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $86af3c84b85df088$var$hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();


var $9b870bacf32d687d$require$Buffer = $86af3c84b85df088$export$a143d493d941bafc;
//Legacy pool support
if (!$parcel$global.__TYPEDARRAY_POOL) $parcel$global.__TYPEDARRAY_POOL = {
    UINT8: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    UINT16: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    UINT32: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    BIGUINT64: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    INT8: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    INT16: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    INT32: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    BIGINT64: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    FLOAT: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    DOUBLE: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    DATA: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    UINT8C: $5e1a8c3afb8a0630$exports([
        32,
        0
    ]),
    BUFFER: $5e1a8c3afb8a0630$exports([
        32,
        0
    ])
};
var $9b870bacf32d687d$var$hasUint8C = typeof Uint8ClampedArray !== 'undefined';
var $9b870bacf32d687d$var$hasBigUint64 = typeof BigUint64Array !== 'undefined';
var $9b870bacf32d687d$var$hasBigInt64 = typeof BigInt64Array !== 'undefined';
var $9b870bacf32d687d$var$POOL = $parcel$global.__TYPEDARRAY_POOL;
//Upgrade pool
if (!$9b870bacf32d687d$var$POOL.UINT8C) $9b870bacf32d687d$var$POOL.UINT8C = $5e1a8c3afb8a0630$exports([
    32,
    0
]);
if (!$9b870bacf32d687d$var$POOL.BIGUINT64) $9b870bacf32d687d$var$POOL.BIGUINT64 = $5e1a8c3afb8a0630$exports([
    32,
    0
]);
if (!$9b870bacf32d687d$var$POOL.BIGINT64) $9b870bacf32d687d$var$POOL.BIGINT64 = $5e1a8c3afb8a0630$exports([
    32,
    0
]);
if (!$9b870bacf32d687d$var$POOL.BUFFER) $9b870bacf32d687d$var$POOL.BUFFER = $5e1a8c3afb8a0630$exports([
    32,
    0
]);
//New technique: Only allocate from ArrayBufferView and Buffer
var $9b870bacf32d687d$var$DATA = $9b870bacf32d687d$var$POOL.DATA, $9b870bacf32d687d$var$BUFFER = $9b870bacf32d687d$var$POOL.BUFFER;
$9b870bacf32d687d$export$13e2de3c33d99539 = function free(array) {
    if ($9b870bacf32d687d$require$Buffer.isBuffer(array)) $9b870bacf32d687d$var$BUFFER[$5ab7ed18a300fd94$export$b9fae0bba9d9094d(array.length)].push(array);
    else {
        if (Object.prototype.toString.call(array) !== '[object ArrayBuffer]') array = array.buffer;
        if (!array) return;
        var n = array.length || array.byteLength;
        var log_n = $5ab7ed18a300fd94$export$b9fae0bba9d9094d(n) | 0;
        $9b870bacf32d687d$var$DATA[log_n].push(array);
    }
};
function $9b870bacf32d687d$var$freeArrayBuffer(buffer) {
    if (!buffer) return;
    var n = buffer.length || buffer.byteLength;
    var log_n = $5ab7ed18a300fd94$export$b9fae0bba9d9094d(n);
    $9b870bacf32d687d$var$DATA[log_n].push(buffer);
}
function $9b870bacf32d687d$var$freeTypedArray(array) {
    $9b870bacf32d687d$var$freeArrayBuffer(array.buffer);
}
$9b870bacf32d687d$export$11fc1c4b04ba842c = $9b870bacf32d687d$export$f5ead431d5bddd13 = $9b870bacf32d687d$export$d6ae10446123eda0 = $9b870bacf32d687d$export$ef42cc2a8a64e60c = $9b870bacf32d687d$export$e0d7dff56fa02f46 = $9b870bacf32d687d$export$badf6ea6e46c4075 = $9b870bacf32d687d$export$971146dcff607408 = $9b870bacf32d687d$export$95286cac6fe72f57 = $9b870bacf32d687d$export$781125fcc60e6b35 = $9b870bacf32d687d$export$faf8b381a7d1f026 = $9b870bacf32d687d$export$c26a3648f9f53f6c = $9b870bacf32d687d$export$eb497d924a09cc2c = $9b870bacf32d687d$export$73cdf697b53baa = $9b870bacf32d687d$export$b2756c99e0338993 = $9b870bacf32d687d$var$freeTypedArray;
$9b870bacf32d687d$export$9d0c804f255d59e1 = $9b870bacf32d687d$var$freeArrayBuffer;
$9b870bacf32d687d$export$a24fefa6ccae86ec = function freeBuffer(array) {
    $9b870bacf32d687d$var$BUFFER[$5ab7ed18a300fd94$export$b9fae0bba9d9094d(array.length)].push(array);
};
$9b870bacf32d687d$export$6fa553f58a2a31c2 = function malloc(n, dtype) {
    if (dtype === undefined || dtype === 'arraybuffer') return $9b870bacf32d687d$var$mallocArrayBuffer(n);
    else switch(dtype){
        case 'uint8':
            return $9b870bacf32d687d$var$mallocUint8(n);
        case 'uint16':
            return $9b870bacf32d687d$var$mallocUint16(n);
        case 'uint32':
            return $9b870bacf32d687d$var$mallocUint32(n);
        case 'int8':
            return $9b870bacf32d687d$var$mallocInt8(n);
        case 'int16':
            return $9b870bacf32d687d$var$mallocInt16(n);
        case 'int32':
            return $9b870bacf32d687d$var$mallocInt32(n);
        case 'float':
        case 'float32':
            return $9b870bacf32d687d$var$mallocFloat(n);
        case 'double':
        case 'float64':
            return $9b870bacf32d687d$var$mallocDouble(n);
        case 'uint8_clamped':
            return $9b870bacf32d687d$var$mallocUint8Clamped(n);
        case 'bigint64':
            return $9b870bacf32d687d$var$mallocBigInt64(n);
        case 'biguint64':
            return $9b870bacf32d687d$var$mallocBigUint64(n);
        case 'buffer':
            return $9b870bacf32d687d$var$mallocBuffer(n);
        case 'data':
        case 'dataview':
            return $9b870bacf32d687d$var$mallocDataView(n);
        default:
            return null;
    }
    return null;
};
function $9b870bacf32d687d$var$mallocArrayBuffer(n) {
    var n = $5ab7ed18a300fd94$export$f0d90cf68bd426eb(n);
    var log_n = $5ab7ed18a300fd94$export$b9fae0bba9d9094d(n);
    var d = $9b870bacf32d687d$var$DATA[log_n];
    if (d.length > 0) return d.pop();
    return new ArrayBuffer(n);
}
$9b870bacf32d687d$export$87c88a877180cdad = $9b870bacf32d687d$var$mallocArrayBuffer;
function $9b870bacf32d687d$var$mallocUint8(n) {
    return new Uint8Array($9b870bacf32d687d$var$mallocArrayBuffer(n), 0, n);
}
$9b870bacf32d687d$export$4fc11d1e7c095d9c = $9b870bacf32d687d$var$mallocUint8;
function $9b870bacf32d687d$var$mallocUint16(n) {
    return new Uint16Array($9b870bacf32d687d$var$mallocArrayBuffer(2 * n), 0, n);
}
$9b870bacf32d687d$export$72dbf0325fb0f6aa = $9b870bacf32d687d$var$mallocUint16;
function $9b870bacf32d687d$var$mallocUint32(n) {
    return new Uint32Array($9b870bacf32d687d$var$mallocArrayBuffer(4 * n), 0, n);
}
$9b870bacf32d687d$export$5a2d51bea84dc88a = $9b870bacf32d687d$var$mallocUint32;
function $9b870bacf32d687d$var$mallocInt8(n) {
    return new Int8Array($9b870bacf32d687d$var$mallocArrayBuffer(n), 0, n);
}
$9b870bacf32d687d$export$8e4b75dc6bfe3d87 = $9b870bacf32d687d$var$mallocInt8;
function $9b870bacf32d687d$var$mallocInt16(n) {
    return new Int16Array($9b870bacf32d687d$var$mallocArrayBuffer(2 * n), 0, n);
}
$9b870bacf32d687d$export$97e0aa7cbfa04c72 = $9b870bacf32d687d$var$mallocInt16;
function $9b870bacf32d687d$var$mallocInt32(n) {
    return new Int32Array($9b870bacf32d687d$var$mallocArrayBuffer(4 * n), 0, n);
}
$9b870bacf32d687d$export$bf19141f00438a2e = $9b870bacf32d687d$var$mallocInt32;
function $9b870bacf32d687d$var$mallocFloat(n) {
    return new Float32Array($9b870bacf32d687d$var$mallocArrayBuffer(4 * n), 0, n);
}
$9b870bacf32d687d$export$9492a022692715cc = $9b870bacf32d687d$export$d0434a350fe26016 = $9b870bacf32d687d$var$mallocFloat;
function $9b870bacf32d687d$var$mallocDouble(n) {
    return new Float64Array($9b870bacf32d687d$var$mallocArrayBuffer(8 * n), 0, n);
}
$9b870bacf32d687d$export$c0265c4abfd8544d = $9b870bacf32d687d$export$54d221d78667dc5b = $9b870bacf32d687d$var$mallocDouble;
function $9b870bacf32d687d$var$mallocUint8Clamped(n) {
    if ($9b870bacf32d687d$var$hasUint8C) return new Uint8ClampedArray($9b870bacf32d687d$var$mallocArrayBuffer(n), 0, n);
    else return $9b870bacf32d687d$var$mallocUint8(n);
}
$9b870bacf32d687d$export$a917895a033466e4 = $9b870bacf32d687d$var$mallocUint8Clamped;
function $9b870bacf32d687d$var$mallocBigUint64(n) {
    if ($9b870bacf32d687d$var$hasBigUint64) return new BigUint64Array($9b870bacf32d687d$var$mallocArrayBuffer(8 * n), 0, n);
    else return null;
}
$9b870bacf32d687d$export$3caddc78357f3843 = $9b870bacf32d687d$var$mallocBigUint64;
function $9b870bacf32d687d$var$mallocBigInt64(n) {
    if ($9b870bacf32d687d$var$hasBigInt64) return new BigInt64Array($9b870bacf32d687d$var$mallocArrayBuffer(8 * n), 0, n);
    else return null;
}
$9b870bacf32d687d$export$31be42ebae36d419 = $9b870bacf32d687d$var$mallocBigInt64;
function $9b870bacf32d687d$var$mallocDataView(n) {
    return new DataView($9b870bacf32d687d$var$mallocArrayBuffer(n), 0, n);
}
$9b870bacf32d687d$export$101cb185aa94caed = $9b870bacf32d687d$var$mallocDataView;
function $9b870bacf32d687d$var$mallocBuffer(n) {
    n = $5ab7ed18a300fd94$export$f0d90cf68bd426eb(n);
    var log_n = $5ab7ed18a300fd94$export$b9fae0bba9d9094d(n);
    var cache = $9b870bacf32d687d$var$BUFFER[log_n];
    if (cache.length > 0) return cache.pop();
    return new $9b870bacf32d687d$require$Buffer(n);
}
$9b870bacf32d687d$export$76498f1e097fe8a6 = $9b870bacf32d687d$var$mallocBuffer;
$9b870bacf32d687d$export$d2adf65b87e47523 = function clearCache() {
    for(var i = 0; i < 32; ++i){
        $9b870bacf32d687d$var$POOL.UINT8[i].length = 0;
        $9b870bacf32d687d$var$POOL.UINT16[i].length = 0;
        $9b870bacf32d687d$var$POOL.UINT32[i].length = 0;
        $9b870bacf32d687d$var$POOL.INT8[i].length = 0;
        $9b870bacf32d687d$var$POOL.INT16[i].length = 0;
        $9b870bacf32d687d$var$POOL.INT32[i].length = 0;
        $9b870bacf32d687d$var$POOL.FLOAT[i].length = 0;
        $9b870bacf32d687d$var$POOL.DOUBLE[i].length = 0;
        $9b870bacf32d687d$var$POOL.BIGUINT64[i].length = 0;
        $9b870bacf32d687d$var$POOL.BIGINT64[i].length = 0;
        $9b870bacf32d687d$var$POOL.UINT8C[i].length = 0;
        $9b870bacf32d687d$var$DATA[i].length = 0;
        $9b870bacf32d687d$var$BUFFER[i].length = 0;
    }
};


var $c2ceb8cf7bd3d87f$exports = {};

function $c2ceb8cf7bd3d87f$var$fft(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr) {
    dir |= 0;
    nrows |= 0;
    ncols |= 0;
    x_ptr |= 0;
    y_ptr |= 0;
    if ($5ab7ed18a300fd94$export$eb50b9c078eb6ae7(ncols)) $c2ceb8cf7bd3d87f$var$fftRadix2(dir, nrows, ncols, buffer, x_ptr, y_ptr);
    else $c2ceb8cf7bd3d87f$var$fftBluestein(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr);
}
$c2ceb8cf7bd3d87f$exports = $c2ceb8cf7bd3d87f$var$fft;
function $c2ceb8cf7bd3d87f$var$scratchMemory(n) {
    if ($5ab7ed18a300fd94$export$eb50b9c078eb6ae7(n)) return 0;
    return 2 * n + 4 * $5ab7ed18a300fd94$export$f0d90cf68bd426eb(2 * n + 1);
}
$c2ceb8cf7bd3d87f$exports.scratchMemory = $c2ceb8cf7bd3d87f$var$scratchMemory;
//Radix 2 FFT Adapted from Paul Bourke's C Implementation
function $c2ceb8cf7bd3d87f$var$fftRadix2(dir, nrows, ncols, buffer, x_ptr, y_ptr) {
    dir |= 0;
    nrows |= 0;
    ncols |= 0;
    x_ptr |= 0;
    y_ptr |= 0;
    var nn, m, i, i1, j, k, i2, l, l1, l2;
    var c1, c2, t, t1, t2, u1, u2, z, row, a, b, c, d, k1, k2, k3;
    // Calculate the number of points
    nn = ncols;
    m = $5ab7ed18a300fd94$export$b9fae0bba9d9094d(nn);
    for(row = 0; row < nrows; ++row){
        // Do the bit reversal
        i2 = nn >> 1;
        j = 0;
        for(i = 0; i < nn - 1; i++){
            if (i < j) {
                t = buffer[x_ptr + i];
                buffer[x_ptr + i] = buffer[x_ptr + j];
                buffer[x_ptr + j] = t;
                t = buffer[y_ptr + i];
                buffer[y_ptr + i] = buffer[y_ptr + j];
                buffer[y_ptr + j] = t;
            }
            k = i2;
            while(k <= j){
                j -= k;
                k >>= 1;
            }
            j += k;
        }
        // Compute the FFT
        c1 = -1;
        c2 = 0;
        l2 = 1;
        for(l = 0; l < m; l++){
            l1 = l2;
            l2 <<= 1;
            u1 = 1;
            u2 = 0;
            for(j = 0; j < l1; j++){
                for(i = j; i < nn; i += l2){
                    i1 = i + l1;
                    a = buffer[x_ptr + i1];
                    b = buffer[y_ptr + i1];
                    c = buffer[x_ptr + i];
                    d = buffer[y_ptr + i];
                    k1 = u1 * (a + b);
                    k2 = a * (u2 - u1);
                    k3 = b * (u1 + u2);
                    t1 = k1 - k3;
                    t2 = k1 + k2;
                    buffer[x_ptr + i1] = c - t1;
                    buffer[y_ptr + i1] = d - t2;
                    buffer[x_ptr + i] += t1;
                    buffer[y_ptr + i] += t2;
                }
                k1 = c1 * (u1 + u2);
                k2 = u1 * (c2 - c1);
                k3 = u2 * (c1 + c2);
                u1 = k1 - k3;
                u2 = k1 + k2;
            }
            c2 = Math.sqrt((1 - c1) / 2);
            if (dir < 0) c2 = -c2;
            c1 = Math.sqrt((1 + c1) / 2);
        }
        // Scaling for inverse transform
        if (dir < 0) {
            var scale_f = 1 / nn;
            for(i = 0; i < nn; i++){
                buffer[x_ptr + i] *= scale_f;
                buffer[y_ptr + i] *= scale_f;
            }
        }
        // Advance pointers
        x_ptr += ncols;
        y_ptr += ncols;
    }
}
// Use Bluestein algorithm for npot FFTs
// Scratch memory required:  2 * ncols + 4 * bits.nextPow2(2*ncols + 1)
function $c2ceb8cf7bd3d87f$var$fftBluestein(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr) {
    dir |= 0;
    nrows |= 0;
    ncols |= 0;
    x_ptr |= 0;
    y_ptr |= 0;
    scratch_ptr |= 0;
    // Initialize tables
    var m = $5ab7ed18a300fd94$export$f0d90cf68bd426eb(2 * ncols + 1), cos_ptr = scratch_ptr, sin_ptr = cos_ptr + ncols, xs_ptr = sin_ptr + ncols, ys_ptr = xs_ptr + m, cft_ptr = ys_ptr + m, sft_ptr = cft_ptr + m, w = -dir * Math.PI / ncols, row, a, b, c, d, k1, k2, k3, i;
    for(i = 0; i < ncols; ++i){
        a = w * (i * i % (ncols * 2));
        c = Math.cos(a);
        d = Math.sin(a);
        buffer[cft_ptr + (m - i)] = buffer[cft_ptr + i] = buffer[cos_ptr + i] = c;
        buffer[sft_ptr + (m - i)] = buffer[sft_ptr + i] = buffer[sin_ptr + i] = d;
    }
    for(i = ncols; i <= m - ncols; ++i)buffer[cft_ptr + i] = 0;
    for(i = ncols; i <= m - ncols; ++i)buffer[sft_ptr + i] = 0;
    $c2ceb8cf7bd3d87f$var$fftRadix2(1, 1, m, buffer, cft_ptr, sft_ptr);
    //Compute scale factor
    if (dir < 0) w = 1 / ncols;
    else w = 1;
    //Handle direction
    for(row = 0; row < nrows; ++row){
        // Copy row into scratch memory, multiply weights
        for(i = 0; i < ncols; ++i){
            a = buffer[x_ptr + i];
            b = buffer[y_ptr + i];
            c = buffer[cos_ptr + i];
            d = -buffer[sin_ptr + i];
            k1 = c * (a + b);
            k2 = a * (d - c);
            k3 = b * (c + d);
            buffer[xs_ptr + i] = k1 - k3;
            buffer[ys_ptr + i] = k1 + k2;
        }
        //Zero out the rest
        for(i = ncols; i < m; ++i)buffer[xs_ptr + i] = 0;
        for(i = ncols; i < m; ++i)buffer[ys_ptr + i] = 0;
        // FFT buffer
        $c2ceb8cf7bd3d87f$var$fftRadix2(1, 1, m, buffer, xs_ptr, ys_ptr);
        // Apply multiplier
        for(i = 0; i < m; ++i){
            a = buffer[xs_ptr + i];
            b = buffer[ys_ptr + i];
            c = buffer[cft_ptr + i];
            d = buffer[sft_ptr + i];
            k1 = c * (a + b);
            k2 = a * (d - c);
            k3 = b * (c + d);
            buffer[xs_ptr + i] = k1 - k3;
            buffer[ys_ptr + i] = k1 + k2;
        }
        // Inverse FFT buffer
        $c2ceb8cf7bd3d87f$var$fftRadix2(-1, 1, m, buffer, xs_ptr, ys_ptr);
        // Copy result back into x/y
        for(i = 0; i < ncols; ++i){
            a = buffer[xs_ptr + i];
            b = buffer[ys_ptr + i];
            c = buffer[cos_ptr + i];
            d = -buffer[sin_ptr + i];
            k1 = c * (a + b);
            k2 = a * (d - c);
            k3 = b * (c + d);
            buffer[x_ptr + i] = w * (k1 - k3);
            buffer[y_ptr + i] = w * (k1 + k2);
        }
        x_ptr += ncols;
        y_ptr += ncols;
    }
}


function $959c399aa04d5b22$var$ndfft(dir, x, y) {
    var shape = x.shape, d = shape.length, size = 1, stride = new Array(d), pad = 0, i, j;
    for(i = d - 1; i >= 0; --i){
        stride[i] = size;
        size *= shape[i];
        pad = Math.max(pad, $c2ceb8cf7bd3d87f$exports.scratchMemory(shape[i]));
        if (x.shape[i] !== y.shape[i]) throw new Error('Shape mismatch, real and imaginary arrays must have same size');
    }
    var buf_size = 4 * size + pad;
    var buffer;
    if (x.dtype === 'array' || x.dtype === 'float64' || x.dtype === 'custom') buffer = $9b870bacf32d687d$export$54d221d78667dc5b(buf_size);
    else buffer = $9b870bacf32d687d$export$d0434a350fe26016(buf_size);
    var x1 = $9c471cb5cd11f802$exports(buffer, shape.slice(0), stride, 0), y1 = $9c471cb5cd11f802$exports(buffer, shape.slice(0), stride.slice(0), size), x2 = $9c471cb5cd11f802$exports(buffer, shape.slice(0), stride.slice(0), 2 * size), y2 = $9c471cb5cd11f802$exports(buffer, shape.slice(0), stride.slice(0), 3 * size), tmp, n, s1, s2, scratch_ptr = 4 * size;
    //Copy into x1/y1
    $1cb49d2bf43ba42b$exports.assign(x1, x);
    $1cb49d2bf43ba42b$exports.assign(y1, y);
    for(i = d - 1; i >= 0; --i){
        $c2ceb8cf7bd3d87f$exports(dir, size / shape[i], shape[i], buffer, x1.offset, y1.offset, scratch_ptr);
        if (i === 0) break;
        //Compute new stride for x2/y2
        n = 1;
        s1 = x2.stride;
        s2 = y2.stride;
        for(j = i - 1; j < d; ++j){
            s2[j] = s1[j] = n;
            n *= shape[j];
        }
        for(j = i - 2; j >= 0; --j){
            s2[j] = s1[j] = n;
            n *= shape[j];
        }
        //Transpose
        $1cb49d2bf43ba42b$exports.assign(x2, x1);
        $1cb49d2bf43ba42b$exports.assign(y2, y1);
        //Swap buffers
        tmp = x1;
        x1 = x2;
        x2 = tmp;
        tmp = y1;
        y1 = y2;
        y2 = tmp;
    }
    //Copy result back into x
    $1cb49d2bf43ba42b$exports.assign(x, x1);
    $1cb49d2bf43ba42b$exports.assign(y, y1);
    $9b870bacf32d687d$export$13e2de3c33d99539(buffer);
}
$959c399aa04d5b22$exports = $959c399aa04d5b22$var$ndfft;


"use strict";
var $3a8c7a0e8ba02f7c$export$2e2bcd8739ae039 = {
    printThreshold: 7,
    nFloatingValues: 5
};


"use strict";
var $d8385de2fa709eaa$export$2e2bcd8739ae039 = {
    int8: Int8Array,
    int16: Int16Array,
    int32: Int32Array,
    uint8: Uint8Array,
    uint16: Uint16Array,
    uint32: Uint32Array,
    float32: Float32Array,
    float64: Float64Array,
    uint8_clamped: Uint8ClampedArray,
    array: Array
};






var $22a83ea08428b335$exports = {};
"use strict";
$22a83ea08428b335$exports = $22a83ea08428b335$var$matrixProduct;
var $bce9b2484e232fe2$exports = {};
"use strict";
$bce9b2484e232fe2$exports = $bce9b2484e232fe2$var$generateMatrixProduct;
var $bce9b2484e232fe2$var$BLOCK_SIZE = 32;
function $bce9b2484e232fe2$var$unpackOrder(order) {
    return order === "r" ? [
        1,
        0
    ] : [
        0,
        1
    ];
}
function $bce9b2484e232fe2$var$unpackShape(name, type) {
    if (type[1] === "native") return [
        name,
        "d0=",
        name,
        ".length,",
        name,
        "d1=",
        name,
        "[0].length,"
    ].join("");
    else return [
        name,
        "d0=",
        name,
        ".shape[0],",
        name,
        "d1=",
        name,
        ".shape[1],",
        name,
        "s0=",
        name,
        ".stride[0],",
        name,
        "s1=",
        name,
        ".stride[1],",
        name,
        "o=",
        name,
        ".offset,",
        name,
        "d=",
        name,
        ".data,"
    ].join("");
}
function $bce9b2484e232fe2$var$start(order, name, type, i, j, w) {
    var code = [];
    if (type[1] === "native") {
        if (order[0]) {
            if (i) code.push("var ", name, "p=", name, "[", i, "];");
            else code.push("var ", name, "p=", name, "[0];");
        }
    } else {
        if (i && j) {
            if (w) code.push("var ", name, "t0=", name, "s", order[0], ",", name, "t1=", name, "s", order[1], "-", name, "s", order[0], "*", w, ",", name, "p=", name, "o+", i, "*", name, "s0+", j, "*", name, "s1;");
            else code.push("var ", name, "t0=", name, "s", order[0], ",", name, "p=", name, "o+", i, "*", name, "s0+", j, "*", name, "s1;");
        } else if (i) code.push("var ", name, "t0=", name, "s", order[0], ",", name, "p=", name, "o+", i, "*", name, "s0;");
        else if (j) code.push("var ", name, "t0=", name, "s", order[0], ",", name, "p=", name, "o+", j, "*", name, "s1;");
        else code.push("var ", name, "t0=", name, "s", order[0], ",", name, "t1=", name, "s", order[1], "-", name, "s", order[0], "*", name, "d", order[0], ",", name, "p=", name, "o;");
    }
    return code;
}
function $bce9b2484e232fe2$var$walk(order, name, type, d, i) {
    var code = [];
    if (type[1] === "native") {
        if (order[0] && d === 1) code.push(name, "p=", name, "[", i, "+1]");
    } else code.push(name, "p+=", name, "t", d, ";");
    return code;
}
function $bce9b2484e232fe2$var$write(order, name, type, i, j, w) {
    var code = [];
    if (type[1] === "native") {
        if (order[0]) code.push(name, "p[", j, "]=", w, ";");
        else code.push(name, "[", i, "][", j, "]=", w, ";");
    } else if (type[1] === "generic") code.push(name, "d.set(", name, "p,", w, ");");
    else code.push(name, "d[", name, "p]=", w, ";");
    return code;
}
function $bce9b2484e232fe2$var$read(order, name, type, i, j) {
    var code = [];
    if (type[1] === "native") {
        if (order[0]) code.push(name, "p[", j, "]");
        else code.push(name, "[", i, "][", j, "]");
    } else if (type[1] === "generic") code.push(name, "d.get(", name, "p)");
    else code.push(name, "d[", name, "p]");
    return code.join("");
}
function $bce9b2484e232fe2$var$generateRowColumnLoop(oType, aType, bType, useAlpha, useBeta) {
    var code = [];
    var oOrd = oType[0] === "r" ? [
        1,
        0
    ] : [
        0,
        1
    ], aOrd = [
        1,
        0
    ], bOrd = [
        0,
        1
    ];
    var symbols = [
        "i",
        "j"
    ];
    code.push.apply(code, $bce9b2484e232fe2$var$start(oOrd, "o", oType));
    if (oOrd[1]) {
        code.push("for(j=0;j<od1;++j){");
        code.push("for(i=0;i<od0;++i){");
    } else {
        code.push("for(i=0;i<od0;++i){");
        code.push("for(j=0;j<od1;++j){");
    }
    code.push.apply(code, $bce9b2484e232fe2$var$start(aOrd, "a", aType, "i"));
    code.push.apply(code, $bce9b2484e232fe2$var$start(bOrd, "b", bType, undefined, "j"));
    code.push("var r=0.0;", "for(k=0;k<ad1;++k){", "r+=", $bce9b2484e232fe2$var$read(aOrd, "a", aType, "i", "k"), "*", $bce9b2484e232fe2$var$read(bOrd, "b", bType, "k", "j"), ";");
    //Terminate k loop
    code.push.apply(code, $bce9b2484e232fe2$var$walk(aOrd, "a", aType, 0, "k"));
    code.push.apply(code, $bce9b2484e232fe2$var$walk(bOrd, "b", bType, 0, "k"));
    code.push("}");
    //Write r to output
    if (useAlpha) code.push("r*=A;");
    if (useBeta) code.push("r+=B*", $bce9b2484e232fe2$var$read(oOrd, "o", oType, "i", "j"), ";");
    code.push.apply(code, $bce9b2484e232fe2$var$write(oOrd, "o", oType, "i", "j", "r"));
    //Terminate j loop loop
    code.push.apply(code, $bce9b2484e232fe2$var$walk(oOrd, "o", oType, 0, symbols[1]));
    code.push("}");
    //Terminate i loop
    code.push.apply(code, $bce9b2484e232fe2$var$walk(oOrd, "o", oType, 1, symbols[0]));
    code.push("}");
    return code;
}
function $bce9b2484e232fe2$var$generateBetaPass(oType, useBeta) {
    var code = [];
    var oOrd = oType[0] === "r" ? [
        1,
        0
    ] : [
        0,
        1
    ], symbols;
    if (useBeta) code.push("if(B!==1.0){");
    code.push.apply(code, $bce9b2484e232fe2$var$start(oOrd, "o", oType));
    if (oOrd[0]) {
        code.push("for(i=0;i<od0;++i){for(j=0;j<od1;++j){");
        symbols = [
            "i",
            "j"
        ];
    } else {
        code.push("for(j=0;j<od1;++j){for(i=0;i<od0;++i){");
        symbols = [
            "j",
            "i"
        ];
    }
    if (useBeta) code.push.apply(code, $bce9b2484e232fe2$var$write(oOrd, "o", oType, "i", "j", "B*" + $bce9b2484e232fe2$var$read(oOrd, "o", oType, "i", "j")));
    else code.push.apply(code, $bce9b2484e232fe2$var$write(oOrd, "o", oType, "i", "j", "0"));
    code.push.apply(code, $bce9b2484e232fe2$var$walk(oOrd, "o", oType, 0, symbols[1]));
    code.push("}");
    code.push.apply(code, $bce9b2484e232fe2$var$walk(oOrd, "o", oType, 1, symbols[0]));
    code.push("}");
    if (useBeta) code.push("}");
    return code;
}
function $bce9b2484e232fe2$var$generateBlockLoop(oType, aType, bType, useAlpha, useBeta) {
    var code = [];
    var shapes = [
        "od0",
        "od1",
        "ad1"
    ];
    var oOrd = [
        1,
        0
    ];
    var aOrd = [
        1,
        0
    ];
    var bOrd = [
        0,
        1
    ];
    //Do pass over output to zero it out
    code.push.apply(code, $bce9b2484e232fe2$var$generateBetaPass(oType, useBeta));
    for(var i = 0; i < 3; ++i)code.push("for(var i", i, "=", shapes[i], ";i", i, ">0;){", "var w", i, "=", $bce9b2484e232fe2$var$BLOCK_SIZE, ";", "if(i", i, "<", $bce9b2484e232fe2$var$BLOCK_SIZE, "){", "w", i, "=i", i, ";", "i", i, "=0;", "}else{", "i", i, "-=", $bce9b2484e232fe2$var$BLOCK_SIZE, ";", "}");
    code.push.apply(code, $bce9b2484e232fe2$var$start(oOrd, "o", oType, "i0", "i1", "w1"));
    code.push("for(i=0;i<w0;++i){\
for(j=0;j<w1;++j){\
var r=0.0;");
    code.push.apply(code, $bce9b2484e232fe2$var$start(aOrd, "a", aType, "(i0+i)", "i2"));
    code.push.apply(code, $bce9b2484e232fe2$var$start(bOrd, "b", bType, "i2", "(i1+j)"));
    code.push("for(k=0;k<w2;++k){");
    code.push("r+=", $bce9b2484e232fe2$var$read(aOrd, "a", aType, "(i0+i)", "(i2+k)"), "*", $bce9b2484e232fe2$var$read(bOrd, "b", bType, "(i2+k)", "(i1+j)"), ";");
    //Close off k-loop
    code.push.apply(code, $bce9b2484e232fe2$var$walk(aOrd, "a", aType, 0, "(i2+k)"));
    code.push.apply(code, $bce9b2484e232fe2$var$walk(bOrd, "b", bType, 0, "(i2+k)"));
    code.push("}");
    //Write r back to output array
    var sym = "r";
    if (useAlpha) sym = "A*r";
    code.push.apply(code, $bce9b2484e232fe2$var$write(oOrd, "o", oType, "(i0+i)", "(i1+j)", sym + "+" + $bce9b2484e232fe2$var$read(oOrd, "o", oType, "(i0+i)", "(i1+j)")));
    //Close off j-loop
    code.push.apply(code, $bce9b2484e232fe2$var$walk(oOrd, "o", oType, 0, "(i1+j)"));
    code.push("}");
    //Close off i-loop
    code.push.apply(code, $bce9b2484e232fe2$var$walk(oOrd, "o", oType, 1, "(i0+i)"));
    code.push("}}}}");
    return code;
}
function $bce9b2484e232fe2$var$generateMatrixProduct(outType, aType, bType, useAlpha, useBeta) {
    var funcName = [
        "gemm",
        outType[0],
        outType[1],
        "a",
        aType[0],
        aType[1],
        "b",
        bType[0],
        bType[1],
        useAlpha ? "alpha" : "",
        useBeta ? "beta" : ""
    ].join("");
    var code = [
        "function ",
        funcName,
        "(o,a,b,A,B){",
        "var ",
        $bce9b2484e232fe2$var$unpackShape("o", outType),
        $bce9b2484e232fe2$var$unpackShape("a", aType),
        $bce9b2484e232fe2$var$unpackShape("b", bType),
        "i,j,k;"
    ];
    if (aType[0] === "r" && bType[0] === "c") code.push.apply(code, $bce9b2484e232fe2$var$generateRowColumnLoop(outType, aType, bType, useAlpha, useBeta));
    else code.push.apply(code, $bce9b2484e232fe2$var$generateBlockLoop(outType, aType, bType, useAlpha, useBeta));
    code.push("}return ", funcName);
    //Compile function
    var proc = new Function(code.join(""));
    return proc();
}


function $22a83ea08428b335$var$shape(arr) {
    if (Array.isArray(arr)) return [
        arr.length,
        arr[0].length
    ];
    else return arr.shape;
}
function $22a83ea08428b335$var$checkShapes(out, a, b) {
    var os = $22a83ea08428b335$var$shape(out);
    var as = $22a83ea08428b335$var$shape(a);
    var bs = $22a83ea08428b335$var$shape(b);
    if (os[0] !== as[0] || os[1] !== bs[1] || as[1] !== bs[0]) throw new Error("Mismatched array shapes for matrix product");
}
function $22a83ea08428b335$var$classifyType(m) {
    if (Array.isArray(m)) {
        if (Array.isArray(m)) return [
            "r",
            "native"
        ];
    } else if (m.shape && m.shape.length === 2) {
        if (m.order[0]) return [
            "r",
            m.dtype
        ];
        else return [
            "c",
            m.dtype
        ];
    }
    throw new Error("Unrecognized data type");
}
var $22a83ea08428b335$var$CACHE = {
};
function $22a83ea08428b335$var$matrixProduct(out, a, b, alpha, beta) {
    if (alpha === undefined) alpha = 1;
    if (beta === undefined) beta = 0;
    var useAlpha = alpha !== 1;
    var useBeta = beta !== 0;
    var outType = $22a83ea08428b335$var$classifyType(out);
    var aType = $22a83ea08428b335$var$classifyType(a);
    var bType = $22a83ea08428b335$var$classifyType(b);
    $22a83ea08428b335$var$checkShapes(out, a, b);
    var typeSig = [
        outType,
        aType,
        bType,
        useAlpha,
        useBeta
    ].join(":");
    var proc = $22a83ea08428b335$var$CACHE[typeSig];
    if (!proc) proc = $22a83ea08428b335$var$CACHE[typeSig] = $bce9b2484e232fe2$exports(outType, aType, bType, useAlpha, useBeta);
    return proc(out, a, b, alpha, beta);
}




var $d4f13812fe9c6457$exports = {};
var $307a85b905be3022$exports = {};
// shim for using process in browser
var $307a85b905be3022$var$process = $307a85b905be3022$exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $307a85b905be3022$var$cachedSetTimeout;
var $307a85b905be3022$var$cachedClearTimeout;
function $307a85b905be3022$var$defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function $307a85b905be3022$var$defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') $307a85b905be3022$var$cachedSetTimeout = setTimeout;
        else $307a85b905be3022$var$cachedSetTimeout = $307a85b905be3022$var$defaultSetTimout;
    } catch (e) {
        $307a85b905be3022$var$cachedSetTimeout = $307a85b905be3022$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') $307a85b905be3022$var$cachedClearTimeout = clearTimeout;
        else $307a85b905be3022$var$cachedClearTimeout = $307a85b905be3022$var$defaultClearTimeout;
    } catch (e1) {
        $307a85b905be3022$var$cachedClearTimeout = $307a85b905be3022$var$defaultClearTimeout;
    }
})();
function $307a85b905be3022$var$runTimeout(fun) {
    if ($307a85b905be3022$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($307a85b905be3022$var$cachedSetTimeout === $307a85b905be3022$var$defaultSetTimout || !$307a85b905be3022$var$cachedSetTimeout) && setTimeout) {
        $307a85b905be3022$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $307a85b905be3022$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $307a85b905be3022$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $307a85b905be3022$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $307a85b905be3022$var$runClearTimeout(marker) {
    if ($307a85b905be3022$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($307a85b905be3022$var$cachedClearTimeout === $307a85b905be3022$var$defaultClearTimeout || !$307a85b905be3022$var$cachedClearTimeout) && clearTimeout) {
        $307a85b905be3022$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $307a85b905be3022$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $307a85b905be3022$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $307a85b905be3022$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $307a85b905be3022$var$queue = [];
var $307a85b905be3022$var$draining = false;
var $307a85b905be3022$var$currentQueue;
var $307a85b905be3022$var$queueIndex = -1;
function $307a85b905be3022$var$cleanUpNextTick() {
    if (!$307a85b905be3022$var$draining || !$307a85b905be3022$var$currentQueue) return;
    $307a85b905be3022$var$draining = false;
    if ($307a85b905be3022$var$currentQueue.length) $307a85b905be3022$var$queue = $307a85b905be3022$var$currentQueue.concat($307a85b905be3022$var$queue);
    else $307a85b905be3022$var$queueIndex = -1;
    if ($307a85b905be3022$var$queue.length) $307a85b905be3022$var$drainQueue();
}
function $307a85b905be3022$var$drainQueue() {
    if ($307a85b905be3022$var$draining) return;
    var timeout = $307a85b905be3022$var$runTimeout($307a85b905be3022$var$cleanUpNextTick);
    $307a85b905be3022$var$draining = true;
    var len = $307a85b905be3022$var$queue.length;
    while(len){
        $307a85b905be3022$var$currentQueue = $307a85b905be3022$var$queue;
        $307a85b905be3022$var$queue = [];
        while(++$307a85b905be3022$var$queueIndex < len)if ($307a85b905be3022$var$currentQueue) $307a85b905be3022$var$currentQueue[$307a85b905be3022$var$queueIndex].run();
        $307a85b905be3022$var$queueIndex = -1;
        len = $307a85b905be3022$var$queue.length;
    }
    $307a85b905be3022$var$currentQueue = null;
    $307a85b905be3022$var$draining = false;
    $307a85b905be3022$var$runClearTimeout(timeout);
}
$307a85b905be3022$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $307a85b905be3022$var$queue.push(new $307a85b905be3022$var$Item(fun, args));
    if ($307a85b905be3022$var$queue.length === 1 && !$307a85b905be3022$var$draining) $307a85b905be3022$var$runTimeout($307a85b905be3022$var$drainQueue);
};
// v8 likes predictible objects
function $307a85b905be3022$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$307a85b905be3022$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$307a85b905be3022$var$process.title = 'browser';
$307a85b905be3022$var$process.browser = true;
$307a85b905be3022$var$process.env = {
};
$307a85b905be3022$var$process.argv = [];
$307a85b905be3022$var$process.version = ''; // empty string to avoid regexp issues
$307a85b905be3022$var$process.versions = {
};
function $307a85b905be3022$var$noop() {
}
$307a85b905be3022$var$process.on = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.addListener = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.once = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.off = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.removeListener = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.removeAllListeners = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.emit = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.prependListener = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.prependOnceListener = $307a85b905be3022$var$noop;
$307a85b905be3022$var$process.listeners = function(name) {
    return [];
};
$307a85b905be3022$var$process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
$307a85b905be3022$var$process.cwd = function() {
    return '/';
};
$307a85b905be3022$var$process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
$307a85b905be3022$var$process.umask = function() {
    return 0;
};


// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var $d4f13812fe9c6457$var$getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {
    };
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var $d4f13812fe9c6457$var$formatRegExp = /%[sdj%]/g;
$d4f13812fe9c6457$exports.format = function(f) {
    if (!$d4f13812fe9c6457$var$isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push($d4f13812fe9c6457$var$inspect(arguments[i]));
        return objects.join(' ');
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace($d4f13812fe9c6457$var$formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch(x){
            case '%s':
                return String(args[i++]);
            case '%d':
                return Number(args[i++]);
            case '%j':
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return '[Circular]';
                }
            default:
                return x;
        }
    });
    for(var x1 = args[i]; i < len; x1 = args[++i])if ($d4f13812fe9c6457$var$isNull(x1) || !$d4f13812fe9c6457$var$isObject(x1)) str += ' ' + x1;
    else str += ' ' + $d4f13812fe9c6457$var$inspect(x1);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
$d4f13812fe9c6457$exports.deprecate = function(fn, msg) {
    if (typeof $307a85b905be3022$exports !== 'undefined' && $307a85b905be3022$exports.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof $307a85b905be3022$exports === 'undefined') return function() {
        return $d4f13812fe9c6457$exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($307a85b905be3022$exports.throwDeprecation) throw new Error(msg);
            else if ($307a85b905be3022$exports.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var $d4f13812fe9c6457$var$debugs = {
};
var $d4f13812fe9c6457$var$debugEnvRegex = /^$/;
var $d4f13812fe9c6457$var$debugEnv;
$d4f13812fe9c6457$exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!$d4f13812fe9c6457$var$debugs[set]) {
        if ($d4f13812fe9c6457$var$debugEnvRegex.test(set)) {
            var pid = $307a85b905be3022$exports.pid;
            $d4f13812fe9c6457$var$debugs[set] = function() {
                var msg = $d4f13812fe9c6457$exports.format.apply($d4f13812fe9c6457$exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
            };
        } else $d4f13812fe9c6457$var$debugs[set] = function() {
        };
    }
    return $d4f13812fe9c6457$var$debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function $d4f13812fe9c6457$var$inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: $d4f13812fe9c6457$var$stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if ($d4f13812fe9c6457$var$isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    $d4f13812fe9c6457$exports._extend(ctx, opts);
    // set default options
    if ($d4f13812fe9c6457$var$isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if ($d4f13812fe9c6457$var$isUndefined(ctx.depth)) ctx.depth = 2;
    if ($d4f13812fe9c6457$var$isUndefined(ctx.colors)) ctx.colors = false;
    if ($d4f13812fe9c6457$var$isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = $d4f13812fe9c6457$var$stylizeWithColor;
    return $d4f13812fe9c6457$var$formatValue(ctx, obj, ctx.depth);
}
$d4f13812fe9c6457$exports.inspect = $d4f13812fe9c6457$var$inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
$d4f13812fe9c6457$var$inspect.colors = {
    'bold': [
        1,
        22
    ],
    'italic': [
        3,
        23
    ],
    'underline': [
        4,
        24
    ],
    'inverse': [
        7,
        27
    ],
    'white': [
        37,
        39
    ],
    'grey': [
        90,
        39
    ],
    'black': [
        30,
        39
    ],
    'blue': [
        34,
        39
    ],
    'cyan': [
        36,
        39
    ],
    'green': [
        32,
        39
    ],
    'magenta': [
        35,
        39
    ],
    'red': [
        31,
        39
    ],
    'yellow': [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
$d4f13812fe9c6457$var$inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
};
function $d4f13812fe9c6457$var$stylizeWithColor(str, styleType) {
    var style = $d4f13812fe9c6457$var$inspect.styles[styleType];
    if (style) return '\u001b[' + $d4f13812fe9c6457$var$inspect.colors[style][0] + 'm' + str + '\u001b[' + $d4f13812fe9c6457$var$inspect.colors[style][1] + 'm';
    else return str;
}
function $d4f13812fe9c6457$var$stylizeNoColor(str, styleType) {
    return str;
}
function $d4f13812fe9c6457$var$arrayToHash(array) {
    var hash = {
    };
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function $d4f13812fe9c6457$var$formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && $d4f13812fe9c6457$var$isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== $d4f13812fe9c6457$exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!$d4f13812fe9c6457$var$isString(ret)) ret = $d4f13812fe9c6457$var$formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = $d4f13812fe9c6457$var$formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = $d4f13812fe9c6457$var$arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if ($d4f13812fe9c6457$var$isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) return $d4f13812fe9c6457$var$formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if ($d4f13812fe9c6457$var$isFunction(value)) {
            var name = value.name ? ': ' + value.name : '';
            return ctx.stylize('[Function' + name + ']', 'special');
        }
        if ($d4f13812fe9c6457$var$isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        if ($d4f13812fe9c6457$var$isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), 'date');
        if ($d4f13812fe9c6457$var$isError(value)) return $d4f13812fe9c6457$var$formatError(value);
    }
    var base = '', array = false, braces = [
        '{',
        '}'
    ];
    // Make Array say that they are Array
    if ($d4f13812fe9c6457$var$isArray(value)) {
        array = true;
        braces = [
            '[',
            ']'
        ];
    }
    // Make functions say that they are functions
    if ($d4f13812fe9c6457$var$isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
    }
    // Make RegExps say that they are RegExps
    if ($d4f13812fe9c6457$var$isRegExp(value)) base = ' ' + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if ($d4f13812fe9c6457$var$isDate(value)) base = ' ' + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if ($d4f13812fe9c6457$var$isError(value)) base = ' ' + $d4f13812fe9c6457$var$formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if ($d4f13812fe9c6457$var$isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        else return ctx.stylize('[Object]', 'special');
    }
    ctx.seen.push(value);
    var output;
    if (array) output = $d4f13812fe9c6457$var$formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return $d4f13812fe9c6457$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return $d4f13812fe9c6457$var$reduceToSingleString(output, base, braces);
}
function $d4f13812fe9c6457$var$formatPrimitive(ctx, value) {
    if ($d4f13812fe9c6457$var$isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if ($d4f13812fe9c6457$var$isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
    }
    if ($d4f13812fe9c6457$var$isNumber(value)) return ctx.stylize('' + value, 'number');
    if ($d4f13812fe9c6457$var$isBoolean(value)) return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if ($d4f13812fe9c6457$var$isNull(value)) return ctx.stylize('null', 'null');
}
function $d4f13812fe9c6457$var$formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
}
function $d4f13812fe9c6457$var$formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if ($d4f13812fe9c6457$var$hasOwnProperty(value, String(i))) output.push($d4f13812fe9c6457$var$formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push('');
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push($d4f13812fe9c6457$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function $d4f13812fe9c6457$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize('[Getter/Setter]', 'special');
        else str = ctx.stylize('[Getter]', 'special');
    } else if (desc.set) str = ctx.stylize('[Setter]', 'special');
    if (!$d4f13812fe9c6457$var$hasOwnProperty(visibleKeys, key)) name = '[' + key + ']';
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if ($d4f13812fe9c6457$var$isNull(recurseTimes)) str = $d4f13812fe9c6457$var$formatValue(ctx, desc.value, null);
            else str = $d4f13812fe9c6457$var$formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf('\n') > -1) {
                if (array) str = str.split('\n').map(function(line) {
                    return '  ' + line;
                }).join('\n').substr(2);
                else str = '\n' + str.split('\n').map(function(line) {
                    return '   ' + line;
                }).join('\n');
            }
        } else str = ctx.stylize('[Circular]', 'special');
    }
    if ($d4f13812fe9c6457$var$isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, 'name');
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, 'string');
        }
    }
    return name + ': ' + str;
}
function $d4f13812fe9c6457$var$reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
parcelRequire.register("3JG5j", function(module, exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
'use strict';

var $gvZjZ = parcelRequire("gvZjZ");

var $bO6hM = parcelRequire("bO6hM");

var $cno1n = parcelRequire("cno1n");

var $8hxWk = parcelRequire("8hxWk");
function $2b863836f2d70a5d$var$uncurryThis(f) {
    return f.call.bind(f);
}
var $2b863836f2d70a5d$var$BigIntSupported = typeof BigInt !== 'undefined';
var $2b863836f2d70a5d$var$SymbolSupported = typeof Symbol !== 'undefined';
var $2b863836f2d70a5d$var$ObjectToString = $2b863836f2d70a5d$var$uncurryThis(Object.prototype.toString);
var $2b863836f2d70a5d$var$numberValue = $2b863836f2d70a5d$var$uncurryThis(Number.prototype.valueOf);
var $2b863836f2d70a5d$var$stringValue = $2b863836f2d70a5d$var$uncurryThis(String.prototype.valueOf);
var $2b863836f2d70a5d$var$booleanValue = $2b863836f2d70a5d$var$uncurryThis(Boolean.prototype.valueOf);
if ($2b863836f2d70a5d$var$BigIntSupported) var $2b863836f2d70a5d$var$bigIntValue = $2b863836f2d70a5d$var$uncurryThis(BigInt.prototype.valueOf);
if ($2b863836f2d70a5d$var$SymbolSupported) var $2b863836f2d70a5d$var$symbolValue = $2b863836f2d70a5d$var$uncurryThis(Symbol.prototype.valueOf);
function $2b863836f2d70a5d$var$checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== 'object') return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
module.exports.isArgumentsObject = $gvZjZ;
module.exports.isGeneratorFunction = $bO6hM;
module.exports.isTypedArray = $8hxWk;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function $2b863836f2d70a5d$var$isPromise(input) {
    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
}
module.exports.isPromise = $2b863836f2d70a5d$var$isPromise;
function $2b863836f2d70a5d$var$isArrayBufferView(value) {
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return $8hxWk(value) || $2b863836f2d70a5d$var$isDataView(value);
}
module.exports.isArrayBufferView = $2b863836f2d70a5d$var$isArrayBufferView;
function $2b863836f2d70a5d$var$isUint8Array(value) {
    return $cno1n(value) === 'Uint8Array';
}
module.exports.isUint8Array = $2b863836f2d70a5d$var$isUint8Array;
function $2b863836f2d70a5d$var$isUint8ClampedArray(value) {
    return $cno1n(value) === 'Uint8ClampedArray';
}
module.exports.isUint8ClampedArray = $2b863836f2d70a5d$var$isUint8ClampedArray;
function $2b863836f2d70a5d$var$isUint16Array(value) {
    return $cno1n(value) === 'Uint16Array';
}
module.exports.isUint16Array = $2b863836f2d70a5d$var$isUint16Array;
function $2b863836f2d70a5d$var$isUint32Array(value) {
    return $cno1n(value) === 'Uint32Array';
}
module.exports.isUint32Array = $2b863836f2d70a5d$var$isUint32Array;
function $2b863836f2d70a5d$var$isInt8Array(value) {
    return $cno1n(value) === 'Int8Array';
}
module.exports.isInt8Array = $2b863836f2d70a5d$var$isInt8Array;
function $2b863836f2d70a5d$var$isInt16Array(value) {
    return $cno1n(value) === 'Int16Array';
}
module.exports.isInt16Array = $2b863836f2d70a5d$var$isInt16Array;
function $2b863836f2d70a5d$var$isInt32Array(value) {
    return $cno1n(value) === 'Int32Array';
}
module.exports.isInt32Array = $2b863836f2d70a5d$var$isInt32Array;
function $2b863836f2d70a5d$var$isFloat32Array(value) {
    return $cno1n(value) === 'Float32Array';
}
module.exports.isFloat32Array = $2b863836f2d70a5d$var$isFloat32Array;
function $2b863836f2d70a5d$var$isFloat64Array(value) {
    return $cno1n(value) === 'Float64Array';
}
module.exports.isFloat64Array = $2b863836f2d70a5d$var$isFloat64Array;
function $2b863836f2d70a5d$var$isBigInt64Array(value) {
    return $cno1n(value) === 'BigInt64Array';
}
module.exports.isBigInt64Array = $2b863836f2d70a5d$var$isBigInt64Array;
function $2b863836f2d70a5d$var$isBigUint64Array(value) {
    return $cno1n(value) === 'BigUint64Array';
}
module.exports.isBigUint64Array = $2b863836f2d70a5d$var$isBigUint64Array;
function $2b863836f2d70a5d$var$isMapToString(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object Map]';
}
$2b863836f2d70a5d$var$isMapToString.working = typeof Map !== 'undefined' && $2b863836f2d70a5d$var$isMapToString(new Map());
function $2b863836f2d70a5d$var$isMap(value) {
    if (typeof Map === 'undefined') return false;
    return $2b863836f2d70a5d$var$isMapToString.working ? $2b863836f2d70a5d$var$isMapToString(value) : value instanceof Map;
}
module.exports.isMap = $2b863836f2d70a5d$var$isMap;
function $2b863836f2d70a5d$var$isSetToString(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object Set]';
}
$2b863836f2d70a5d$var$isSetToString.working = typeof Set !== 'undefined' && $2b863836f2d70a5d$var$isSetToString(new Set());
function $2b863836f2d70a5d$var$isSet(value) {
    if (typeof Set === 'undefined') return false;
    return $2b863836f2d70a5d$var$isSetToString.working ? $2b863836f2d70a5d$var$isSetToString(value) : value instanceof Set;
}
module.exports.isSet = $2b863836f2d70a5d$var$isSet;
function $2b863836f2d70a5d$var$isWeakMapToString(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object WeakMap]';
}
$2b863836f2d70a5d$var$isWeakMapToString.working = typeof WeakMap !== 'undefined' && $2b863836f2d70a5d$var$isWeakMapToString(new WeakMap());
function $2b863836f2d70a5d$var$isWeakMap(value) {
    if (typeof WeakMap === 'undefined') return false;
    return $2b863836f2d70a5d$var$isWeakMapToString.working ? $2b863836f2d70a5d$var$isWeakMapToString(value) : value instanceof WeakMap;
}
module.exports.isWeakMap = $2b863836f2d70a5d$var$isWeakMap;
function $2b863836f2d70a5d$var$isWeakSetToString(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object WeakSet]';
}
$2b863836f2d70a5d$var$isWeakSetToString.working = typeof WeakSet !== 'undefined' && $2b863836f2d70a5d$var$isWeakSetToString(new WeakSet());
function $2b863836f2d70a5d$var$isWeakSet(value) {
    return $2b863836f2d70a5d$var$isWeakSetToString(value);
}
module.exports.isWeakSet = $2b863836f2d70a5d$var$isWeakSet;
function $2b863836f2d70a5d$var$isArrayBufferToString(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object ArrayBuffer]';
}
$2b863836f2d70a5d$var$isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && $2b863836f2d70a5d$var$isArrayBufferToString(new ArrayBuffer());
function $2b863836f2d70a5d$var$isArrayBuffer(value) {
    if (typeof ArrayBuffer === 'undefined') return false;
    return $2b863836f2d70a5d$var$isArrayBufferToString.working ? $2b863836f2d70a5d$var$isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
module.exports.isArrayBuffer = $2b863836f2d70a5d$var$isArrayBuffer;
function $2b863836f2d70a5d$var$isDataViewToString(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object DataView]';
}
$2b863836f2d70a5d$var$isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && $2b863836f2d70a5d$var$isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function $2b863836f2d70a5d$var$isDataView(value) {
    if (typeof DataView === 'undefined') return false;
    return $2b863836f2d70a5d$var$isDataViewToString.working ? $2b863836f2d70a5d$var$isDataViewToString(value) : value instanceof DataView;
}
module.exports.isDataView = $2b863836f2d70a5d$var$isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var $2b863836f2d70a5d$var$SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function $2b863836f2d70a5d$var$isSharedArrayBufferToString(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object SharedArrayBuffer]';
}
function $2b863836f2d70a5d$var$isSharedArrayBuffer(value) {
    if (typeof $2b863836f2d70a5d$var$SharedArrayBufferCopy === 'undefined') return false;
    if (typeof $2b863836f2d70a5d$var$isSharedArrayBufferToString.working === 'undefined') $2b863836f2d70a5d$var$isSharedArrayBufferToString.working = $2b863836f2d70a5d$var$isSharedArrayBufferToString(new $2b863836f2d70a5d$var$SharedArrayBufferCopy());
    return $2b863836f2d70a5d$var$isSharedArrayBufferToString.working ? $2b863836f2d70a5d$var$isSharedArrayBufferToString(value) : value instanceof $2b863836f2d70a5d$var$SharedArrayBufferCopy;
}
module.exports.isSharedArrayBuffer = $2b863836f2d70a5d$var$isSharedArrayBuffer;
function $2b863836f2d70a5d$var$isAsyncFunction(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object AsyncFunction]';
}
module.exports.isAsyncFunction = $2b863836f2d70a5d$var$isAsyncFunction;
function $2b863836f2d70a5d$var$isMapIterator(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object Map Iterator]';
}
module.exports.isMapIterator = $2b863836f2d70a5d$var$isMapIterator;
function $2b863836f2d70a5d$var$isSetIterator(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object Set Iterator]';
}
module.exports.isSetIterator = $2b863836f2d70a5d$var$isSetIterator;
function $2b863836f2d70a5d$var$isGeneratorObject(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object Generator]';
}
module.exports.isGeneratorObject = $2b863836f2d70a5d$var$isGeneratorObject;
function $2b863836f2d70a5d$var$isWebAssemblyCompiledModule(value) {
    return $2b863836f2d70a5d$var$ObjectToString(value) === '[object WebAssembly.Module]';
}
module.exports.isWebAssemblyCompiledModule = $2b863836f2d70a5d$var$isWebAssemblyCompiledModule;
function $2b863836f2d70a5d$var$isNumberObject(value) {
    return $2b863836f2d70a5d$var$checkBoxedPrimitive(value, $2b863836f2d70a5d$var$numberValue);
}
module.exports.isNumberObject = $2b863836f2d70a5d$var$isNumberObject;
function $2b863836f2d70a5d$var$isStringObject(value) {
    return $2b863836f2d70a5d$var$checkBoxedPrimitive(value, $2b863836f2d70a5d$var$stringValue);
}
module.exports.isStringObject = $2b863836f2d70a5d$var$isStringObject;
function $2b863836f2d70a5d$var$isBooleanObject(value) {
    return $2b863836f2d70a5d$var$checkBoxedPrimitive(value, $2b863836f2d70a5d$var$booleanValue);
}
module.exports.isBooleanObject = $2b863836f2d70a5d$var$isBooleanObject;
function $2b863836f2d70a5d$var$isBigIntObject(value) {
    return $2b863836f2d70a5d$var$BigIntSupported && $2b863836f2d70a5d$var$checkBoxedPrimitive(value, $2b863836f2d70a5d$var$bigIntValue);
}
module.exports.isBigIntObject = $2b863836f2d70a5d$var$isBigIntObject;
function $2b863836f2d70a5d$var$isSymbolObject(value) {
    return $2b863836f2d70a5d$var$SymbolSupported && $2b863836f2d70a5d$var$checkBoxedPrimitive(value, $2b863836f2d70a5d$var$symbolValue);
}
module.exports.isSymbolObject = $2b863836f2d70a5d$var$isSymbolObject;
function $2b863836f2d70a5d$var$isBoxedPrimitive(value) {
    return $2b863836f2d70a5d$var$isNumberObject(value) || $2b863836f2d70a5d$var$isStringObject(value) || $2b863836f2d70a5d$var$isBooleanObject(value) || $2b863836f2d70a5d$var$isBigIntObject(value) || $2b863836f2d70a5d$var$isSymbolObject(value);
}
module.exports.isBoxedPrimitive = $2b863836f2d70a5d$var$isBoxedPrimitive;
function $2b863836f2d70a5d$var$isAnyArrayBuffer(value) {
    return typeof Uint8Array !== 'undefined' && ($2b863836f2d70a5d$var$isArrayBuffer(value) || $2b863836f2d70a5d$var$isSharedArrayBuffer(value));
}
module.exports.isAnyArrayBuffer = $2b863836f2d70a5d$var$isAnyArrayBuffer;
[
    'isProxy',
    'isExternal',
    'isModuleNamespaceObject'
].forEach(function(method) {
    Object.defineProperty(module.exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + ' is not supported in userland');
        }
    });
});

});
parcelRequire.register("gvZjZ", function(module, exports) {
'use strict';

var $c05f1bbb145ad4b9$var$hasToStringTag = (parcelRequire("gwHUT"))();

var $i0ujb = parcelRequire("i0ujb");
var $c05f1bbb145ad4b9$var$$toString = $i0ujb('Object.prototype.toString');
var $c05f1bbb145ad4b9$var$isStandardArguments = function isArguments(value) {
    if ($c05f1bbb145ad4b9$var$hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) return false;
    return $c05f1bbb145ad4b9$var$$toString(value) === '[object Arguments]';
};
var $c05f1bbb145ad4b9$var$isLegacyArguments = function isArguments(value) {
    if ($c05f1bbb145ad4b9$var$isStandardArguments(value)) return true;
    return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $c05f1bbb145ad4b9$var$$toString(value) !== '[object Array]' && $c05f1bbb145ad4b9$var$$toString(value.callee) === '[object Function]';
};
var $c05f1bbb145ad4b9$var$supportsStandardArguments = function() {
    return $c05f1bbb145ad4b9$var$isStandardArguments(arguments);
}();
$c05f1bbb145ad4b9$var$isStandardArguments.isLegacyArguments = $c05f1bbb145ad4b9$var$isLegacyArguments; // for tests
module.exports = $c05f1bbb145ad4b9$var$supportsStandardArguments ? $c05f1bbb145ad4b9$var$isStandardArguments : $c05f1bbb145ad4b9$var$isLegacyArguments;

});
parcelRequire.register("gwHUT", function(module, exports) {
'use strict';

var $iY0dP = parcelRequire("iY0dP");
module.exports = function hasToStringTagShams() {
    return $iY0dP() && !!Symbol.toStringTag;
};

});
parcelRequire.register("iY0dP", function(module, exports) {
'use strict';
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') return false;
    if (typeof Symbol.iterator === 'symbol') return true;
    var obj = {
    };
    var sym = Symbol('test');
    var symObj = Object(sym);
    if (typeof sym === 'string') return false;
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') return false;
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

});


parcelRequire.register("i0ujb", function(module, exports) {
'use strict';

var $7K1Xe = parcelRequire("7K1Xe");

var $jfXJB = parcelRequire("jfXJB");
var $d1bfbcb9a29c8e34$var$$indexOf = $jfXJB($7K1Xe('String.prototype.indexOf'));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = $7K1Xe(name, !!allowMissing);
    if (typeof intrinsic === 'function' && $d1bfbcb9a29c8e34$var$$indexOf(name, '.prototype.') > -1) return $jfXJB(intrinsic);
    return intrinsic;
};

});
parcelRequire.register("7K1Xe", function(module, exports) {
'use strict';
var $5a2e585a3a4a1795$var$undefined;
var $5a2e585a3a4a1795$var$$SyntaxError = SyntaxError;
var $5a2e585a3a4a1795$var$$Function = Function;
var $5a2e585a3a4a1795$var$$TypeError = TypeError;
// eslint-disable-next-line consistent-return
var $5a2e585a3a4a1795$var$getEvalledConstructor = function(expressionSyntax) {
    try {
        return $5a2e585a3a4a1795$var$$Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {
    }
};
var $5a2e585a3a4a1795$var$$gOPD = Object.getOwnPropertyDescriptor;
if ($5a2e585a3a4a1795$var$$gOPD) try {
    $5a2e585a3a4a1795$var$$gOPD({
    }, '');
} catch (e) {
    $5a2e585a3a4a1795$var$$gOPD = null; // this is IE 8, which has a broken gOPD
}
var $5a2e585a3a4a1795$var$throwTypeError = function() {
    throw new $5a2e585a3a4a1795$var$$TypeError();
};
var $5a2e585a3a4a1795$var$ThrowTypeError = $5a2e585a3a4a1795$var$$gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return $5a2e585a3a4a1795$var$throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $5a2e585a3a4a1795$var$$gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
            return $5a2e585a3a4a1795$var$throwTypeError;
        }
    }
}() : $5a2e585a3a4a1795$var$throwTypeError;

var $5a2e585a3a4a1795$var$hasSymbols = (parcelRequire("5cNX6"))();
var $5a2e585a3a4a1795$var$getProto = Object.getPrototypeOf || function(x) {
    return x.__proto__;
}; // eslint-disable-line no-proto
var $5a2e585a3a4a1795$var$needsEval = {
};
var $5a2e585a3a4a1795$var$TypedArray = typeof Uint8Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : $5a2e585a3a4a1795$var$getProto(Uint8Array);
var $5a2e585a3a4a1795$var$INTRINSICS = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? $5a2e585a3a4a1795$var$undefined : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? $5a2e585a3a4a1795$var$undefined : ArrayBuffer,
    '%ArrayIteratorPrototype%': $5a2e585a3a4a1795$var$hasSymbols ? $5a2e585a3a4a1795$var$getProto([][Symbol.iterator]()) : $5a2e585a3a4a1795$var$undefined,
    '%AsyncFromSyncIteratorPrototype%': $5a2e585a3a4a1795$var$undefined,
    '%AsyncFunction%': $5a2e585a3a4a1795$var$needsEval,
    '%AsyncGenerator%': $5a2e585a3a4a1795$var$needsEval,
    '%AsyncGeneratorFunction%': $5a2e585a3a4a1795$var$needsEval,
    '%AsyncIteratorPrototype%': $5a2e585a3a4a1795$var$needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? $5a2e585a3a4a1795$var$undefined : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? $5a2e585a3a4a1795$var$undefined : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? $5a2e585a3a4a1795$var$undefined : FinalizationRegistry,
    '%Function%': $5a2e585a3a4a1795$var$$Function,
    '%GeneratorFunction%': $5a2e585a3a4a1795$var$needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': $5a2e585a3a4a1795$var$hasSymbols ? $5a2e585a3a4a1795$var$getProto($5a2e585a3a4a1795$var$getProto([][Symbol.iterator]())) : $5a2e585a3a4a1795$var$undefined,
    '%JSON%': typeof JSON === 'object' ? JSON : $5a2e585a3a4a1795$var$undefined,
    '%Map%': typeof Map === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !$5a2e585a3a4a1795$var$hasSymbols ? $5a2e585a3a4a1795$var$undefined : $5a2e585a3a4a1795$var$getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !$5a2e585a3a4a1795$var$hasSymbols ? $5a2e585a3a4a1795$var$undefined : $5a2e585a3a4a1795$var$getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? $5a2e585a3a4a1795$var$undefined : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': $5a2e585a3a4a1795$var$hasSymbols ? $5a2e585a3a4a1795$var$getProto(''[Symbol.iterator]()) : $5a2e585a3a4a1795$var$undefined,
    '%Symbol%': $5a2e585a3a4a1795$var$hasSymbols ? Symbol : $5a2e585a3a4a1795$var$undefined,
    '%SyntaxError%': $5a2e585a3a4a1795$var$$SyntaxError,
    '%ThrowTypeError%': $5a2e585a3a4a1795$var$ThrowTypeError,
    '%TypedArray%': $5a2e585a3a4a1795$var$TypedArray,
    '%TypeError%': $5a2e585a3a4a1795$var$$TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? $5a2e585a3a4a1795$var$undefined : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? $5a2e585a3a4a1795$var$undefined : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? $5a2e585a3a4a1795$var$undefined : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? $5a2e585a3a4a1795$var$undefined : WeakSet
};
var $5a2e585a3a4a1795$var$doEval = function doEval(name) {
    var value;
    if (name === '%AsyncFunction%') value = $5a2e585a3a4a1795$var$getEvalledConstructor('async function () {}');
    else if (name === '%GeneratorFunction%') value = $5a2e585a3a4a1795$var$getEvalledConstructor('function* () {}');
    else if (name === '%AsyncGeneratorFunction%') value = $5a2e585a3a4a1795$var$getEvalledConstructor('async function* () {}');
    else if (name === '%AsyncGenerator%') {
        var fn = doEval('%AsyncGeneratorFunction%');
        if (fn) value = fn.prototype;
    } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval('%AsyncGenerator%');
        if (gen) value = $5a2e585a3a4a1795$var$getProto(gen.prototype);
    }
    $5a2e585a3a4a1795$var$INTRINSICS[name] = value;
    return value;
};
var $5a2e585a3a4a1795$var$LEGACY_ALIASES = {
    '%ArrayBufferPrototype%': [
        'ArrayBuffer',
        'prototype'
    ],
    '%ArrayPrototype%': [
        'Array',
        'prototype'
    ],
    '%ArrayProto_entries%': [
        'Array',
        'prototype',
        'entries'
    ],
    '%ArrayProto_forEach%': [
        'Array',
        'prototype',
        'forEach'
    ],
    '%ArrayProto_keys%': [
        'Array',
        'prototype',
        'keys'
    ],
    '%ArrayProto_values%': [
        'Array',
        'prototype',
        'values'
    ],
    '%AsyncFunctionPrototype%': [
        'AsyncFunction',
        'prototype'
    ],
    '%AsyncGenerator%': [
        'AsyncGeneratorFunction',
        'prototype'
    ],
    '%AsyncGeneratorPrototype%': [
        'AsyncGeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%BooleanPrototype%': [
        'Boolean',
        'prototype'
    ],
    '%DataViewPrototype%': [
        'DataView',
        'prototype'
    ],
    '%DatePrototype%': [
        'Date',
        'prototype'
    ],
    '%ErrorPrototype%': [
        'Error',
        'prototype'
    ],
    '%EvalErrorPrototype%': [
        'EvalError',
        'prototype'
    ],
    '%Float32ArrayPrototype%': [
        'Float32Array',
        'prototype'
    ],
    '%Float64ArrayPrototype%': [
        'Float64Array',
        'prototype'
    ],
    '%FunctionPrototype%': [
        'Function',
        'prototype'
    ],
    '%Generator%': [
        'GeneratorFunction',
        'prototype'
    ],
    '%GeneratorPrototype%': [
        'GeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%Int8ArrayPrototype%': [
        'Int8Array',
        'prototype'
    ],
    '%Int16ArrayPrototype%': [
        'Int16Array',
        'prototype'
    ],
    '%Int32ArrayPrototype%': [
        'Int32Array',
        'prototype'
    ],
    '%JSONParse%': [
        'JSON',
        'parse'
    ],
    '%JSONStringify%': [
        'JSON',
        'stringify'
    ],
    '%MapPrototype%': [
        'Map',
        'prototype'
    ],
    '%NumberPrototype%': [
        'Number',
        'prototype'
    ],
    '%ObjectPrototype%': [
        'Object',
        'prototype'
    ],
    '%ObjProto_toString%': [
        'Object',
        'prototype',
        'toString'
    ],
    '%ObjProto_valueOf%': [
        'Object',
        'prototype',
        'valueOf'
    ],
    '%PromisePrototype%': [
        'Promise',
        'prototype'
    ],
    '%PromiseProto_then%': [
        'Promise',
        'prototype',
        'then'
    ],
    '%Promise_all%': [
        'Promise',
        'all'
    ],
    '%Promise_reject%': [
        'Promise',
        'reject'
    ],
    '%Promise_resolve%': [
        'Promise',
        'resolve'
    ],
    '%RangeErrorPrototype%': [
        'RangeError',
        'prototype'
    ],
    '%ReferenceErrorPrototype%': [
        'ReferenceError',
        'prototype'
    ],
    '%RegExpPrototype%': [
        'RegExp',
        'prototype'
    ],
    '%SetPrototype%': [
        'Set',
        'prototype'
    ],
    '%SharedArrayBufferPrototype%': [
        'SharedArrayBuffer',
        'prototype'
    ],
    '%StringPrototype%': [
        'String',
        'prototype'
    ],
    '%SymbolPrototype%': [
        'Symbol',
        'prototype'
    ],
    '%SyntaxErrorPrototype%': [
        'SyntaxError',
        'prototype'
    ],
    '%TypedArrayPrototype%': [
        'TypedArray',
        'prototype'
    ],
    '%TypeErrorPrototype%': [
        'TypeError',
        'prototype'
    ],
    '%Uint8ArrayPrototype%': [
        'Uint8Array',
        'prototype'
    ],
    '%Uint8ClampedArrayPrototype%': [
        'Uint8ClampedArray',
        'prototype'
    ],
    '%Uint16ArrayPrototype%': [
        'Uint16Array',
        'prototype'
    ],
    '%Uint32ArrayPrototype%': [
        'Uint32Array',
        'prototype'
    ],
    '%URIErrorPrototype%': [
        'URIError',
        'prototype'
    ],
    '%WeakMapPrototype%': [
        'WeakMap',
        'prototype'
    ],
    '%WeakSetPrototype%': [
        'WeakSet',
        'prototype'
    ]
};

var $eM4Yn = parcelRequire("eM4Yn");

var $kb7TI = parcelRequire("kb7TI");
var $5a2e585a3a4a1795$var$$concat = $eM4Yn.call(Function.call, Array.prototype.concat);
var $5a2e585a3a4a1795$var$$spliceApply = $eM4Yn.call(Function.apply, Array.prototype.splice);
var $5a2e585a3a4a1795$var$$replace = $eM4Yn.call(Function.call, String.prototype.replace);
var $5a2e585a3a4a1795$var$$strSlice = $eM4Yn.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var $5a2e585a3a4a1795$var$rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var $5a2e585a3a4a1795$var$reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var $5a2e585a3a4a1795$var$stringToPath = function stringToPath(string) {
    var first = $5a2e585a3a4a1795$var$$strSlice(string, 0, 1);
    var last = $5a2e585a3a4a1795$var$$strSlice(string, -1);
    if (first === '%' && last !== '%') throw new $5a2e585a3a4a1795$var$$SyntaxError('invalid intrinsic syntax, expected closing `%`');
    else if (last === '%' && first !== '%') throw new $5a2e585a3a4a1795$var$$SyntaxError('invalid intrinsic syntax, expected opening `%`');
    var result = [];
    $5a2e585a3a4a1795$var$$replace(string, $5a2e585a3a4a1795$var$rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $5a2e585a3a4a1795$var$$replace(subString, $5a2e585a3a4a1795$var$reEscapeChar, '$1') : number || match;
    });
    return result;
};
/* end adaptation */ var $5a2e585a3a4a1795$var$getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if ($kb7TI($5a2e585a3a4a1795$var$LEGACY_ALIASES, intrinsicName)) {
        alias = $5a2e585a3a4a1795$var$LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
    }
    if ($kb7TI($5a2e585a3a4a1795$var$INTRINSICS, intrinsicName)) {
        var value = $5a2e585a3a4a1795$var$INTRINSICS[intrinsicName];
        if (value === $5a2e585a3a4a1795$var$needsEval) value = $5a2e585a3a4a1795$var$doEval(intrinsicName);
        if (typeof value === 'undefined' && !allowMissing) throw new $5a2e585a3a4a1795$var$$TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $5a2e585a3a4a1795$var$$SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) throw new $5a2e585a3a4a1795$var$$TypeError('intrinsic name must be a non-empty string');
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') throw new $5a2e585a3a4a1795$var$$TypeError('"allowMissing" argument must be a boolean');
    var parts = $5a2e585a3a4a1795$var$stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = $5a2e585a3a4a1795$var$getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $5a2e585a3a4a1795$var$$spliceApply(parts, $5a2e585a3a4a1795$var$$concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $5a2e585a3a4a1795$var$$strSlice(part, 0, 1);
        var last = $5a2e585a3a4a1795$var$$strSlice(part, -1);
        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) throw new $5a2e585a3a4a1795$var$$SyntaxError('property names with quotes must have matching quotes');
        if (part === 'constructor' || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';
        if ($kb7TI($5a2e585a3a4a1795$var$INTRINSICS, intrinsicRealName)) value = $5a2e585a3a4a1795$var$INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $5a2e585a3a4a1795$var$$TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                return void 0;
            }
            if ($5a2e585a3a4a1795$var$$gOPD && i + 1 >= parts.length) {
                var desc = $5a2e585a3a4a1795$var$$gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = $kb7TI(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) $5a2e585a3a4a1795$var$INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

});
parcelRequire.register("5cNX6", function(module, exports) {
'use strict';
var $3ca4d2374a8ecce8$var$origSymbol = typeof Symbol !== 'undefined' && Symbol;

var $iY0dP = parcelRequire("iY0dP");
module.exports = function hasNativeSymbols() {
    if (typeof $3ca4d2374a8ecce8$var$origSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof $3ca4d2374a8ecce8$var$origSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;
    return $iY0dP();
};

});

parcelRequire.register("eM4Yn", function(module, exports) {
'use strict';

var $3onRk = parcelRequire("3onRk");
module.exports = Function.prototype.bind || $3onRk;

});
parcelRequire.register("3onRk", function(module, exports) {
'use strict';
/* eslint no-invalid-this: 1 */ var $27861ee4b775ea5b$var$ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var $27861ee4b775ea5b$var$slice = Array.prototype.slice;
var $27861ee4b775ea5b$var$toStr = Object.prototype.toString;
var $27861ee4b775ea5b$var$funcType = '[object Function]';
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || $27861ee4b775ea5b$var$toStr.call(target) !== $27861ee4b775ea5b$var$funcType) throw new TypeError($27861ee4b775ea5b$var$ERROR_MESSAGE + target);
    var args = $27861ee4b775ea5b$var$slice.call(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat($27861ee4b775ea5b$var$slice.call(arguments)));
            if (Object(result) === result) return result;
            return this;
        } else return target.apply(that, args.concat($27861ee4b775ea5b$var$slice.call(arguments)));
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs.push('$' + i);
    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

});


parcelRequire.register("kb7TI", function(module, exports) {
'use strict';

var $eM4Yn = parcelRequire("eM4Yn");
module.exports = $eM4Yn.call(Function.call, Object.prototype.hasOwnProperty);

});


parcelRequire.register("jfXJB", function(module, exports) {
'use strict';

var $eM4Yn = parcelRequire("eM4Yn");

var $7K1Xe = parcelRequire("7K1Xe");
var $e04dc1159b24f8ef$var$$apply = $7K1Xe('%Function.prototype.apply%');
var $e04dc1159b24f8ef$var$$call = $7K1Xe('%Function.prototype.call%');
var $e04dc1159b24f8ef$var$$reflectApply = $7K1Xe('%Reflect.apply%', true) || $eM4Yn.call($e04dc1159b24f8ef$var$$call, $e04dc1159b24f8ef$var$$apply);
var $e04dc1159b24f8ef$var$$gOPD = $7K1Xe('%Object.getOwnPropertyDescriptor%', true);
var $e04dc1159b24f8ef$var$$defineProperty = $7K1Xe('%Object.defineProperty%', true);
var $e04dc1159b24f8ef$var$$max = $7K1Xe('%Math.max%');
if ($e04dc1159b24f8ef$var$$defineProperty) try {
    $e04dc1159b24f8ef$var$$defineProperty({
    }, 'a', {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $e04dc1159b24f8ef$var$$defineProperty = null;
}
module.exports = function callBind(originalFunction) {
    var func = $e04dc1159b24f8ef$var$$reflectApply($eM4Yn, $e04dc1159b24f8ef$var$$call, arguments);
    if ($e04dc1159b24f8ef$var$$gOPD && $e04dc1159b24f8ef$var$$defineProperty) {
        var desc = $e04dc1159b24f8ef$var$$gOPD(func, 'length');
        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
        $e04dc1159b24f8ef$var$$defineProperty(func, 'length', {
            value: 1 + $e04dc1159b24f8ef$var$$max(0, originalFunction.length - (arguments.length - 1))
        });
    }
    return func;
};
var $e04dc1159b24f8ef$var$applyBind = function applyBind() {
    return $e04dc1159b24f8ef$var$$reflectApply($eM4Yn, $e04dc1159b24f8ef$var$$apply, arguments);
};
if ($e04dc1159b24f8ef$var$$defineProperty) $e04dc1159b24f8ef$var$$defineProperty(module.exports, 'apply', {
    value: $e04dc1159b24f8ef$var$applyBind
});
else module.exports.apply = $e04dc1159b24f8ef$var$applyBind;

});



parcelRequire.register("bO6hM", function(module, exports) {
'use strict';
var $89893d74d88a89f4$var$toStr = Object.prototype.toString;
var $89893d74d88a89f4$var$fnToStr = Function.prototype.toString;
var $89893d74d88a89f4$var$isFnRegex = /^\s*(?:function)?\*/;

var $89893d74d88a89f4$var$hasToStringTag = (parcelRequire("gwHUT"))();
var $89893d74d88a89f4$var$getProto = Object.getPrototypeOf;
var $89893d74d88a89f4$var$getGeneratorFunc = function() {
    if (!$89893d74d88a89f4$var$hasToStringTag) return false;
    try {
        return Function('return function*() {}')();
    } catch (e) {
    }
};
var $89893d74d88a89f4$var$GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== 'function') return false;
    if ($89893d74d88a89f4$var$isFnRegex.test($89893d74d88a89f4$var$fnToStr.call(fn))) return true;
    if (!$89893d74d88a89f4$var$hasToStringTag) {
        var str = $89893d74d88a89f4$var$toStr.call(fn);
        return str === '[object GeneratorFunction]';
    }
    if (!$89893d74d88a89f4$var$getProto) return false;
    if (typeof $89893d74d88a89f4$var$GeneratorFunction === 'undefined') {
        var generatorFunc = $89893d74d88a89f4$var$getGeneratorFunc();
        $89893d74d88a89f4$var$GeneratorFunction = generatorFunc ? $89893d74d88a89f4$var$getProto(generatorFunc) : false;
    }
    return $89893d74d88a89f4$var$getProto(fn) === $89893d74d88a89f4$var$GeneratorFunction;
};

});

parcelRequire.register("cno1n", function(module, exports) {
'use strict';

var $5kseg = parcelRequire("5kseg");

var $7iPW1 = parcelRequire("7iPW1");

var $i0ujb = parcelRequire("i0ujb");
var $902a441c50ca2625$var$$toString = $i0ujb('Object.prototype.toString');

var $902a441c50ca2625$var$hasToStringTag = (parcelRequire("gwHUT"))();
var $902a441c50ca2625$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
var $902a441c50ca2625$var$typedArrays = $7iPW1();
var $902a441c50ca2625$var$$slice = $i0ujb('String.prototype.slice');
var $902a441c50ca2625$var$toStrTags = {
};

var $arZa1 = parcelRequire("arZa1");
var $902a441c50ca2625$var$getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if ($902a441c50ca2625$var$hasToStringTag && $arZa1 && $902a441c50ca2625$var$getPrototypeOf) $5kseg($902a441c50ca2625$var$typedArrays, function(typedArray) {
    if (typeof $902a441c50ca2625$var$g[typedArray] === 'function') {
        var arr = new $902a441c50ca2625$var$g[typedArray]();
        if (Symbol.toStringTag in arr) {
            var proto = $902a441c50ca2625$var$getPrototypeOf(arr);
            var descriptor = $arZa1(proto, Symbol.toStringTag);
            if (!descriptor) {
                var superProto = $902a441c50ca2625$var$getPrototypeOf(proto);
                descriptor = $arZa1(superProto, Symbol.toStringTag);
            }
            $902a441c50ca2625$var$toStrTags[typedArray] = descriptor.get;
        }
    }
});
var $902a441c50ca2625$var$tryTypedArrays = function tryAllTypedArrays(value) {
    var foundName = false;
    $5kseg($902a441c50ca2625$var$toStrTags, function(getter, typedArray) {
        if (!foundName) try {
            var name = getter.call(value);
            if (name === typedArray) foundName = name;
        } catch (e) {
        }
    });
    return foundName;
};

var $8hxWk = parcelRequire("8hxWk");
module.exports = function whichTypedArray(value) {
    if (!$8hxWk(value)) return false;
    if (!$902a441c50ca2625$var$hasToStringTag || !(Symbol.toStringTag in value)) return $902a441c50ca2625$var$$slice($902a441c50ca2625$var$$toString(value), 8, -1);
    return $902a441c50ca2625$var$tryTypedArrays(value);
};

});
parcelRequire.register("5kseg", function(module, exports) {
var $3e14b7b4ed415140$var$hasOwn = Object.prototype.hasOwnProperty;
var $3e14b7b4ed415140$var$toString = Object.prototype.toString;
module.exports = function forEach(obj, fn, ctx) {
    if ($3e14b7b4ed415140$var$toString.call(fn) !== '[object Function]') throw new TypeError('iterator must be a function');
    var l = obj.length;
    if (l === +l) for(var i = 0; i < l; i++)fn.call(ctx, obj[i], i, obj);
    else {
        for(var k in obj)if ($3e14b7b4ed415140$var$hasOwn.call(obj, k)) fn.call(ctx, obj[k], k, obj);
    }
};

});

parcelRequire.register("7iPW1", function(module, exports) {
'use strict';
var $55128005465d53c2$var$possibleNames = [
    'BigInt64Array',
    'BigUint64Array',
    'Float32Array',
    'Float64Array',
    'Int16Array',
    'Int32Array',
    'Int8Array',
    'Uint16Array',
    'Uint32Array',
    'Uint8Array',
    'Uint8ClampedArray'
];
var $55128005465d53c2$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
module.exports = function availableTypedArrays() {
    var out = [];
    for(var i = 0; i < $55128005465d53c2$var$possibleNames.length; i++)if (typeof $55128005465d53c2$var$g[$55128005465d53c2$var$possibleNames[i]] === 'function') out[out.length] = $55128005465d53c2$var$possibleNames[i];
    return out;
};

});

parcelRequire.register("arZa1", function(module, exports) {
'use strict';

var $7K1Xe = parcelRequire("7K1Xe");
var $79bbde41021c7ab2$var$$gOPD = $7K1Xe('%Object.getOwnPropertyDescriptor%', true);
if ($79bbde41021c7ab2$var$$gOPD) try {
    $79bbde41021c7ab2$var$$gOPD([], 'length');
} catch (e) {
    // IE 8 has a broken gOPD
    $79bbde41021c7ab2$var$$gOPD = null;
}
module.exports = $79bbde41021c7ab2$var$$gOPD;

});

parcelRequire.register("8hxWk", function(module, exports) {
'use strict';

var $5kseg = parcelRequire("5kseg");

var $7iPW1 = parcelRequire("7iPW1");

var $i0ujb = parcelRequire("i0ujb");
var $607a3d0019e6f61c$var$$toString = $i0ujb('Object.prototype.toString');

var $607a3d0019e6f61c$var$hasToStringTag = (parcelRequire("gwHUT"))();
var $607a3d0019e6f61c$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
var $607a3d0019e6f61c$var$typedArrays = $7iPW1();
var $607a3d0019e6f61c$var$$indexOf = $i0ujb('Array.prototype.indexOf', true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
var $607a3d0019e6f61c$var$$slice = $i0ujb('String.prototype.slice');
var $607a3d0019e6f61c$var$toStrTags = {
};

var $arZa1 = parcelRequire("arZa1");
var $607a3d0019e6f61c$var$getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if ($607a3d0019e6f61c$var$hasToStringTag && $arZa1 && $607a3d0019e6f61c$var$getPrototypeOf) $5kseg($607a3d0019e6f61c$var$typedArrays, function(typedArray) {
    var arr = new $607a3d0019e6f61c$var$g[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = $607a3d0019e6f61c$var$getPrototypeOf(arr);
        var descriptor = $arZa1(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = $607a3d0019e6f61c$var$getPrototypeOf(proto);
            descriptor = $arZa1(superProto, Symbol.toStringTag);
        }
        $607a3d0019e6f61c$var$toStrTags[typedArray] = descriptor.get;
    }
});
var $607a3d0019e6f61c$var$tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    $5kseg($607a3d0019e6f61c$var$toStrTags, function(getter, typedArray) {
        if (!anyTrue) try {
            anyTrue = getter.call(value) === typedArray;
        } catch (e) {
        }
    });
    return anyTrue;
};
module.exports = function isTypedArray(value) {
    if (!value || typeof value !== 'object') return false;
    if (!$607a3d0019e6f61c$var$hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $607a3d0019e6f61c$var$$slice($607a3d0019e6f61c$var$$toString(value), 8, -1);
        return $607a3d0019e6f61c$var$$indexOf($607a3d0019e6f61c$var$typedArrays, tag) > -1;
    }
    if (!$arZa1) return false;
    return $607a3d0019e6f61c$var$tryTypedArrays(value);
};

});




// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
$d4f13812fe9c6457$exports.types = (parcelRequire("3JG5j"));
function $d4f13812fe9c6457$var$isArray(ar) {
    return Array.isArray(ar);
}
$d4f13812fe9c6457$exports.isArray = $d4f13812fe9c6457$var$isArray;
function $d4f13812fe9c6457$var$isBoolean(arg) {
    return typeof arg === 'boolean';
}
$d4f13812fe9c6457$exports.isBoolean = $d4f13812fe9c6457$var$isBoolean;
function $d4f13812fe9c6457$var$isNull(arg) {
    return arg === null;
}
$d4f13812fe9c6457$exports.isNull = $d4f13812fe9c6457$var$isNull;
function $d4f13812fe9c6457$var$isNullOrUndefined(arg) {
    return arg == null;
}
$d4f13812fe9c6457$exports.isNullOrUndefined = $d4f13812fe9c6457$var$isNullOrUndefined;
function $d4f13812fe9c6457$var$isNumber(arg) {
    return typeof arg === 'number';
}
$d4f13812fe9c6457$exports.isNumber = $d4f13812fe9c6457$var$isNumber;
function $d4f13812fe9c6457$var$isString(arg) {
    return typeof arg === 'string';
}
$d4f13812fe9c6457$exports.isString = $d4f13812fe9c6457$var$isString;
function $d4f13812fe9c6457$var$isSymbol(arg) {
    return typeof arg === 'symbol';
}
$d4f13812fe9c6457$exports.isSymbol = $d4f13812fe9c6457$var$isSymbol;
function $d4f13812fe9c6457$var$isUndefined(arg) {
    return arg === void 0;
}
$d4f13812fe9c6457$exports.isUndefined = $d4f13812fe9c6457$var$isUndefined;
function $d4f13812fe9c6457$var$isRegExp(re) {
    return $d4f13812fe9c6457$var$isObject(re) && $d4f13812fe9c6457$var$objectToString(re) === '[object RegExp]';
}
$d4f13812fe9c6457$exports.isRegExp = $d4f13812fe9c6457$var$isRegExp;
$d4f13812fe9c6457$exports.types.isRegExp = $d4f13812fe9c6457$var$isRegExp;
function $d4f13812fe9c6457$var$isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
$d4f13812fe9c6457$exports.isObject = $d4f13812fe9c6457$var$isObject;
function $d4f13812fe9c6457$var$isDate(d) {
    return $d4f13812fe9c6457$var$isObject(d) && $d4f13812fe9c6457$var$objectToString(d) === '[object Date]';
}
$d4f13812fe9c6457$exports.isDate = $d4f13812fe9c6457$var$isDate;
$d4f13812fe9c6457$exports.types.isDate = $d4f13812fe9c6457$var$isDate;
function $d4f13812fe9c6457$var$isError(e) {
    return $d4f13812fe9c6457$var$isObject(e) && ($d4f13812fe9c6457$var$objectToString(e) === '[object Error]' || e instanceof Error);
}
$d4f13812fe9c6457$exports.isError = $d4f13812fe9c6457$var$isError;
$d4f13812fe9c6457$exports.types.isNativeError = $d4f13812fe9c6457$var$isError;
function $d4f13812fe9c6457$var$isFunction(arg) {
    return typeof arg === 'function';
}
$d4f13812fe9c6457$exports.isFunction = $d4f13812fe9c6457$var$isFunction;
function $d4f13812fe9c6457$var$isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
}
$d4f13812fe9c6457$exports.isPrimitive = $d4f13812fe9c6457$var$isPrimitive;
parcelRequire.register("l3oKm", function(module, exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

});


$d4f13812fe9c6457$exports.isBuffer = (parcelRequire("l3oKm"));
function $d4f13812fe9c6457$var$objectToString(o) {
    return Object.prototype.toString.call(o);
}
function $d4f13812fe9c6457$var$pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var $d4f13812fe9c6457$var$months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
// 26 Feb 16:19:34
function $d4f13812fe9c6457$var$timestamp() {
    var d = new Date();
    var time = [
        $d4f13812fe9c6457$var$pad(d.getHours()),
        $d4f13812fe9c6457$var$pad(d.getMinutes()),
        $d4f13812fe9c6457$var$pad(d.getSeconds())
    ].join(':');
    return [
        d.getDate(),
        $d4f13812fe9c6457$var$months[d.getMonth()],
        time
    ].join(' ');
}
// log is just a thin wrapper to console.log that prepends a timestamp
$d4f13812fe9c6457$exports.log = function() {
    console.log('%s - %s', $d4f13812fe9c6457$var$timestamp(), $d4f13812fe9c6457$exports.format.apply($d4f13812fe9c6457$exports, arguments));
};
parcelRequire.register("i72QR", function(module, exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function() {
    };
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
};

});


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ $d4f13812fe9c6457$exports.inherits = (parcelRequire("i72QR"));
$d4f13812fe9c6457$exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !$d4f13812fe9c6457$var$isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function $d4f13812fe9c6457$var$hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var $d4f13812fe9c6457$var$kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
$d4f13812fe9c6457$exports.promisify = function promisify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    if ($d4f13812fe9c6457$var$kCustomPromisifiedSymbol && original[$d4f13812fe9c6457$var$kCustomPromisifiedSymbol]) {
        var fn = original[$d4f13812fe9c6457$var$kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, $d4f13812fe9c6457$var$kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if ($d4f13812fe9c6457$var$kCustomPromisifiedSymbol) Object.defineProperty(fn, $d4f13812fe9c6457$var$kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, $d4f13812fe9c6457$var$getOwnPropertyDescriptors(original));
};
$d4f13812fe9c6457$exports.promisify.custom = $d4f13812fe9c6457$var$kCustomPromisifiedSymbol;
function $d4f13812fe9c6457$var$callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function $d4f13812fe9c6457$var$callbackify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') throw new TypeError('The last argument must be of type Function');
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            $307a85b905be3022$exports.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            $307a85b905be3022$exports.nextTick($d4f13812fe9c6457$var$callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, $d4f13812fe9c6457$var$getOwnPropertyDescriptors(original));
    return callbackified;
}
$d4f13812fe9c6457$exports.callbackify = $d4f13812fe9c6457$var$callbackify;



var $e22306885f624a59$exports = {};

$parcel$export($e22306885f624a59$exports, "ValueError", () => $e22306885f624a59$export$54d4c18dc78a26d4);
$parcel$export($e22306885f624a59$exports, "ConfigError", () => $e22306885f624a59$export$c5fb415882705cf4);
$parcel$export($e22306885f624a59$exports, "NotImplementedError", () => $e22306885f624a59$export$e162153238934121);
"use strict";
class $e22306885f624a59$export$54d4c18dc78a26d4 extends Error {
}
class $e22306885f624a59$export$c5fb415882705cf4 extends Error {
}
class $e22306885f624a59$export$e162153238934121 extends Error {
}



"use strict";
function $9eb0dd444516931f$var$isNumber(value) {
    return typeof value === "number";
}
function $9eb0dd444516931f$var$isString(value) {
    return typeof value === "string";
}
function $9eb0dd444516931f$var$isFunction(value) {
    return typeof value === "function";
}
function $9eb0dd444516931f$var$baseFlatten(array, isDeep, result) {
    result = result || [];
    let index = -1;
    const length = array.length;
    while(++index < length){
        let value = array[index];
        if ($9eb0dd444516931f$var$isNumber(value)) result[result.length] = value;
        else if (isDeep) // Recursively flatten arrays (susceptible to call stack limits).
        $9eb0dd444516931f$var$baseFlatten(value, isDeep, result);
        else result.push(value);
    }
    return result;
}
function $9eb0dd444516931f$var$shapeSize(shape) {
    let s = 1;
    for(let i = 0; i < shape.length; i++)s *= shape[i];
    return s;
}
function $9eb0dd444516931f$var$getType(dtype) {
    return $9eb0dd444516931f$var$isFunction(dtype) ? dtype : $d8385de2fa709eaa$export$2e2bcd8739ae039[dtype] || Array;
}
function $9eb0dd444516931f$var$_dim(x) {
    const ret = [];
    while(typeof x === "object"){
        ret.push(x.length);
        x = x[0];
    }
    return ret;
}
function $9eb0dd444516931f$var$getShape(array) {
    let y, z;
    if (typeof array === "object") {
        y = array[0];
        if (typeof y === "object") {
            z = y[0];
            if (typeof z === "object") return $9eb0dd444516931f$var$_dim(array);
            return [
                array.length,
                y.length
            ];
        }
        return [
            array.length
        ];
    }
    return [];
}
var // function haveSameShape (shape1, shape2) {
//   if (shapeSize(shape1) !== shapeSize(shape2) || shape1.length !== shape2.length) {
//     return false;
//   }
//   let d = shape1.length;
//   for (let i = 0; i < d; i++) {
//     if (shape1[i] !== shape2[i]) {
//       return false;
//     }
//   }
//   return true;
// }
$9eb0dd444516931f$export$2e2bcd8739ae039 = {
    isNumber: $9eb0dd444516931f$var$isNumber,
    isString: $9eb0dd444516931f$var$isString,
    isFunction: $9eb0dd444516931f$var$isFunction,
    flatten: $9eb0dd444516931f$var$baseFlatten,
    shapeSize: $9eb0dd444516931f$var$shapeSize,
    getType: $9eb0dd444516931f$var$getType,
    getShape: $9eb0dd444516931f$var$getShape
};


"use strict";
class $d5dcea7867fbef06$export$bc5d31f6e5be960c {
    constructor(...args){
        if (args.length === 1) this.selection = args[0];
        else if (args.length === 0) throw new $e22306885f624a59$export$54d4c18dc78a26d4("Required argument 'data' not found");
        else this.selection = (/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports)).apply(null, args);
    }
    /**
   * @property NdArray#size - Number of elements in the array.
   */ get size() {
        return this.selection.size;
    }
    /**
   * The shape of the array
   *
   * @name NdArray#shape
   * @readonly
   */ get shape() {
        return this.selection.shape;
    }
    /**
   * Number of array dimensions.
   *
   * @name NdArray#ndim
   * @readonly
   */ get ndim() {
        return this.selection.shape.length;
    }
    /**
   * Data-type of the array’s elements.
   */ get dtype() {
        return this.selection.dtype;
    }
    set dtype(dtype2) {
        const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(dtype2);
        if (T !== $9eb0dd444516931f$export$2e2bcd8739ae039.getType(this.dtype)) this.selection = (/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports))(new T(this.selection.data), this.selection.shape, this.selection.stride, this.selection.offset);
    }
    /**
   * Permute the dimensions of the array.
   *
   * @name NdArray#T
   * @readonly
   */ get T() {
        return this.transpose();
    }
    get(...args1) {
        const n = args1.length;
        for(let i = 0; i < n; i++)if (args1[i] < 0) args1[i] += this.shape[i];
        return this.selection.get.apply(this.selection, args1);
    }
    set(...args2) {
        return this.selection.set.apply(this.selection, args2);
    }
    slice(...args3) {
        const d = this.ndim;
        const hi = new Array(d);
        const lo = new Array(d);
        const step = new Array(d);
        const tShape = this.shape;
        for(let i = 0; i < d; i++){
            let arg = args3[i];
            if (typeof arg === "undefined") break;
            if (arg === null) continue;
            if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(arg)) {
                lo[i] = arg < 0 ? arg + tShape[i] : arg;
                hi[i] = null;
                step[i] = 1;
            } else if (arg.length === 4 && arg[1] === null && arg[2] === null) {
                // pattern: a[start::step]
                const s = arg[0] < 0 ? arg[0] + tShape[i] : arg[0];
                lo[i] = s;
                hi[i] = null;
                step[i] = arg[3] || 1;
            } else {
                // pattern start:end:step
                const start = arg[0] < 0 ? arg[0] + tShape[i] : arg[0];
                const end = arg[1] < 0 ? arg[1] + tShape[i] : arg[1];
                lo[i] = end ? start : 0;
                hi[i] = end ? end - start : start;
                step[i] = arg[2] || 1;
            }
        }
        const slo = this.selection.lo.apply(this.selection, lo);
        const shi = slo.hi.apply(slo, hi);
        const sstep = shi.step.apply(shi, step);
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(sstep);
    }
    /**
   * Return a subarray by fixing a particular axis
   * @param axis a array whose element could be `null` or `number`
   *
   * @example
   * ```typescript
   * arr = nj.arange(4*4).reshape(4,4)
   * // array([[  0,  1,  2,  3],
   * //        [  4,  5,  6,  7],
   * //        [  8,  9, 10, 11],
   * //        [ 12, 13, 14, 15]])
   *
   * arr.pick(1)
   * // array([ 4, 5, 6, 7])
   *
   * arr.pick(null, 1)
   * // array([  1,  5,  9, 13])
   * ```
   **/ pick(...axis) {
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.pick.apply(this.selection, arguments));
    }
    /**
   * Return a shifted view of the array. Think of it as taking the upper left corner of the image and dragging it inward
   *
   * @example
   * ```typescript
   * arr = nj.arange(4*4).reshape(4,4)
   * // array([[  0,  1,  2,  3],
   * //        [  4,  5,  6,  7],
   * //        [  8,  9, 10, 11],
   * //        [ 12, 13, 14, 15]])
   * arr.lo(1,1)
   * // array([[  5,  6,  7],
   * //        [  9, 10, 11],
   * //        [ 13, 14, 15]])
   * ```
   **/ lo(...args4) {
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.lo.apply(this.selection, args4));
    }
    /**
   * Return a sliced view of the array.
   *
   * @example
   * ```typescript
   * arr = nj.arange(4*4).reshape(4,4)
   * // array([[  0,  1,  2,  3],
   * //        [  4,  5,  6,  7],
   * //        [  8,  9, 10, 11],
   * //        [ 12, 13, 14, 15]])
   *
   * arr.hi(3,3)
   * // array([[  0,  1,  2],
   * //        [  4,  5,  6],
   * //        [  8,  9, 10]])
   *
   * arr.lo(1,1).hi(2,2)
   * // array([[ 5,  6],
   * //        [ 9, 10]])
   * ```
   */ hi(...args5) {
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.hi.apply(this.selection, args5));
    }
    step(...args6) {
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.step.apply(this.selection, args6));
    }
    /**
   * Return a copy of the array collapsed into one dimension using row-major order (C-style)
   */ flatten() {
        if (this.ndim === 1) // already flattened
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection);
        const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(this.dtype);
        let arr = $9eb0dd444516931f$export$2e2bcd8739ae039.flatten(this.tolist(), true);
        if (!(arr instanceof T)) arr = new T(arr);
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(arr, [
            this.size
        ]);
    }
    reshape(...args7) {
        if (arguments.length === 0) throw new $e22306885f624a59$export$54d4c18dc78a26d4("function takes at least one argument (0 given)");
        let shape;
        if (arguments.length === 1 && $9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(arguments[0]) && arguments[0] === -1) shape = [
            $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(this.shape)
        ];
        if (arguments.length === 1) {
            if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(arguments[0])) shape = [
                arguments[0]
            ];
            else // grimmer refactor note: original logic does not check if it is an array
            shape = arguments[0];
        }
        if (arguments.length > 1) shape = [].slice.call(arguments);
        if (shape.filter(function(s) {
            return s === -1;
        }).length > 1) throw new $e22306885f624a59$export$54d4c18dc78a26d4("can only specify one unknown dimension");
        const currentShapeSize = $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(shape);
        shape = shape.map((function(s) {
            return s === -1 ? -1 * this.size / currentShapeSize : s;
        }).bind(this));
        if (this.size !== $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(shape)) throw new $e22306885f624a59$export$54d4c18dc78a26d4("total size of new array must be unchanged");
        const selfShape = this.selection.shape;
        const selfOffset = this.selection.offset;
        const selfStride = this.selection.stride;
        const selfDim = selfShape.length;
        const d = shape.length;
        let stride;
        let offset;
        let i;
        let sz;
        if (selfDim === d) {
            let sameShapes = true;
            for(i = 0; i < d; ++i)if (selfShape[i] !== shape[i]) {
                sameShapes = false;
                break;
            }
            if (sameShapes) return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.data, selfShape, selfStride, selfOffset);
        } else if (selfDim === 1) {
            // 1d view
            stride = new Array(d);
            for(i = d - 1, sz = 1; i >= 0; --i){
                stride[i] = sz;
                sz *= shape[i];
            }
            offset = selfOffset;
            for(i = 0; i < d; ++i)if (stride[i] < 0) offset -= (shape[i] - 1) * stride[i];
            return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.data, shape, stride, offset);
        }
        const minDim = Math.min(selfDim, d);
        let areCompatible = true;
        for(i = 0; i < minDim; i++)if (selfShape[i] !== shape[i]) {
            areCompatible = false;
            break;
        }
        if (areCompatible) {
            stride = new Array(d);
            for(i = 0; i < d; i++)stride[i] = selfStride[i] || 1;
            offset = selfOffset;
            return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.data, shape, stride, offset);
        }
        return this.flatten().reshape(shape);
    }
    transpose(...args8) {
        let axes;
        if (args8.length === 0) {
            const d = this.ndim;
            axes = new Array(d);
            for(let i = 0; i < d; i++)axes[i] = d - i - 1;
        } else if (args8.length > 1) axes = args8;
        else axes = args8[0];
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.transpose.apply(this.selection, axes));
    }
    /**
   * Dot product of two arrays.
   */ dot(x) {
        x = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x : $d5dcea7867fbef06$var$createArray(x, this.dtype);
        const tShape = this.shape;
        const xShape = x.shape;
        if (tShape.length === 2 && xShape.length === 2 && tShape[1] === xShape[0]) {
            // matrix/matrix
            const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(this.dtype);
            const c = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new T(tShape[0] * xShape[1]), [
                tShape[0],
                xShape[1],
            ]);
            (/*@__PURE__*/$parcel$interopDefault($22a83ea08428b335$exports))(c.selection, this.selection, x.selection);
            return c;
        } else if (tShape.length === 1 && xShape.length === 2 && tShape[0] === xShape[0]) // vector/matrix
        return this.reshape([
            tShape[0],
            1
        ]).T.dot(x).reshape(xShape[1]);
        else if (tShape.length === 2 && xShape.length === 1 && tShape[1] === xShape[0]) // matrix/vector
        return this.dot(x.reshape([
            xShape[0],
            1
        ])).reshape(tShape[0]);
        else if (tShape.length === 1 && xShape.length === 1 && tShape[0] === xShape[0]) // vector/vector
        return this.reshape([
            tShape[0],
            1
        ]).T.dot(x.reshape([
            xShape[0],
            1
        ])).reshape([
            1
        ]);
        else throw new $e22306885f624a59$export$54d4c18dc78a26d4("cannot compute the matrix product of given arrays");
    }
    /**
   * Assign `x` to the array, element-wise.
   */ assign(x1, copy = true) {
        if (arguments.length === 1) copy = true;
        const arr = copy ? this.clone() : this;
        if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(x1)) {
            (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(arr.selection, x1);
            return arr;
        }
        x1 = $d5dcea7867fbef06$var$createArray(x1, this.dtype);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assign(arr.selection, x1.selection);
        return arr;
    }
    /**
   * Add `x` to the array, element-wise.
   */ add(x2, copy1 = true) {
        if (arguments.length === 1) copy1 = true;
        const arr = copy1 ? this.clone() : this;
        if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(x2)) {
            (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).addseq(arr.selection, x2);
            return arr;
        }
        x2 = $d5dcea7867fbef06$var$createArray(x2, this.dtype);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).addeq(arr.selection, x2.selection);
        return arr;
    }
    /**
   * Subtract `x` to the array, element-wise.
   */ subtract(x3, copy2 = true) {
        if (arguments.length === 1) copy2 = true;
        const arr = copy2 ? this.clone() : this;
        if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(x3)) {
            (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).subseq(arr.selection, x3);
            return arr;
        }
        x3 = $d5dcea7867fbef06$var$createArray(x3, this.dtype);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).subeq(arr.selection, x3.selection);
        return arr;
    }
    /**
   * Multiply array by `x`, element-wise.
   */ multiply(x4, copy3 = true) {
        if (arguments.length === 1) copy3 = true;
        const arr = copy3 ? this.clone() : this;
        if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(x4)) {
            (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).mulseq(arr.selection, x4);
            return arr;
        }
        x4 = $d5dcea7867fbef06$var$createArray(x4, this.dtype);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).muleq(arr.selection, x4.selection);
        return arr;
    }
    /**
   * Divide array by `x`, element-wise.
   */ divide(x5, copy4 = true) {
        if (arguments.length === 1) copy4 = true;
        const arr = copy4 ? this.clone() : this;
        if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(x5)) {
            (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).divseq(arr.selection, x5);
            return arr;
        }
        x5 = $d5dcea7867fbef06$var$createArray(x5, this.dtype);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).diveq(arr.selection, x5.selection);
        return arr;
    }
    /**
   * Raise array elements to powers from given array, element-wise.
   *
   * @param x
   * @param copy - set to false to modify the array rather than create a new one
   */ pow(x6, copy5 = true) {
        if (arguments.length === 1) copy5 = true;
        const arr = copy5 ? this.clone() : this;
        if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(x6)) {
            (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).powseq(arr.selection, x6);
            return arr;
        }
        x6 = $d5dcea7867fbef06$var$createArray(x6, this.dtype);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).poweq(arr.selection, x6.selection);
        return arr;
    }
    /**
   * Calculate the exponential of all elements in the array, element-wise.
   *
   * @param copy - set to false to modify the array rather than create a new one
   */ exp(copy6 = true) {
        if (arguments.length === 0) copy6 = true;
        const arr = copy6 ? this.clone() : this;
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).expeq(arr.selection);
        return arr;
    }
    /**
   * Calculate the natural logarithm of all elements in the array, element-wise.
   *
   * @param copy - set to false to modify the array rather than create a new one
   */ log(copy7 = true) {
        if (arguments.length === 0) copy7 = true;
        const arr = copy7 ? this.clone() : this;
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).logeq(arr.selection);
        return arr;
    }
    /**
   * Calculate the positive square-root of all elements in the array, element-wise.
   *
   * @param copy set to false to modify the array rather than create a new one
   */ sqrt(copy8 = true) {
        if (arguments.length === 0) copy8 = true;
        const arr = copy8 ? this.clone() : this;
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).sqrteq(arr.selection);
        return arr;
    }
    /**
   * Return the maximum value of the array
   */ max() {
        if (this.selection.size === 0) return null;
        return (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).sup(this.selection);
    }
    /**
   * Return the minimum value of the array
   */ min() {
        if (this.selection.size === 0) return null;
        return (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).inf(this.selection);
    }
    /**
   * Sum of array elements.
   */ sum() {
        return (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).sum(this.selection);
    }
    /**
   * Returns the standard deviation, a measure of the spread of a distribution, of the array elements.
   *
   * @param {object} options default {ddof:0}
   */ std(options) {
        if (!options?.ddof) options = {
            ddof: 0
        };
        const squares = this.clone();
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).powseq(squares.selection, 2);
        const mean = this.mean();
        const shapeSize = $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(this.shape);
        const letiance = (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).sum(squares.selection) / (shapeSize - options.ddof) - mean * mean * shapeSize / (shapeSize - options.ddof);
        return letiance > 0 ? Math.sqrt(Math.abs(letiance)) : 0;
    }
    /**
   * Return the arithmetic mean of array elements.
   */ mean() {
        return (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).sum(this.selection) / $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(this.shape);
    }
    /**
   * Return element-wise remainder of division.
   */ mod(x7, copy9 = true) {
        if (arguments.length === 1) copy9 = true;
        const arr = copy9 ? this.clone() : this;
        if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(x7)) {
            (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).modseq(arr.selection, x7);
            return arr;
        }
        x7 = $d5dcea7867fbef06$var$createArray(x7, this.dtype);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).modeq(arr.selection, x7.selection);
        return arr;
    }
    /**
   * Converts {NdArray} to a native JavaScript {Array}
   */ tolist() {
        return $d5dcea7867fbef06$var$unpackArray(this.selection);
    }
    valueOf() {
        return this.tolist();
    }
    /**
   * Stringify the array to make it readable in the console, by a human.
   */ [(/*@__PURE__*/$parcel$interopDefault($d4f13812fe9c6457$exports)).inspect.custom]() {
        return this.toString();
    }
    /**
   * Stringify the array to make it readable by a human.
   */ toString() {
        const nChars = $d5dcea7867fbef06$var$formatNumber(this.max()).length;
        const reg1 = /\]\,(\s*)\[/g;
        const spacer1 = "],\n$1      [";
        const reg3 = /\]\,(\s+)...\,(\s+)\[/g;
        const spacer3 = "],\n$2       ...\n$2      [";
        const reg2 = /\[\s+\[/g;
        const spacer2 = "[[";
        function formatArray(k, v) {
            if ($9eb0dd444516931f$export$2e2bcd8739ae039.isString(v)) return v;
            if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(v)) {
                const s = $d5dcea7867fbef06$var$formatNumber(v);
                return new Array(Math.max(0, nChars - s.length + 2)).join(" ") + s;
            }
            k = k || 0;
            let arr;
            const th = $3a8c7a0e8ba02f7c$export$2e2bcd8739ae039.printThreshold;
            const hth = th / 2 | 0;
            if (v.length > th) arr = [].concat(v.slice(0, hth), [
                " ..."
            ], v.slice(v.length - hth));
            else arr = v;
            return new Array(k + 1).join(" ") + "[" + arr.map(function(i, ii) {
                return formatArray(ii === 0 && k === 0 ? 1 : k + 1, i);
            }).join(",") + "]";
        }
        let base = JSON.stringify(this.tolist(), formatArray).replace(reg1, spacer1).replace(reg2, spacer2).replace(reg2, spacer2).replace(reg3, spacer3).slice(2, -1);
        switch(this.dtype){
            case "array":
                return "array([" + base + ")";
            default:
                return "array([" + base + ", dtype=" + this.dtype + ")";
        }
    }
    /**
   * Stringify object to JSON
   */ toJSON() {
        return JSON.stringify(this.tolist());
    }
    /**
   * Create a full copy of the array
   */ clone() {
        const s = this.selection;
        if (typeof s.data.slice === "undefined") return new $d5dcea7867fbef06$export$bc5d31f6e5be960c((/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports))([].slice.apply(s.data), s.shape, s.stride, s.offset)); // for legacy browsers
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c((/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports))(s.data.slice(), s.shape, s.stride, s.offset));
    }
    /**
   * Return true if two arrays have the same shape and elements, false otherwise.
   */ equal(array) {
        array = $d5dcea7867fbef06$var$createArray(array);
        if (this.size !== array.size || this.ndim !== array.ndim) return false;
        const d = this.ndim;
        for(let i = 0; i < d; i++){
            if (this.shape[i] !== array.shape[i]) return false;
        }
        return (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).equals(this.selection, array.selection);
    }
    /**
   * Round array to the to the nearest integer.
   */ round(copy10 = true) {
        if (arguments.length === 0) copy10 = true;
        const arr = copy10 ? this.clone() : this;
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).roundeq(arr.selection);
        return arr;
    }
    /**
   * Return the inverse of the array, element-wise.
   */ negative() {
        const c = this.clone();
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).neg(c.selection, this.selection);
        return c;
    }
    diag() {
        const d = this.ndim;
        if (d === 1) {
            // input is a vector => return a diagonal matrix
            const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(this.dtype);
            const shape = [
                this.shape[0],
                this.shape[0]
            ];
            const arr = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new T($9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(shape)), shape);
            if (arr.dtype === "array") (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(arr.selection, 0);
            for(let i = 0; i < this.shape[0]; i++)arr.set(i, i, this.get(i));
            return arr;
        }
        const mshape = this.shape;
        const mstride = this.selection.stride;
        let nshape = 1073741824;
        let nstride = 0;
        for(let i = 0; i < d; ++i){
            nshape = Math.min(nshape, mshape[i]) | 0;
            nstride += mstride[i];
        }
        return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(this.selection.data, [
            nshape
        ], [
            nstride
        ], this.selection.offset);
    }
    iteraxis(axis1, cb) {
        const shape = this.shape;
        if (axis1 === -1) axis1 = shape.length - 1;
        if (axis1 < 0 || axis1 > shape.length - 1) throw new $e22306885f624a59$export$54d4c18dc78a26d4("invalid axis");
        for(let i = 0; i < shape[axis1]; i++){
            const loc = new Array(axis1 + 1);
            for(let ii = 0; ii < axis1 + 1; ii++)loc[ii] = ii === axis1 ? i : null;
            const subArr = this.selection.pick.apply(this.selection, loc);
            const xi = $d5dcea7867fbef06$var$createArray($d5dcea7867fbef06$var$unpackArray(subArr), this.dtype);
            cb(xi, i);
        }
    }
    /**
   * Returns the discrete, linear convolution of the array using the given filter.
   *
   * @note: Arrays must have the same dimensions and `filter` must be smaller than the array.
   * @note: The convolution product is only given for points where the signals overlap completely. Values outside the signal boundary have no effect. This behaviour is known as the 'valid' mode.
   * @note: Use optimized code for 3x3, 3x3x1, 5x5, 5x5x1 filters, FFT otherwise.
   */ convolve(filter) {
        filter = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(filter);
        const ndim = this.ndim;
        if (ndim !== filter.ndim) throw new $e22306885f624a59$export$54d4c18dc78a26d4("arrays must have the same dimensions");
        const outShape = new Array(ndim);
        const step = new Array(ndim);
        const ts = this.selection;
        const tShape = this.shape;
        const fs = filter.selection;
        const fShape = filter.shape;
        for(let i = 0; i < ndim; i++){
            const l = tShape[i] - fShape[i] + 1;
            if (l < 0) throw new $e22306885f624a59$export$54d4c18dc78a26d4("filter cannot be greater than the array");
            outShape[i] = l;
            step[i] = -1;
        }
        if (ndim === 2 && fShape[0] === 3 && fShape[1] === 3) {
            const out3x3 = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new Float32Array($9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(tShape)), tShape);
            $d5dcea7867fbef06$var$doConvolve3x3(out3x3.selection, ts, fs.get(0, 0), fs.get(0, 1), fs.get(0, 2), fs.get(1, 0), fs.get(1, 1), fs.get(1, 2), fs.get(2, 0), fs.get(2, 1), fs.get(2, 2) // fi
            );
            return out3x3.lo(1, 1).hi(outShape[0], outShape[1]);
        } else if (ndim === 3 && fShape[2] === 1 && tShape[2] === 1 && fShape[0] === 3 && fShape[1] === 3) {
            const out3x3x1 = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new Float32Array($9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(tShape)), tShape);
            $d5dcea7867fbef06$var$doConvolve3x3(out3x3x1.selection.pick(null, null, 0), ts.pick(null, null, 0), fs.get(0, 0, 0), fs.get(0, 1, 0), fs.get(0, 2, 0), fs.get(1, 0, 0), fs.get(1, 1, 0), fs.get(1, 2, 0), fs.get(2, 0, 0), fs.get(2, 1, 0), fs.get(2, 2, 0) // fi
            );
            return out3x3x1.lo(1, 1).hi(outShape[0], outShape[1]);
        } else if (ndim === 2 && fShape[0] === 5 && fShape[1] === 5) {
            const out5x5 = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new Float32Array($9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(tShape)), tShape);
            $d5dcea7867fbef06$var$doConvolve5x5(out5x5.selection, ts, fs.get(0, 0), fs.get(0, 1), fs.get(0, 2), fs.get(0, 3), fs.get(0, 4), fs.get(1, 0), fs.get(1, 1), fs.get(1, 2), fs.get(1, 3), fs.get(1, 4), fs.get(2, 0), fs.get(2, 1), fs.get(2, 2), fs.get(2, 3), fs.get(2, 4), fs.get(3, 0), fs.get(3, 1), fs.get(3, 2), fs.get(3, 3), fs.get(3, 4), fs.get(4, 0), fs.get(4, 1), fs.get(4, 2), fs.get(4, 3), fs.get(4, 4) // fy
            );
            return out5x5.lo(2, 2).hi(outShape[0], outShape[1]);
        } else if (ndim === 3 && fShape[2] === 1 && tShape[2] === 1 && fShape[0] === 5 && fShape[1] === 5) {
            const out5x5x1 = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new Float32Array($9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(tShape)), tShape);
            $d5dcea7867fbef06$var$doConvolve5x5(out5x5x1.selection, ts, fs.get(0, 0, 0), fs.get(0, 1, 0), fs.get(0, 2, 0), fs.get(0, 3, 0), fs.get(0, 4, 0), fs.get(1, 0, 0), fs.get(1, 1, 0), fs.get(1, 2, 0), fs.get(1, 3, 0), fs.get(1, 4, 0), fs.get(2, 0, 0), fs.get(2, 1, 0), fs.get(2, 2, 0), fs.get(2, 3, 0), fs.get(2, 4, 0), fs.get(3, 0, 0), fs.get(3, 1, 0), fs.get(3, 2, 0), fs.get(3, 3, 0), fs.get(3, 4, 0), fs.get(4, 0, 0), fs.get(4, 1, 0), fs.get(4, 2, 0), fs.get(4, 3, 0), fs.get(4, 4, 0) // fy
            );
            return out5x5x1.lo(2, 2).hi(outShape[0], outShape[1]);
        } else return this.fftconvolve(filter);
    }
    fftconvolve(filter1) {
        filter1 = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(filter1);
        if (this.ndim !== filter1.ndim) throw new $e22306885f624a59$export$54d4c18dc78a26d4("arrays must have the same dimensions");
        const as = this.selection;
        const bs = filter1.selection;
        const d = this.ndim;
        let nsize = 1;
        const nstride = new Array(d);
        const nshape = new Array(d);
        const oshape = new Array(d);
        let i;
        for(i = d - 1; i >= 0; --i){
            nshape[i] = as.shape[i];
            nstride[i] = nsize;
            nsize *= nshape[i];
            oshape[i] = as.shape[i] - bs.shape[i] + 1;
        }
        const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(as.dtype);
        const out = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new T($9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(oshape)), oshape);
        const outs = out.selection;
        const xT = (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).mallocDouble(nsize);
        const x = (/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports))(xT, nshape, nstride, 0);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(x, 0);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assign(x.hi.apply(x, as.shape), as);
        const yT = (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).mallocDouble(nsize);
        const y = (/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports))(yT, nshape, nstride, 0);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(y, 0);
        // FFT x/y
        (/*@__PURE__*/$parcel$interopDefault($959c399aa04d5b22$exports))(1, x, y);
        const uT = (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).mallocDouble(nsize);
        const u = (/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports))(uT, nshape, nstride, 0);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(u, 0);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assign(u.hi.apply(u, bs.shape), bs);
        const vT = (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).mallocDouble(nsize);
        const v = (/*@__PURE__*/$parcel$interopDefault($9c471cb5cd11f802$exports))(vT, nshape, nstride, 0);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(v, 0);
        (/*@__PURE__*/$parcel$interopDefault($959c399aa04d5b22$exports))(1, u, v);
        $d5dcea7867fbef06$var$doConjMuleq(x, y, u, v);
        (/*@__PURE__*/$parcel$interopDefault($959c399aa04d5b22$exports))(-1, x, y);
        const outShape = new Array(d);
        const outOffset = new Array(d);
        let needZeroFill = false;
        for(i = 0; i < d; ++i){
            if (outs.shape[i] > nshape[i]) needZeroFill = true;
            outOffset[i] = bs.shape[i] - 1;
            outShape[i] = Math.min(outs.shape[i], nshape[i] - outOffset[i]);
        }
        let croppedX;
        if (needZeroFill) (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assign(outs, 0);
        croppedX = x.lo.apply(x, outOffset);
        croppedX = croppedX.hi.apply(croppedX, outShape);
        (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assign(outs.hi.apply(outs, outShape), croppedX);
        (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).freeDouble(xT);
        (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).freeDouble(yT);
        (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).freeDouble(uT);
        (/*@__PURE__*/$parcel$interopDefault($9b870bacf32d687d$exports)).freeDouble(vT);
        return out;
    }
    static new(arr1, dtype1) {
        return $d5dcea7867fbef06$var$createArray(arr1, dtype1);
    }
}
/* istanbul ignore next */ const $d5dcea7867fbef06$var$doConjMuleq = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "array",
        "array",
        "array",
        "array"
    ],
    body: function(xi, yi, ui, vi) {
        const a = ui;
        const b = vi;
        const c = xi;
        const d = yi;
        const k1 = c * (a + b);
        xi = k1 - b * (c + d);
        yi = k1 + a * (d - c);
    }
});
/* istanbul ignore next */ const $d5dcea7867fbef06$var$doConvolve3x3 = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "array",
        "array",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        {
            offset: [
                -1,
                -1
            ],
            array: 1
        },
        {
            offset: [
                -1,
                0
            ],
            array: 1
        },
        {
            offset: [
                -1,
                1
            ],
            array: 1
        },
        {
            offset: [
                0,
                -1
            ],
            array: 1
        },
        // {offset:[ 9,  0], array:1}, // useless since available already
        {
            offset: [
                0,
                1
            ],
            array: 1
        },
        {
            offset: [
                1,
                -1
            ],
            array: 1
        },
        {
            offset: [
                1,
                0
            ],
            array: 1
        },
        {
            offset: [
                1,
                1
            ],
            array: 1
        }
    ],
    body: function(c, xe, fa, fb, fc, fd, fe, ff, fg, fh, fi, xa, xb, xc, xd, xf, xg, xh, xi) {
        c = xa * fi + xb * fh + xc * fg + xd * ff + xe * fe + xf * fd + xg * fc + xh * fb + xi * fa;
    }
});
/* istanbul ignore next */ const $d5dcea7867fbef06$var$doConvolve5x5 = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "index",
        "array",
        "array",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        "scalar",
        {
            offset: [
                -2,
                -2
            ],
            array: 1
        },
        {
            offset: [
                -2,
                -1
            ],
            array: 1
        },
        {
            offset: [
                -2,
                0
            ],
            array: 1
        },
        {
            offset: [
                -2,
                1
            ],
            array: 1
        },
        {
            offset: [
                -2,
                2
            ],
            array: 1
        },
        {
            offset: [
                -1,
                -2
            ],
            array: 1
        },
        {
            offset: [
                -1,
                -1
            ],
            array: 1
        },
        {
            offset: [
                -1,
                0
            ],
            array: 1
        },
        {
            offset: [
                -1,
                1
            ],
            array: 1
        },
        {
            offset: [
                -1,
                2
            ],
            array: 1
        },
        {
            offset: [
                0,
                -2
            ],
            array: 1
        },
        {
            offset: [
                0,
                -1
            ],
            array: 1
        },
        // {offset:[ 0,  0], array:1},
        {
            offset: [
                0,
                1
            ],
            array: 1
        },
        {
            offset: [
                0,
                2
            ],
            array: 1
        },
        {
            offset: [
                1,
                -2
            ],
            array: 1
        },
        {
            offset: [
                1,
                -1
            ],
            array: 1
        },
        {
            offset: [
                1,
                0
            ],
            array: 1
        },
        {
            offset: [
                1,
                1
            ],
            array: 1
        },
        {
            offset: [
                1,
                2
            ],
            array: 1
        },
        {
            offset: [
                2,
                -2
            ],
            array: 1
        },
        {
            offset: [
                2,
                -1
            ],
            array: 1
        },
        {
            offset: [
                2,
                0
            ],
            array: 1
        },
        {
            offset: [
                2,
                1
            ],
            array: 1
        },
        {
            offset: [
                2,
                2
            ],
            array: 1
        }
    ],
    body: function(index, c, xm, fa, fb, fc, fd, fe, ff, fg, fh, fi, fj, fk, fl, fm, fn, fo, fp, fq, fr, fs, ft, fu, fv, fw, fx, fy, xa, xb, xc, xd, xe, xf, xg, xh, xi, xj, xk, xl, xn, xo, xp, xq, xr, xs, xt, xu, xv, xw, xx, xy) {
        c = index[0] < 2 || index[1] < 2 ? 0 : xa * fy + xb * fx + xc * fw + xd * fv + xe * fu + xf * ft + xg * fs + xh * fr + xi * fq + xj * fp + xk * fo + xl * fn + xm * fm + xn * fl + xo * fk + xp * fj + xq * fi + xr * fh + xs * fg + xt * ff + xu * fe + xv * fd + xw * fc + xx * fb + xy * fa;
    }
});
function $d5dcea7867fbef06$var$createArray(arr, dtype) {
    if (arr instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c) return arr;
    let T;
    // this condition is to fix https://github.com/grimmer0125/numjs/pull/9
    if (dtype) T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(dtype);
    if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(arr)) {
        if (T && T !== Array) return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new T([
            arr
        ]), [
            1
        ]);
        else return new $d5dcea7867fbef06$export$bc5d31f6e5be960c([
            arr
        ], [
            1
        ]);
    }
    const shape = $9eb0dd444516931f$export$2e2bcd8739ae039.getShape(arr);
    if (shape.length > 1) arr = $9eb0dd444516931f$export$2e2bcd8739ae039.flatten(arr, true);
    if (T && !(arr instanceof T)) {
        // below is to fix https://github.com/grimmer0125/numjs/pull/9
        if (arr instanceof Array) arr = new T(arr);
        else if (T === Array) arr = Array.from(arr);
        else throw new $e22306885f624a59$export$54d4c18dc78a26d4("Passed TypedArray and (Typed) dtype are not the same types, not support these conversions yet");
    }
    return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(arr, shape);
}
// NdArray.new = createArray;
/*     utils    */ function $d5dcea7867fbef06$var$initNativeArray(shape, i) {
    i = i || 0;
    const c = shape[i] | 0;
    if (c <= 0) return [];
    const result = new Array(c);
    let j;
    if (i === shape.length - 1) for(j = 0; j < c; ++j)result[j] = 0;
    else for(j = 0; j < c; ++j)result[j] = $d5dcea7867fbef06$var$initNativeArray(shape, i + 1);
    return result;
}
/* istanbul ignore next */ const $d5dcea7867fbef06$var$doUnpack = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "array",
        "scalar",
        "index"
    ],
    body: function unpackCwise(arr, a, idx) {
        let v = a;
        let i;
        for(i = 0; i < idx.length - 1; ++i)v = v[idx[i]];
        v[idx[idx.length - 1]] = arr;
    }
});
function $d5dcea7867fbef06$var$unpackArray(arr) {
    const result = $d5dcea7867fbef06$var$initNativeArray(arr.shape, 0);
    $d5dcea7867fbef06$var$doUnpack(arr, result);
    return result;
}
function $d5dcea7867fbef06$var$formatNumber(v) {
    return String(Number((v || 0).toFixed($3a8c7a0e8ba02f7c$export$2e2bcd8739ae039.nFloatingValues)));
}




/**
 * This is default exported `nj` module page. Below References, Namespaces, Properties, Functions are all exported.
 * For example, after import `nj` via `import nj from "@d4c/numjs";` or `const nj = require('@d4c/numjs').default;`,
 * you can use `nj.array` to use create a `NdArray`.
 *
 * @packageDocumentation
 */ "use strict";
function $5b80294f529b48c3$export$24d33a6f4bffea69(shape1, shape2) {
    if (shape1.length === 0 || shape2.length === 0) return;
    const reversed1 = shape1.slice().reverse();
    const reversed2 = shape2.slice().reverse();
    const maxLength = Math.max(shape1.length, shape2.length);
    const outShape = new Array(maxLength);
    for(let i = 0; i < maxLength; i++){
        if (!reversed1[i] || reversed1[i] === 1) outShape[i] = reversed2[i];
        else if (!reversed2[i] || reversed2[i] === 1) outShape[i] = reversed1[i];
        else if (reversed1[i] === reversed2[i]) outShape[i] = reversed1[i];
        else return;
    }
    return outShape.reverse();
}
function $5b80294f529b48c3$export$e16d8520af44a096(a, b) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a).add(b);
}
function $5b80294f529b48c3$export$2060d2db72cce88f(a, b) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a).multiply(b);
}
function $5b80294f529b48c3$export$cd007d971a5a2143(a, b) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a).divide(b);
}
function $5b80294f529b48c3$export$4e2d2ead65e5f7e3(a, b) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a).subtract(b);
}
function $5b80294f529b48c3$export$411ce8e5a71e3069(array1, array2) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array1).equal(array2);
}
function $5b80294f529b48c3$export$bffa455ba8c619a6(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array).flatten();
}
function $5b80294f529b48c3$export$9eaad88cf88cee2b(array, shape) {
    // TypeScript is not smart enought on parameters detection on overloading
    // workaround way
    if (typeof shape == "number") return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array).reshape(shape);
    else return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array).reshape(shape);
}
function $5b80294f529b48c3$export$b310ec824aaee37f(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).exp();
}
function $5b80294f529b48c3$export$bef1f36f5486a6a3(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).log();
}
function $5b80294f529b48c3$export$eba8049fb5020b81(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).sqrt();
}
function $5b80294f529b48c3$export$836601bcef5ff40(x1, x2) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x1).pow(x2);
}
function $5b80294f529b48c3$export$8a63f25cc62965f1(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).sum();
}
function $5b80294f529b48c3$export$1ce691f85baaa52(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).mean();
}
function $5b80294f529b48c3$export$b14c5e819cb6c927(x, options) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).std(options);
}
function $5b80294f529b48c3$export$96ec731ed4dcb222(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).min();
}
function $5b80294f529b48c3$export$8960430cfd85939f(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).max();
}
function $5b80294f529b48c3$export$842a2cf37af977e1(x1, x2) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x1).mod(x2);
}
function $5b80294f529b48c3$export$9cb09a71b7d66923(x, axes) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).transpose(axes);
}
function $5b80294f529b48c3$export$5f47f64d03acd206(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).negative();
}
function $5b80294f529b48c3$export$4e92d6e2d1690647(...args) {
    if (arguments.length === 1) return $5b80294f529b48c3$export$4e92d6e2d1690647(0, arguments[0], 1, undefined);
    else if (arguments.length === 2 && $9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(arguments[1])) return $5b80294f529b48c3$export$4e92d6e2d1690647(arguments[0], arguments[1], 1, undefined);
    else if (arguments.length === 2) return $5b80294f529b48c3$export$4e92d6e2d1690647(0, arguments[0], 1, arguments[1]);
    else if (arguments.length === 3 && !$9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(arguments[2])) return $5b80294f529b48c3$export$4e92d6e2d1690647(arguments[0], arguments[1], 1, arguments[2]);
    let start = arguments[0];
    const stop = arguments[1];
    const step = arguments[2];
    const dtype = arguments[3];
    const result = [];
    let i = 0;
    while(start < stop){
        result[i++] = start;
        start += step;
    }
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(result, dtype);
}
function $5b80294f529b48c3$export$4445a00dafa2633b(shape, dtype) {
    if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(shape) && shape >= 0) shape = [
        shape
    ];
    const s = $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(shape);
    const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(dtype);
    const arr = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new T(s), shape);
    if (arr.dtype === "array") (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(arr.selection, 0);
    return arr;
}
function $5b80294f529b48c3$export$21041dee6b8001b0(shape, dtype) {
    if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(shape) && shape >= 0) shape = [
        shape
    ];
    const s = $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(shape);
    const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(dtype);
    const arr = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new T(s), shape);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).assigns(arr.selection, 1);
    return arr;
}
function $5b80294f529b48c3$export$6e22c362a0406a2c(shape, dtype) {
    if ($9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(shape) && shape >= 0) shape = [
        shape
    ];
    const s = $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(shape);
    const T = $9eb0dd444516931f$export$2e2bcd8739ae039.getType(dtype);
    return new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new T(s), shape);
}
function $5b80294f529b48c3$export$4385e60b38654f68(...args) {
    let shape;
    if (arguments.length === 0) return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(Math.random());
    else if (arguments.length === 1) shape = $9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(args[0]) ? [
        args[0] | 0
    ] : args[0];
    else shape = [].slice.call(arguments);
    const s = $9eb0dd444516931f$export$2e2bcd8739ae039.shapeSize(shape);
    const arr = new $d5dcea7867fbef06$export$bc5d31f6e5be960c(new Float64Array(s), shape);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).random(arr.selection);
    return arr;
}
function $5b80294f529b48c3$export$e008137e76238601(x) {
    const e = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).exp();
    const se = e.sum(); // scalar
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).divseq(e.selection, se);
    return e;
}
/* istanbul ignore next */ const $5b80294f529b48c3$var$doSigmoid = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "array",
        "scalar"
    ],
    body: function sigmoidCwise(a, t) {
        a = a < -30 ? 0 : a > 30 ? 1 : 1 / (1 + Math.exp(-1 * t * a));
    }
});
function $5b80294f529b48c3$export$3b295495ca3cad7c(x, t = 1) {
    x = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).clone();
    t = t || 1;
    $5b80294f529b48c3$var$doSigmoid(x.selection, t);
    return x;
}
/* istanbul ignore next */ const $5b80294f529b48c3$var$doClip = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "array",
        "scalar",
        "scalar"
    ],
    body: function clipCwise(a, min, max) {
        a = Math.min(Math.max(min, a), max);
    }
});
function $5b80294f529b48c3$export$e0b576e7a74416cd(x, min = 0, max = 1) {
    if (arguments.length === 1) {
        min = 0;
        max = 1;
    } else if (arguments.length === 2) max = 1;
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    $5b80294f529b48c3$var$doClip(s.selection, min, max);
    return s;
}
const $5b80294f529b48c3$var$doLeakyRelu = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "array",
        "scalar"
    ],
    body: function leakyReluCwise(xi, alpha) {
        xi = Math.max(alpha * xi, xi);
    }
});
function $5b80294f529b48c3$export$23a860e40a2c6b61(x, alpha) {
    alpha = alpha || 0.001;
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    $5b80294f529b48c3$var$doLeakyRelu(s.selection, alpha);
    return s;
}
/* istanbul ignore next */ const $5b80294f529b48c3$var$doTanh = (/*@__PURE__*/$parcel$interopDefault($a1c71f2c05033a53$exports))({
    args: [
        "array"
    ],
    body: function tanhCwise(xi) {
        xi = (Math.exp(2 * xi) - 1) / (Math.exp(2 * xi) + 1);
    }
});
function $5b80294f529b48c3$export$7128670e45beef9a(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    $5b80294f529b48c3$var$doTanh(s.selection);
    return s;
}
function $5b80294f529b48c3$export$2335f513bbd82c6d(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).abseq(s.selection);
    return s;
}
function $5b80294f529b48c3$export$50d414a77b60d802(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).coseq(s.selection);
    return s;
}
function $5b80294f529b48c3$export$a77ec9dbb835546d(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).acoseq(s.selection);
    return s;
}
function $5b80294f529b48c3$export$5de3937cb4b592ed(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).sineq(s.selection);
    return s;
}
function $5b80294f529b48c3$export$5f2270b14fe911ec(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).asineq(s.selection);
    return s;
}
function $5b80294f529b48c3$export$fcdd3b0b3246a325(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).taneq(s.selection);
    return s;
}
function $5b80294f529b48c3$export$1dd23712ef22299b(x) {
    const s = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    (/*@__PURE__*/$parcel$interopDefault($1cb49d2bf43ba42b$exports)).ataneq(s.selection);
    return s;
}
function $5b80294f529b48c3$export$94132a0e348806d4(a, b) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a).dot(b);
}
function $5b80294f529b48c3$export$375c71d43969527d(...args) {
    let arrays;
    if (args.length > 1) arrays = [].slice.call(args);
    else arrays = args[0];
    let i, a;
    for(i = 0; i < arrays.length; i++){
        a = arrays[i];
        arrays[i] = a instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? a.tolist() : $9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(a) ? [
            a
        ] : a;
    }
    let m = arrays[0];
    for(i = 1; i < arrays.length; i++){
        a = arrays[i];
        const mShape = $9eb0dd444516931f$export$2e2bcd8739ae039.getShape(m);
        const aShape = $9eb0dd444516931f$export$2e2bcd8739ae039.getShape(a);
        if (mShape.length !== aShape.length) throw new $e22306885f624a59$export$54d4c18dc78a26d4("all the input arrays must have same number of dimensions");
        else if (mShape.length === 1 && aShape.length === 1) m = m.concat(a);
        else if (mShape.length === 2 && aShape.length === 2 && mShape[0] === aShape[0] || mShape.length === 1 && aShape.length === 2 && mShape[0] === aShape[0] || mShape.length === 2 && aShape.length === 1 && mShape[0] === aShape[0]) for(let row = 0; row < mShape[0]; row++)m[row] = m[row].concat(a[row]);
        else if (mShape.length === 3 && aShape.length === 3 && mShape[0] === aShape[0] && mShape[1] === aShape[1] || mShape.length === 2 && aShape.length === 3 && mShape[0] === aShape[0] && mShape[1] === aShape[1] || mShape.length === 3 && aShape.length === 2 && mShape[0] === aShape[0] && mShape[1] === aShape[1]) for(let rowI = 0; rowI < mShape[0]; rowI++){
            const rowV = new Array(mShape[1]);
            for(let colI = 0; colI < mShape[1]; colI++)rowV[colI] = m[rowI][colI].concat(a[rowI][colI]);
            m[rowI] = rowV;
        }
        else throw new $e22306885f624a59$export$54d4c18dc78a26d4('cannot concatenate  "' + mShape + '" with "' + aShape + '"');
    }
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(m, arrays[0].dtype);
}
function $5b80294f529b48c3$export$2077e0241d6afd3c(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).round();
}
function $5b80294f529b48c3$export$ece4a5f0da45b7c9(a, b) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a).convolve(b);
}
function $5b80294f529b48c3$export$16aabfb23a0a5107(a, b) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a).fftconvolve(b);
}
function $5b80294f529b48c3$export$a535ef183b6128fa(x) {
    x = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    const xShape = x.shape;
    const d = xShape.length;
    if (xShape[d - 1] !== 2) throw new $e22306885f624a59$export$54d4c18dc78a26d4("expect last dimension of the array to have 2 values (for both real and imaginary part)");
    let rPicker = new Array(d);
    let iPicker = new Array(d);
    rPicker[d - 1] = 0;
    iPicker[d - 1] = 1;
    (/*@__PURE__*/$parcel$interopDefault($959c399aa04d5b22$exports))(1, x.selection.pick.apply(x.selection, rPicker), x.selection.pick.apply(x.selection, iPicker));
    return x;
}
function $5b80294f529b48c3$export$776649b0bf8ce1fd(x) {
    x = x instanceof $d5dcea7867fbef06$export$bc5d31f6e5be960c ? x.clone() : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x);
    const xShape = x.shape;
    const d = xShape.length;
    if (xShape[d - 1] !== 2) throw new $e22306885f624a59$export$54d4c18dc78a26d4("expect last dimension of the array to have 2 values (for both real and imaginary part)");
    let rPicker = new Array(d);
    let iPicker = new Array(d);
    rPicker[d - 1] = 0;
    iPicker[d - 1] = 1;
    (/*@__PURE__*/$parcel$interopDefault($959c399aa04d5b22$exports))(-1, x.selection.pick.apply(x.selection, rPicker), x.selection.pick.apply(x.selection, iPicker));
    return x;
}
function $5b80294f529b48c3$export$c042e7c2f59bc046(x) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(x).diag();
}
function $5b80294f529b48c3$export$f0954fd7d5368655(n, dtype) {
    const arr = $5b80294f529b48c3$export$4445a00dafa2633b([
        n,
        n
    ], dtype);
    for(let i = 0; i < n; i++)arr.set(i, i, 1);
    return arr;
}
function $5b80294f529b48c3$export$a57ab32f40f83ea9(arrays, axis = 0) {
    axis = axis || 0;
    if (!arrays || arrays.length === 0) throw new $e22306885f624a59$export$54d4c18dc78a26d4("need at least one array to stack");
    const arrays2 = arrays.map(function(a) {
        return $9eb0dd444516931f$export$2e2bcd8739ae039.isNumber(a) ? a : $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(a);
    });
    const expectedShape = arrays2[0].shape || []; // for numbers
    for(let i = 1; i < arrays2.length; i++){
        const shape = arrays2[i].shape || []; // for numbers
        const len = Math.max(expectedShape.length, shape.length);
        for(let j = 0; j < len; j++){
            if (expectedShape[j] !== shape[j]) throw new $e22306885f624a59$export$54d4c18dc78a26d4("all input arrays must have the same shape");
        }
    }
    let stacked;
    if (expectedShape.length === 0) // stacking numbers
    stacked = $5b80294f529b48c3$export$375c71d43969527d(arrays2);
    else {
        stacked = $5b80294f529b48c3$export$4445a00dafa2633b([
            arrays2.length
        ].concat(expectedShape));
        for(let i = 0; i < arrays2.length; i++)stacked.pick(i).assign(arrays2[i], false);
    }
    if (axis) {
        // recompute neg axis
        if (axis < 0) axis = stacked.ndim + axis;
        const d = stacked.ndim;
        const axes = new Array(d);
        for(let i = 0; i < d; i++)axes[i] = i < axis ? i + 1 : i === axis ? 0 : i;
        return stacked.transpose(axes);
    }
    return stacked;
}
function $5b80294f529b48c3$export$8a83211c878a3f1f(m, axis) {
    m = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(m);
    const indexer = $5b80294f529b48c3$export$21041dee6b8001b0(m.ndim).tolist();
    let cleanaxis = axis;
    while(cleanaxis < 0)cleanaxis += m.ndim;
    if (indexer[cleanaxis] === undefined) throw new $e22306885f624a59$export$54d4c18dc78a26d4("axis=" + axis + "invalid for the " + m.ndim + "-dimensional input array");
    indexer[cleanaxis] = -1;
    return m.step.apply(m, indexer);
}
function $5b80294f529b48c3$export$e89c04f990ad139d(m, k = 1, axes = [
    0,
    1
]) {
    k = k || 1;
    while(k < 0)k += 4;
    k = k % 4;
    m = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(m);
    let axes2 = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(axes || [
        0,
        1
    ]);
    if (axes2.shape.length !== 1 || axes2.shape[0] !== 2) throw new $e22306885f624a59$export$54d4c18dc78a26d4("len(axes) must be 2");
    axes2 = axes2.tolist();
    if (axes2[0] === axes2[1] || $5b80294f529b48c3$export$2335f513bbd82c6d(axes2[0] - axes2[1]).ndim === m.ndim) throw new $e22306885f624a59$export$54d4c18dc78a26d4("Axes must be different.");
    if (k === 0) return m;
    if (k === 2) return $5b80294f529b48c3$export$8a83211c878a3f1f($5b80294f529b48c3$export$8a83211c878a3f1f(m, axes2[0]), axes2[1]);
    const axesList = $5b80294f529b48c3$export$4e92d6e2d1690647(m.ndim).tolist();
    const keep = axesList[axes2[0]];
    axesList[axes2[0]] = axesList[axes2[1]];
    axesList[axes2[1]] = keep;
    if (k === 1) return $5b80294f529b48c3$export$9cb09a71b7d66923($5b80294f529b48c3$export$8a83211c878a3f1f(m, axes2[1]), axesList);
    else return $5b80294f529b48c3$export$8a83211c878a3f1f($5b80294f529b48c3$export$9cb09a71b7d66923(m, axesList), axes2[1]);
}
const $5b80294f529b48c3$export$2f23118c22fb2630 = $d5dcea7867fbef06$export$bc5d31f6e5be960c.new;
const $5b80294f529b48c3$export$159037f780d3415c = $5b80294f529b48c3$export$842a2cf37af977e1;
function $5b80294f529b48c3$export$5984f25eab09961f(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "int8");
}
function $5b80294f529b48c3$export$52e103c63c4e68cf(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "uint8");
}
function $5b80294f529b48c3$export$c35c15c7caeff2b6(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "int16");
}
function $5b80294f529b48c3$export$56bd24b5a3ee8456(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "uint16");
}
function $5b80294f529b48c3$export$1d95835383bb05a(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "int32");
}
function $5b80294f529b48c3$export$de9ffb9418dd7d0d(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "uint32");
}
function $5b80294f529b48c3$export$1a4bac2aea11f30e(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "float32");
}
function $5b80294f529b48c3$export$76f82835c9736f87(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "float64");
}
function $5b80294f529b48c3$export$6f7fad9e75d68564(array) {
    return $d5dcea7867fbef06$export$bc5d31f6e5be960c.new(array, "uint8_clamped");
}



var $aea434cf959c5d5f$export$2e2bcd8739ae039 = $5b80294f529b48c3$exports;


export {$aea434cf959c5d5f$export$2e2bcd8739ae039 as default, $d5dcea7867fbef06$export$bc5d31f6e5be960c as NdArray};
